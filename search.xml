<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>rust学习资源与进阶资料</title>
      <link href="/posts/e0da0190/"/>
      <url>/posts/e0da0190/</url>
      
        <content type="html"><![CDATA[<h2 id="rust学习资源与进阶资料"><a class="markdownIt-Anchor" href="#rust学习资源与进阶资料"></a> rust学习资源与进阶资料</h2><ul><li>2022/10/17 新增 <a href="https://github.com/smallnest/concurrency-programming-via-rust">smallnest/concurrency-programming-via-rust 《Rust 并发编程实战课》</a><br />2022/09/26 新增 <a href="https://jinleili.github.io/learn-wgpu-zh/">Learn wgpu 中文版</a> , <a href="https://kylemayes.github.io/vulkanalia/introduction.html">Vulkan Tutorial(Rust)</a><br />2022/08/24 新增 <a href="https://github.com/awesome-kusion/rust-code-book">Rust 源码剖析 中文版</a><br />2022/08/24 新增 <a href="https://github.com/Boshen/javascript-parser-in-rust">Boshen/javascript-parser-in-rust</a> <a href="https://litchipi.github.io/series/container_in_rust">Writing a container in Rust</a><br />2022/07/05 新增 <a href="https://www.youtube.com/watch?v=rDoqT-a6UFg">Visualizing memory layout of Rust’s data types</a> <a href="https://learningos.github.io/rust-based-os-comp2022/">2022 年开源操作系统训练营</a><br />2022/07/02 新增 <a href="https://www.youtube.com/watch?v=rHRBJKWbbw0">Building a Pixel Editor in Rust &amp; WebAssembly (and Javascript)</a> <a href="https://bugzmanov.github.io/nes_ebook/chapter_1.html">Writing NES Emulator in Rust</a><br />2022/05/07 新增 <a href="https://vishpat.github.io/lisp-rs/">Lisp interpreter in Rust</a><br />2022/05/07 新增 <a href="https://blog.fudenglong.site/Programming-Rust/">《Programming Rust, 2nd Edition》简单的翻译</a> 和 <a href="https://github.com/rustlang-cn/Rustt">rustlang-cn/Rustt</a><br />2022/04/25 新增一个链接 <a href="https://apollolabsblog.hashnode.dev/35-rust-learning-resources-every-beginner-should-know-in-2022">35 Rust Learning Resources Every Beginner Should Know in 2022</a><br />2022/04/19 新增一个进阶链接 <a href="https://github.com/Warrenren/inside-rust-std-library">Warrenren/inside-rust-std-library</a><br />2022/03/27 新增一个进阶链接<br />2022/03/15 新增一个基础链接<br />2022/03/13 新增一个进阶链接<br />2022/03/11 新增两个游戏开发相关的链接</li></ul><h2 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h2><ul><li>The Rust Programming Language<ul><li>堪称 Rust 的 “The Book”，是目前最权威的 Rust 系统教程，入门必读，最近也更新到了 2021 版本。</li><li><a href="https://kaisery.github.io/trpl-zh-cn/title-page.html">中文版 (经常更新)</a> <a href="https://rustwiki.org/zh-CN/book/">rustwiki 中文版</a></li></ul></li><li>Rust by Example<ul><li>实例化的讲解方法，通过一个个可实际运行的例子去介绍 Rust 的特性和用法，有的时候，代码是最好的老师。</li><li><a href="https://rustwiki.org/zh-CN/rust-by-example/">中文版</a></li></ul></li><li>The Rust primer for beginners<ul><li>给初学者的 Rust 中文教程。</li></ul></li><li>Rust 入门秘籍<ul><li>这是一本 Rust 的入门书籍，相比官方书籍《The Rust Programming Language》，本书要更详细、更具系统性，本书也尽量追求准确性。</li></ul></li><li>Rust First Steps<ul><li>微软的 Rust 教程，简短精炼，适合初学者。</li><li><a href="https://docs.microsoft.com/zh-cn/learn/paths/rust-first-steps/">官方中文</a></li></ul></li><li>Rust Cookbook<ul><li>Rust 程序设计语言（<a href="https://rustwiki.org/zh-CN/book">Rust 官方教程简体中文版</a>）的简要实例示例集合：展示了在 Rust 生态系统中，使用各类 crate 来完成常见编程任务的良好实践。</li><li><a href="https://rustwiki.org/zh-CN/rust-cookbook/">中文版</a></li></ul></li><li>Rustlings<ul><li>官方出品，涵盖大量小练习，打怪通关学习 Rust。</li><li>Jetbrains IDE 可以直接<a href="https://plugins.jetbrains.com/plugin/16631-rustlings">下载课程</a>，编辑器内写代码做练习。</li></ul></li><li>Learning Rust With Entirely Too Many Linked Lists<ul><li>通过写双链表来学习 Rust</li></ul></li><li>Read Rust - Getting Started<ul><li><a href="https://readrust.net/">Read Rust</a> 是一个集合了有价值的 Rust 文章 / 博客的网站，其中 <a href="https://readrust.net/getting-started">Getting Started</a> 部分有各种 Rust 知识点相关的十分优秀的文章。</li></ul></li><li>Stanford CS 110L：Safety in Systems Programming<ul><li>This class is focused on safety and robustness in systems programming. We will use the Rust programming language as a vehicle to teach mental models and paradigms that have been shown to be helpful in preventing errors, and we will look at how these features have made their way back into C++.</li><li><a href="https://www.bilibili.com/video/BV1Ra411A7kN">2020 年课程的 B 站中文字幕版</a></li><li><a href="https://reberhardt.com/cs110l/spring-2021/">2021 年课程主页</a>、<a href="https://web.stanford.edu/class/cs110l/">2022 年课程主页</a></li></ul></li><li>Rust 语言圣经 (Rust 教程 Rust Course)<ul><li><a href="https://github.com/sunface/rust-course">rust-course</a> 国人写的 Rust 教程，对 Rust 语言进行全面且深入的讲解，书中辅以生动的示例和习题。</li></ul></li><li>Rust 官方文档中文教程<ul><li><a href="https://github.com/rust-lang-cn">rust-lang-cn 组织</a>翻译的官方文档，另外这个组织也翻译了很多 Rust 相关的书籍。</li></ul></li><li>Visualizing memory layout of Rust’s data types<ul><li>可视化了 Rust 的类型在内存中的布局，入门必看。</li></ul></li><li>Rust 实践指南<ul><li><a href="https://github.com/zzy/rust-guide">zzy/rust-guide</a> 《Rust 实践指南》，聚焦重要的主题，展示可能的解决方案。以开发中的实际问题为导向，以优雅的解决方案为目标，以完整的实例实践解决方案。</li></ul></li><li>Bilibili：软件工艺师<ul><li>微软 MVP，做了不少 C#、Go、Rust 的教程，其中 Rust 相关的有 <a href="https://www.bilibili.com/video/BV1hp4y1k7SV">Rust 编程语言入门教程</a> 和 <a href="https://www.bilibili.com/video/BV1RP4y1G7KF">Rust Web 全栈开发教程</a></li></ul></li><li><a href="https://cheats.rs/">Rust Language Cheat Sheet</a></li><li><a href="http://quickref.me">quickref.me</a> Rust cheatsheet<ul><li><a href="http://quickref.me/">quickref.me</a> 是一个汇聚了大部分语言的语法索引页，其中也包含了 Rust, 可以帮助大家快速找到想用的语法。</li></ul></li><li>rust-lang/api-guidelines<ul><li><a href="https://zjp-cn.github.io/api-guidelines/about.html">中文版：Rust API 编写指南</a> 这是一组关于如何设计和呈现 Rust APIs 的建议。 这些建议主要由 Rust library 团队编写， 总结了 Rust 生态下构建标准库和其他 crates 的经验。</li></ul></li><li>《Programming Rust, 2nd Edition》简单的翻译<ul><li>第一版图灵社区有翻译：<a href="https://www.ituring.com.cn/book/2101">Rust 程序设计</a>，第二版多了两章，可以考虑买第一版的电子版 pdf。</li></ul></li><li>rustlang-cn/Rustt<ul><li>RustCn 翻译计划，翻译一些 Rust 的技术文章。</li></ul></li><li>suhanyujie/article-transfer-rs<ul><li>一些 Rust/Go 文章翻译</li></ul></li></ul><h2 id="进阶"><a class="markdownIt-Anchor" href="#进阶"></a> 进阶</h2><ul><li><p><a href="https://doc.rust-lang.org/std/index.html">Rust Standard Library Reference</a></p></li><li><p>The Rust Reference</p><ul><li>Rust 语言的 reference manual，你应该收藏好，以便于在对某个语言细节不清楚时在这里进行查阅。</li><li><a href="https://rustwiki.org/zh-CN/reference/">中文版</a></li></ul></li><li><p><a href="https://doc.rust-lang.org/nightly/unstable-book/index.html">The unsafe Book</a></p></li><li><p>The Rustonomicon</p><ul><li>Rust 死灵书主要讲 Rust 高级特性，如何使用 unsafe Rust。</li><li><a href="https://nomicon.purewhite.io/">中文版</a></li></ul></li><li><p>The Little Book of Rust Macros</p><ul><li>对于 Rust 宏有详细的讲解，里面的注释很全面。</li><li><a href="https://zjp-cn.github.io/tlborm/">中文版</a></li></ul></li><li><p>smallnest/concurrency-programming-via-rust 《Rust 并发编程实战课》</p><ul><li>《Go 并发编程实战课》的作者鸟窝系统整理的 Rust 的并发编程的相关资料。主要是从入门入手，让大家了解和熟悉这些并发原语，在工作中用起来。</li><li>另外，mouse 姐姐也有相关的书将要出版<a href="https://www.amazon.com/Rust-Atomics-Locks-Low-Level-Concurrency/dp/1098119444">《Rust Atomics and Locks: Low-Level Concurrency in Practice》</a>。</li></ul></li><li><p>Asynchronous Programming in Rust</p><ul><li><a href="https://github.com/bestgopher/rust-async-book">不是很新的中文版</a></li></ul></li><li><p><a href="https://locka99.gitbooks.io/a-guide-to-porting-c-to-rust/content/">A Guide to Porting C/C++ to Rust</a></p></li><li><p>The Rust FFI Omnibus</p><ul><li>使用 Rust 编写代码用到其他语言的示例集合.</li><li><a href="http://llever.com/rust-ffi-omnibus/">中文版</a></li></ul></li><li><p><a href="https://www.youtube.com/channel/UC_iD0xppBwwsrM9DegC5cQQ">Jon Gjengset YouTube Channel</a> (<a href="https://www.youtube.com/watch?v=rAl-9HwD858&amp;list=PLqbS7AVVErFiWDOAVrPt7aYmnuuOLYvOa">Crust of Rust Playlist</a>)</p></li><li><p>Rust Design Patterns</p><ul><li>有许多问题具有共同的形式。由于事实上 Rust 并不完全是面向对象的，设计模式也与其他面向对象的编程语言不同。 细节不同的同时，因为他们有相同的形式，他们可以用同样的基本方法解决。</li><li><a href="http://chuxiuhong.com/chuxiuhong-rust-patterns-zh/">中文版</a></li></ul></li><li><p>The Rust Performance Book</p><ul><li>介绍很多优化 Rust 程序性能的工具、技巧、调试方法等方面的书。</li></ul></li><li><p>Problem-solving with algorithms and data structures using Rust</p><ul><li>国人写的一本 Rust 书籍，包括算法分析，基本数据结构和算法，外加一些实战。</li></ul></li><li><p>Rust 源码剖析 中文版</p><ul><li>国人写的一本 Rust 书籍，针对 Rust 语言本身和开源库的代码进行分析。</li></ul></li><li><p>dtolnay/case-studies</p><ul><li>dtolnay 是 anyhow, thiserror, cxx 等库的作者，这是他对一些 tricky Rust code 的分析。</li></ul></li><li><p>Bilibili：Databend</p><ul><li>Databend 社区持续做了不少 Rust 的公开课。<a href="https://github.com/wubx/rust-in-databend/">仓库地址</a></li></ul></li><li><p>Bilibili：爆米花胡了</p><ul><li>这个 up 主做了很多 Rust 过程宏的视频教程。</li></ul></li><li><p>Bilibili：喜欢历史的程序君</p><ul><li>陈天在极客时间开了门 Rust 的课，同时也在持续输出一些 Rust 视频教程。</li></ul></li><li><p>KAIST CS431: Concurrent Programming</p><p>Github repo</p><ul><li>本课程面向对并行计算机系统的现代理论和实践感兴趣的计算机科学（或相关学科）的高年级本科生（或研究生）。</li></ul></li><li><p>Rust for the Polyglot Programmer</p><ul><li>面对有经验的程序员的 Rust 指南。</li></ul></li><li><p>High Assurance Rust: Developing Secure and Robust Software</p><ul><li>本书介绍了如何构建我们可以合理信任 (justifiably trust) 的高性能软件。这意味着有足够的数据来支持对我们代码的功能和安全性的信心。可信性是高安全性 (high assurance) 软件的一个标志。</li></ul></li><li><p>Warrenren/inside-rust-std-library</p><ul><li>本书主要对 Rust 的标准库代码进行分析。按照内存相关，基本数据类型，ops Trait, Option 类型，Result 类型，Iterator，切片类型，智能指针类型等逐一进行源码分析。</li></ul></li></ul><h2 id="有潜力的教程"><a class="markdownIt-Anchor" href="#有潜力的教程"></a> 有潜力的教程</h2><ul><li>Rust 101 Lecture Series<ul><li>与伦敦帝国理工学院计算社会系合作的 Rust 系列讲座</li><li><a href="https://www.reddit.com/r/rust/comments/smt5ef/rust_lecture_series_with_imperial_college_londons/">Rust Lecture Series with Imperial College London’s Department of Computing Society</a></li></ul></li><li><a href="https://lurklurk.org/effective-rust/intro.html">Effective Rust</a></li></ul><h2 id="练习实战的小项目"><a class="markdownIt-Anchor" href="#练习实战的小项目"></a> 练习实战的小项目</h2><ul><li><p><a href="https://www.zhihu.com/question/34665842">知乎 - 学习 Rust 适合写什么练手项目？</a></p></li><li><p><a href="https://exercism.org/tracks/rust/exercises">Exercism.io</a></p></li><li><p>course-rs/tokio-course</p><ul><li>《Tokio 异步编程》翻译并扩展了 tokio 官网的教程， 深入讲述了如何编写 Rust 高并发异步程序</li></ul></li><li><p>Github: cfsamson</p><ul><li>这哥们喜欢用 Rust 实现一些小例子如：Futures、greenthreads、async、epoll 等。</li></ul></li><li><p>Boshen/javascript-parser-in-rust</p><p>[2022.08]</p><ul><li>A book on writing a JavaScript Parser in Rust</li></ul></li><li><p>2022 年开源操作系统训练营</p><p>[2022.07]</p><ul><li>教程共分为八章，主要展示如何从零开始，用 Rust 语言写一个基于 RISC-V 架构的类 Unix 内核。</li></ul></li><li><p>Writing a container in Rust</p><p>[2022.05]</p><ul><li>用 Rust 写容器。</li></ul></li><li><p>Lisp interpreter in Rust</p><p>[2022.05]</p><ul><li><a href="https://github.com/vishpat/lisp-rs">lisp-rs</a> 项目用 Rust 实现了一个解释器，用于 Scheme 的一个小子集，即 Lisp 方言。</li></ul></li><li><p>Implementing a size-bounded LRU cache with expiring entries for my DNS server (in Rust)</p><p>[2022.03]</p><ul><li>使用 Rust 实现一个有大小限制可过期的 LRU 缓存。</li></ul></li><li><p>Implementing and Optimizing a Wordle Solver in Rust</p><p>[2022.03]</p><ul><li>Jon Gjengset 的六小时一镜到底视频流教程，这次是实现一个 Wordle 求解器。</li></ul></li><li><p><a href="https://www.youtube.com/playlist?list=PLkpGh2gaaueyzEAn07jf44LdscDeWRyzy">Writing a Programming Language (in Rust)</a> [2022.02 updating]</p></li><li><p><a href="https://fosdem.org/2022/schedule/event/misc_ntfs_rust/">Implementing the NTFS filesystem in Rust</a> [2022.02]</p></li><li><p>Rust Latam: procedural macros workshop</p><p>[2022.01 updating]</p><ul><li>实战学习写 Rust 过程宏。</li></ul></li><li><p>Rust Runtime 设计与实现</p><p>[2021.12]</p><ul><li>系列文章主要介绍如何设计和实现一个基于 io-uring 的 Thread-per-core 模型的 Runtime。</li></ul></li><li><p>Building a GUI app in Rust</p><p>Building a web app in Rust</p><p>[2021.10]</p><ul><li>作者用 egui 库去实现了 newsapi 的客户端和网页端（WebAssembly）。</li></ul></li><li><p><a href="https://frank-king.github.io/rustblog-zh/2021-01-proc-macro/00.html">Rust 过程宏入门</a></p></li><li><p>(Risp (in (Rust) (Lisp)))</p><p>[2021.07]</p><ul><li>Rust 实现 Lisp 解释器</li></ul></li><li><p>Learning to Fly: Let’s simulate evolution in Rust! (pt 1)</p><p>[2021.01]</p><ul><li>利用神经网络和遗传算法创建一个进化模拟，并编译应用程序到 WebAssembly</li></ul></li><li><p>Building a Pixel Editor in Rust &amp; WebAssembly (and Javascript)</p><p>[2020.08]</p><ul><li>作者用 Rust 和 WebAssembly 做了个网页端的简陋版像素画板。</li></ul></li><li><p>Writing NES Emulator in Rust</p><p>[2020.08]</p><ul><li>Rust 实现 NES 模拟器，不过最后一章到现在还是 todo。</li></ul></li><li><p><a href="https://github.com/EmilHernvall/dnsguide/blob/master/README.md">Building a DNS server in Rust</a> [2020.06]</p></li><li><p>pingCAP/talent-plan</p><p>[2020.05] Rust 网络编程</p><ul><li><a href="https://github.com/pingcap/talent-plan/blob/master/courses/rust/README.md">TP 201: Practical Networked Applications in Rust</a></li><li><a href="https://github.com/pingcap/talent-plan/blob/master/courses/dss/README.md">TP 202: Distributed Systems in Rust</a></li></ul></li><li><p><a href="https://os.phil-opp.com/">Writing an OS in Rust</a> <a href="https://os.phil-opp.com/zh-CN/">部分中文版</a> [2020.05]</p></li><li><p><a href="https://picklenerd.github.io/pngme_book/">PNGme: An Intermediate Rust Project</a> [2019.06]</p></li><li><p>Implementing TCP</p><p>[2019.05]</p><ul><li>强烈推荐！Jon Gjengset 通过 Linux TUN/TAP 来实现 TCP 协议。三个视频加起来共 16 小时。</li><li>这个 up 主视频风格独特，内容有深度，录像不剪辑，每集时间巨长，好处就是可以了解一个完整项目的开发过程和解决问题的思路。</li></ul></li><li><p><a href="https://bodil.lol/parser-combinators/">Learning Parser Combinators With Rust</a> [2019.04]</p></li><li><p><a href="https://www.joshmcguigan.com/blog/build-your-own-shell-rust/">Build Your Own Shell using Rust</a> [2018.11]</p></li><li><p><a href="https://blog.subnetzero.io/post/building-language-vm-part-00/">So You Want to Build a Language VM</a> [2018.07]</p></li></ul><h2 id="游戏开发相关"><a class="markdownIt-Anchor" href="#游戏开发相关"></a> 游戏开发相关</h2><ul><li><p><a href="https://www.zhihu.com/question/511998329/answer/2314160111">有哪些值得推荐的 Rust 游戏引擎或图形渲染库？</a></p></li><li><p><a href="https://gamedev.rs/">Rust GameDev WG</a></p></li><li><p>Vulkan Tutorial(Rust)</p><ul><li>这老哥给自己的 Vulkan Rust 绑定 <a href="https://github.com/KyleMayes/vulkanalia">vulkanalia</a> 参考 <a href="https://vulkan-tutorial.com/">Vulkan Tutorial</a> 写的教程。</li><li>我们也可以用 <a href="https://github.com/ash-rs/ash">ash</a> 来参考着写，两个 Vulkan binding crate 语法很像。</li></ul></li><li><p>The Ray Tracer Challenge</p><p>[2022.02 updating]</p><ul><li>这老哥用 Rust 从零写一个 Raytracer，并把 live coding 的过程也录制上传在<a href="https://www.youtube.com/playlist?list=PLy68GuC77sUTyOUvDhVboQoOlHoa4XrSO">系列视频链接</a></li></ul></li><li><p>Vulkan with Rust by example</p><ul><li>又是用 Rust 和 <a href="https://github.com/ash-rs/ash">ash</a> crate 来写 Vulkan 的一系列博文。</li></ul></li><li><p>Ashen Aetna</p><p>[2022.01 updating]</p><ul><li>作者兴趣使然用 Rust 和 <a href="https://github.com/ash-rs/ash">ash</a> crate 来学习图形学的教程。</li><li><a href="https://github.com/MaikKlein/ash">ash</a> 是跨平台图形接口 Vulkan 的 Rust 绑定。</li></ul></li><li><p>Unofficial Bevy Cheat Book</p><ul><li>Rust 游戏引擎 Bevy 的书。</li><li>中文版：<a href="https://yiviv.com/bevy-cheatbook/introduction.html">Bevy 游戏引擎开发指南</a></li></ul></li><li><p>Learn Wgpu</p><ul><li><a href="https://jinleili.github.io/learn-wgpu-zh/">中文版</a></li><li><a href="https://github.com/gfx-rs/wgpu">Wgpu</a> 是 <a href="https://gpuweb.github.io/gpuweb/">WebGPU API</a> 规范的一个 Rust 实现。</li><li>WebGPU 是由 GPU for the Web Community Group 发布的一个规范。它的目的是允许网络代码以安全和可靠的方式访问 GPU 功能。</li><li>它通过模仿 Vulkan API，并将其转换为主机硬件使用的任何 API（DirectX、Metal、Vulkan）来实现。</li><li>很多 Rust 游戏引擎都基于这一层图形 HAL。</li></ul></li><li><p><a href="https://ianjk.com/game-engine-in-rust/">Tutorial: Writing a Tiny Rust Game Engine for Web</a> [2022.01]</p></li><li><p><a href="https://tomassedovic.github.io/roguelike-tutorial/">Roguelike Tutorial in Rust + tcod</a> [2020.04]</p></li><li><p><a href="https://a5huynh.github.io/posts/2018/adventures-in-rust/">Adventures in Rust: A Basic 2D Game</a> [2018.02]</p></li></ul><h2 id="其他领域相关"><a class="markdownIt-Anchor" href="#其他领域相关"></a> 其他领域相关</h2><ul><li><a href="https://rust-cli.github.io/book/index.html">The CLI Book</a></li><li><a href="https://rustwasm.github.io/docs/book/">The WebAssembly Book</a></li><li><a href="https://doc.rust-lang.org/stable/embedded-book/">The Embedded Book</a></li><li><a href="https://cs140e.sergio.bz/">An Experimental Course on Operating Systems</a></li><li><a href="https://www.lpalmieri.com/posts/2020-05-24-zero-to-production-0-foreword/">Zero to Production in Rust (Building Backend Services)</a></li></ul><h2 id="rust-动态"><a class="markdownIt-Anchor" href="#rust-动态"></a> Rust 动态</h2><ul><li>This week in Rust Newsletter<ul><li>每周更新一次，把最新的 Rust 资源推到你的邮箱，这是跟踪 Rust 最新技术与事件的好方法。</li></ul></li><li>Discord<ul><li><a href="https://discord.gg/rust-lang-community">Official Rust Community Server</a></li><li><a href="https://discord.gg/rust-lang">Official Rust Server</a></li></ul></li><li>Telegram<ul><li><a href="https://t.me/rust_zh">Rust 众</a></li></ul></li><li>飞书<ul><li><a href="https://github.com/ZhangHanDong/rust-code-reading-club/issues/1">Rust 中文社群</a></li></ul></li><li><a href="https://www.reddit.com/r/rust/">The Rust Sub Reddit</a></li><li><a href="https://rustmagazine.github.io/rust_magazine_2021/index.html">Rust 语言开源杂志（2021）月刊</a></li><li><a href="https://rustmagazine.github.io/rust_magazine_2022/index.html">Rust 语言开源杂志（2022）季刊</a></li></ul><h2 id="各种汇总awesome-系列"><a class="markdownIt-Anchor" href="#各种汇总awesome-系列"></a> 各种汇总（Awesome 系列）</h2><ul><li>Awesome Rust [A curated list of Rust code and resources]<ul><li>针对 Rust 语言的 awesome lists，这里面汇集了各种各样的 Rust 库和资源，去参与或学习开源项目是当你入门后最好的进阶方法。</li></ul></li><li>rust-learning<ul><li>一个由社区维护的关于学习 Rust 的资源的汇总。</li></ul></li><li>EthanYuan/Rust-Study-Resource<ul><li>又是一个关于学习 Rust 的资源的汇总。</li></ul></li><li>The Little Book of Rust Books<ul><li>Rust 相关书籍的汇总。</li></ul></li><li>sger/RustBooks<ul><li>Rust 相关书籍的汇总。</li></ul></li><li>sunface/fancy-rust<ul><li>Rust 酷库推荐。使用我们精心挑选的开源代码，让你的 Rust 项目 Fancy 起来！</li></ul></li><li>EvanLi/Github-Ranking<ul><li>Github 中 Rust 库星星排名的 Top 100，每日刷新。</li></ul></li><li>35 Rust Learning Resources Every Beginner Should Know in 2022<ul><li>一篇推荐新手资源的文章</li></ul></li></ul><h2 id="podcast"><a class="markdownIt-Anchor" href="#podcast"></a> Podcast</h2><ul><li><a href="https://rustacean-station.org/">Rustacean Station Podcast</a></li><li>RustTalk<ul><li>主播：写代码的西瓜</li><li><a href="https://rustcc.cn/">Rust 语言中文社区</a> 是一个相比干货分享的地方，偏文字，RustTalk 更侧重 “湿货”，不仅仅会介绍到 Rust 的设计理念，更多的回去挖掘 Rust 背后的奇人轶事。</li></ul></li></ul><h2 id="博客"><a class="markdownIt-Anchor" href="#博客"></a> 博客</h2><ul><li><a href="https://llever.com/">https://llever.com/</a><ul><li>包含很多 Rust 周报及相关博文的翻译，不过现在好像不更新了。</li></ul></li><li>芽之家<ul><li>同样是包含很多 Rust 周报及相关博文的翻译，同样好像不更新了😓</li></ul></li></ul><h2 id="博客-rss"><a class="markdownIt-Anchor" href="#博客-rss"></a> 博客 RSS</h2><table><thead><tr><th>名称</th><th>订阅链接</th></tr></thead><tbody><tr><td><a href="https://this-week-in-rust.org/">This Week in Rust</a></td><td><a href="https://this-week-in-rust.org/atom.xml">https://this-week-in-rust.org/atom.xml</a></td></tr><tr><td><a href="https://readrust.net/">Read Rust</a></td><td><a href="https://readrust.net/all/feed.rss">https://readrust.net/all/feed.rss</a></td></tr><tr><td><a href="https://www.reddit.com/r/rust/hot/">Rust Reddit Hot</a></td><td><a href="https://reddit.0qz.fun/r/rust/hot.json">https://reddit.0qz.fun/r/rust/hot.json</a></td></tr><tr><td><a href="https://rust.cc/">Rust.cc</a></td><td><a href="https://rustcc.cn/rss">https://rustcc.cn/rss</a></td></tr><tr><td><a href="https://rust.libhunt.com/newsletter">Awesome Rust Weekly</a></td><td><a href="https://rust.libhunt.com/newsletter/feed">https://rust.libhunt.com/newsletter/feed</a></td></tr><tr><td><a href="https://rustmagazine.github.io/">Rust 精选</a></td><td><a href="https://rustmagazine.github.io/rust_magazine_2021/rss.xml">https://rustmagazine.github.io/rust_magazine_2021/rss.xml</a></td></tr><tr><td><a href="https://medium.com/tag/rust/latest">Rust on Medium</a></td><td><a href="https://medium.com/feed/tag/rust">https://medium.com/feed/tag/rust</a></td></tr><tr><td><a href="https://gamedev.rs/">Rust GameDev WG</a></td><td><a href="https://gamedev.rs/rss.xml">https://gamedev.rs/rss.xml</a></td></tr><tr><td><a href="https://www.zhihu.com/column/time-and-spirit-hut">知乎专栏 - 时光与精神小屋</a></td><td><a href="https://rsshub.app/zhihu/zhuanlan/time-and-spirit-hut">https://rsshub.app/zhihu/zhuanlan/time-and-spirit-hut</a></td></tr><tr><td><a href="https://fasterthanli.me/">酷熊 Amos fasterthanli</a></td><td><a href="https://fasterthanli.me/index.xml">https://fasterthanli.me/index.xml</a></td></tr><tr><td><a href="https://www.ncameron.org/blog/">pretzelhammer/rust-blog</a></td><td><a href="https://www.ncameron.org/blog/rss/">https://www.ncameron.org/blog/rss/</a></td></tr><tr><td><a href="https://github.com/pretzelhammer/rust-blog">Nick Cameron</a></td><td><a href="https://github.com/pretzelhammer/rust-blog/releases.atom">https://github.com/pretzelhammer/rust-blog/releases.atom</a></td></tr><tr><td><a href="https://folyd.com/blog/">FOLYD</a></td><td><a href="https://folyd.com/blog/feed.xml">https://folyd.com/blog/feed.xml</a></td></tr><tr><td><a href="https://www.skyzh.dev/posts/">Alex Chi</a></td><td><a href="https://www.skyzh.dev/posts/index.xml">https://www.skyzh.dev/posts/index.xml</a></td></tr></tbody></table><h2 id="作为参考的学习路线"><a class="markdownIt-Anchor" href="#作为参考的学习路线"></a> 作为参考的学习路线</h2><h3 id="路线-1"><a class="markdownIt-Anchor" href="#路线-1"></a> 路线 1</h3><p><a href="https://zhuanlan.zhihu.com/p/146472398">Rust Study RoadMap</a></p><p>作者在文中提供了两种学习路线。</p><h3 id="路线-2"><a class="markdownIt-Anchor" href="#路线-2"></a> 路线 2</h3><ol><li>通读 <a href="http://rustbyexample.com/">Rust by Example</a>，把其中的例子都自己运行一遍，特别是对其中指出的错误用法也调试一遍。</li><li>通读 <a href="http://rust-lang.github.io/book/">The Rust Programming Language</a>，在进行了第一步后，已经基本对 Rust 的常用概念有所了解了，这个时候再读这本官方教程，进一步理解某些细节。</li><li>行了，到这一步后你就可以尝试做一个项目了，然后在做项目的过程中你一定会需要各种各样的库，请到 <a href="https://crates.io/">Crates</a> 上搜索，寻找适合你需求的 crate，了解它们的用法，必要时查阅它们的源码。一开始写实际代码时，你肯定会很痛苦，Rust 编译器一定会不断地折磨你，这个时候不要放弃，返回去再看 <a href="http://rustbyexample.com/">Rust by Example</a> 和 <a href="http://rust-lang.github.io/book/">The Rust Programming Language</a>，然后终有通过编译的那一刻，恭喜你，入坑了！</li></ol><h2 id="常用站点"><a class="markdownIt-Anchor" href="#常用站点"></a> 常用站点</h2><ul><li>Crates<ul><li>Rust 类库</li></ul></li><li><a href="http://Docs.rs">Docs.rs</a><ul><li>Rust 类库文档</li></ul></li><li>Are we game yet<ul><li>关于游戏开发</li></ul></li><li>Are we web yet<ul><li>关于 Web 开发</li></ul></li><li>Are we (I)DE yet<ul><li>关于 IDE</li></ul></li><li>rust-library-i18n<ul><li>Rust 中文文档，可以在 IDE 中使用</li></ul></li></ul><h2 id="其他资料"><a class="markdownIt-Anchor" href="#其他资料"></a> 其他资料</h2><ul><li><a href="https://www.reddit.com/r/rust/comments/s3z7ek/the_10_books_that_helped_me_as_a_hobbyist_on_my/">The 10 books that helped me, as a hobbyist, on my journey to learn Rust to re-code a Django application</a></li><li>Rustnote<ul><li>某个网友的个人笔记</li></ul></li></ul><h2 id="本文参考"><a class="markdownIt-Anchor" href="#本文参考"></a> 本文参考</h2><ul><li><a href="https://rust-lang-cn.org/article/23">https://rust-lang-cn.org/article/23</a></li><li><a href="https://letsgetrusty.kartra.com/page/XDk8">https://letsgetrusty.kartra.com/page/XDk8</a></li><li><a href="https://rustcc.cn/">https://rustcc.cn/</a></li></ul><p><strong>本文转载转载自萤火之森</strong></p>]]></content>
      
      
      <categories>
          
          <category> print*,&quot;hello world!!!&quot; </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新坑预定</title>
      <link href="/posts/385296e3/"/>
      <url>/posts/385296e3/</url>
      
        <content type="html"><![CDATA[<p>占位ing</p>]]></content>
      
      
      <categories>
          
          <category> 摸鱼大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待定捏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>买耳机送老婆:水月雨ssp</title>
      <link href="/posts/9e073fd6/"/>
      <url>/posts/9e073fd6/</url>
      
        <content type="html"><![CDATA[<h3 id="入门级hifi水月雨ssp上手指南"><a class="markdownIt-Anchor" href="#入门级hifi水月雨ssp上手指南"></a> 入门级HIFI：水月雨ssp上手指南（？</h3><p>水月雨一向以买老婆送耳机做为卖点之一，不过我这款便宜的ssp是不送立绘老婆的，毕竟他便宜嘛，之前朋友送过我我一条kxxs，这个是送水月娘的，便宜的ssp是没有老婆的各位。怎么？穷鬼不配拥有老婆（手动狗头），买这条耳机的初衷嘛，是在我的msrq被徒手掰断后，没错是徒手掰断。打算暂时选一款用来过渡的耳机，要求嘛？能以最便宜的加个能得到不错品质的耳机就再好不过了，不过在下实在没有勇气去尝试原道耳机（效果触发悔恨之泪），在打算上银船的情况下在官网恰好就逛到了ssp，做为ssr升级版，价格大概是银船的两倍=199.不知怎么回事就入手了（触发悔恨之类），可能是因为它盒子好看！！！！，盒子大概长下面这样。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/pivcgame/img/ssp.jpg" alt="" /></p><p>关于听感表现嘛，个人感觉也就中规中矩，也就符合200这个价位耳机应该有的表现，并没有让我感到有任何超出200元耳机表现的地方，它的表现也就符合200元耳机最基本的要求，在前端设备是三灵3Mx的实际听感个人感觉高频真的超级刺耳，中频稍微给人的感觉会厚实一些，对于很多女声的表现上是不差的，啊，我这里听的是Aimer的六等星的夜。老早的歌了，Aimer天下第一。对于低频来说下潜比较好，听起来比较圆润，低频听起来的量感会比较足，官方也特意标注了女毒，不过啊女毒不至于，不过对于大多数女声的处理都挺不错的。嗯听一些ACG的是问题不大的。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/pivcgame/img/%E6%B0%B4%E6%9C%88%E5%A8%98.jpg" alt="" /></p><p>花200软妹币买到了价值200软妹币的东西，不能说不亏，只能说血本无归。对于共产主义战士来说白嫖才是共产主义的终极目标。呜呜呜</p><h4 id="今日的胜利水月娘的单方面胜利"><a class="markdownIt-Anchor" href="#今日的胜利水月娘的单方面胜利"></a> 今日的胜利水月娘的单方面胜利</h4>]]></content>
      
      
      <categories>
          
          <category> 摸鱼大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 含泪入手 </tag>
            
            <tag> 水月雨 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京都读后感</title>
      <link href="/posts/bad5c14e/"/>
      <url>/posts/bad5c14e/</url>
      
        <content type="html"><![CDATA[<p>川端康成的作品大概看的七七八八</p><p>差不多快看完了吧</p><p>雪国，千只鹤，古都这三本我是一起买的</p><p>说来惭愧雪国和千只鹤我早早就看完了</p><p>但是这本不到十万字的古都就被我将时间延长线将近拉长了一年</p><p>就是</p><p>各种各种事</p><p>即使闲置下来也没有想起这本大概只草草翻了几页的书</p><p>当目光偶然扫到它的时候</p><p>它已经被其他书挤到角落里了</p><p>当我再次打开它时候</p><p>很多东西不知道怎么说又无从说起</p><p>因为我其实并不明白也形容不出这是怎样一种感受</p><p>就像古都里所描绘的许多</p><p>花朵稀稀疏疏地飘落在樱花树下，有的还漂浮在池子的水面上。不过，大概也只有七八瓣的光景……</p><p>关于千重子和苗子我也有很多很多话想说</p><p>好吧至少又可以水一篇博客了</p><p>在最后的最后这本书的末尾</p><p>千重子抓住红格子门，目送苗子远去。苗子始终没有回头。细小的雪花有些飘落在千重子的前发上，很快就消融了。大街还在沉睡中。</p><p>我想</p><p>可能京都再也找不到比这更好的宣传广告了</p><p><img src="https://pic.youmingsama.fun/kksk/%E4%BA%AC%E9%83%BD.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拆机翻车指南(</title>
      <link href="/posts/2ad933a0/"/>
      <url>/posts/2ad933a0/</url>
      
        <content type="html"><![CDATA[<h3 id="我竟然翻车了"><a class="markdownIt-Anchor" href="#我竟然翻车了"></a> 我竟然翻车了！！！！！</h3><p>不得不感慨最近的天气可是真热阿，一摸散热精灵，吼，不愧是您阿散热精灵，哎呀，一边凉快去把你，说着我就拆开令人设计合力贴心的草工艺贴合后盖，说着清理大师翻出了它的清灰工具，艰难的打开坚硬的后盖准备来一次清理。</p><blockquote><p>ps:三个月前刚显得慌，不知道抽什么分换了cpu风扇和显卡风扇，按理说说三个月后的今天也应该是洁净如新，但是打开后盖之后不得不感慨，不愧是您阿吸灰精灵</p></blockquote><p>但是就向往昔无数次拆机一样，略显枯燥的熟悉的操作手法，呐动作就想像一个大师一样，最后合上后盖，一气呵成。当我觉得它应该理所当然的成功点亮时，它竟然开机自检的时候爆出了风扇90B的错误，经过仔细排查是cpu风扇它不转了！！！！！</p><p>嗯难道是风扇没插，打开后盖，检查没问题阿，启动开机报错，打开后盖，报错。打开后盖，报错。打开后盖，报错。打开后盖，报错。</p><p><img src="https://pic.youmingsama.fun/kksk/%E7%BB%B7%E4%B8%8D%E4%BD%8F%E5%95%A6.jpg" alt="" /></p><p>我武断的认为是风扇坏了，火速拿到售后处，扇，懂。经验老熟的师傅打开看了以下。嗯是要换风扇。但是没有现货，要过几天来拿。师傅下意识的问了以下插口是是不是三针的，我：对阿。师傅又象征性的看了以下，嗯那就是要换风扇了呢。我拿着插头若有所思，不知道在不在听师傅的话。阿不对是插头是4针的，我急忙看了以下接口啊有一个针被我同歪了，师傅给我拿了个镊子，让我轻轻的拨回来，我尝试了几下啊不行太难了，还是师傅您来您专业，师傅微微一笑，已经让人感受到了强者的气势，就想在维修和检查火箭最后发射前的例行检查，师傅的眼里有光。成了！！！</p><p>果然在在成功的拨回后，这该死的cpu风扇它转了。</p><h3 id="当然"><a class="markdownIt-Anchor" href="#当然"></a> 当然</h3><h3 id="最后一分钱没花"><a class="markdownIt-Anchor" href="#最后一分钱没花"></a> 最后一分钱没花！！！</h3><p><img src="https://pic.youmingsama.fun/kksk/%E6%8B%BF%E6%9D%A5.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 摸鱼大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻车 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义化谷歌主题</title>
      <link href="/posts/63627b7c/"/>
      <url>/posts/63627b7c/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义化谷歌主题"><a class="markdownIt-Anchor" href="#自定义化谷歌主题"></a> 自定义化谷歌主题</h2><p>不管什么先来一句谷歌大法好坑定不会有问题，，天天对浏览器总有一天会审美疲劳，嗯对就像我，对这使用了很长的谷歌主题陷入了深深的沉思，有时候阿人心情不好的时候总想换个主题（？，比如说我，不过翻遍了谷歌商店都没有找到令我中意的主题，对于专业的强迫症人士来说一个让他看起来感到别扭的主题对它来说简直是一种另类的折磨，于是少年开始了自定义主题之旅。</p><p><img src="https://pic.youmingsama.fun/kksk/%E9%A5%AD%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%A5%BD.jpg" alt="" /></p><h3 id="那么应该如何开始呢"><a class="markdownIt-Anchor" href="#那么应该如何开始呢"></a> 那么应该如何开始呢</h3><p>那当然是<a href="https://docs.google.com/">谷歌的文档阿</a>，果不其然很快就能找到，介绍的超级详细，感觉完全不需要说一句废话，任何脱离官方文档的教程都是耍流氓，</p><blockquote><p><a href="https://docs.google.com/document/d/1jt9vdUY9O5IMm6Zoi2Kz0LWFfFZpvP69qjy6PoGsEoA/edit">Chrome Theme Reference</a></p></blockquote><p>既然知道了怎么制作主题，那就直接开始吧，当然更复杂的操作请自行摸索</p><h4 id="第一步"><a class="markdownIt-Anchor" href="#第一步"></a> 第一步</h4><p>新建文件夹，文件夹内定义<code>mainifest.json</code></p><p>以我的主题为例内容是这样的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;youmingsama&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;夏日&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;theme&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;theme_frame&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images\/theme_frame.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;theme_toolbar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images\/theme_toolbar.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;theme_tab_background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images\/theme_tab_background.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;theme_ntp_background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images\/theme_ntp_background.png&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;colors&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;frame&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="number">54</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">48</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">47</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;toolbar&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="number">205</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">210</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">204</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tab_text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="number">54</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">48</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">47</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tab_background_text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="number">205</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">210</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">204</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;bookmark_text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="number">54</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">48</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">47</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ntp_background&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="number">255</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">255</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">255</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ntp_text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">50</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ntp_link&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">55</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">116</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;button_background&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">0</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tints&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;buttons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="number">0.02</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">0.07</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">0.2</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ntp_background_alignment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bottom&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ntp_background_repeat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;repeat&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="第二步"><a class="markdownIt-Anchor" href="#第二步"></a> 第二步</h4><p>创建文件夹<code>images</code></p><p>创建使用的图片，各个模块官方文档力都有介绍，这里就不在解释啦</p><h4 id="第三部"><a class="markdownIt-Anchor" href="#第三部"></a> 第三部</h4><p>打开谷歌开发这模式。在不济直接拖入就好啦，当然这里建议选择直接打包成可执行文件crx就好啦，如果直接拖拽的画可能会产生问题，如果拖拽的源文件的相对位置发生相对改变的时候，主题会加载失败，所以建议直接打包成可执行文件</p><p><img src="https://pic.youmingsama.fun/kksk/%E8%B0%B7%E6%AD%8C%E5%BC%80%E5%8F%91%E8%80%85.png" alt="" /></p><h4 id="可能会产生bug"><a class="markdownIt-Anchor" href="#可能会产生bug"></a> 可能会产生bug</h4><p>因为没有对屏幕进行适配，在不同的屏幕下图片可能并不兼容，我这边是多屏，在我的竖屏上就出现了非常尴尬的画面，因为没有做适配，顶部会有一大段空白区域，查阅文档，也只有<strong>ntp_background_repeat</strong>这一个处理方法</p><blockquote><p><strong>ntp_background_repeat</strong>&quot;</p><p>ntp_background_repeat&quot; : “no-repeat”<br />This property element is used to control the repetition of the image element <a href="https://docs.google.com/document/d/1jt9vdUY9O5IMm6Zoi2Kz0LWFfFZpvP69qjy6PoGsEoA/edit#bookmark=id.b687ca9eaaa1">theme_ntp_background.</a>It is specified as…<br />“ntp_background_repeat” : &quot;VALUE&quot;In the place of VALUE you can enter either “repeat”, “no-repeat”, “repeat-x” or “repeat-y”. Depending upon the image you’ve created as the background you can choose to repeat the image along x-axis or y-axis or turn repeat off, since repeat is on by default!</p></blockquote><p>于是我这边忘了取出上面一大部分空白区域，非常不情愿的用了 <code>ntp_background_repeat&quot;: &quot;repeat</code>,来遮盖住了尴尬的空白区域，但是不可避免的出现了图片重复。此乃下策！！！！如果有更好的解决方案请私信我。欧内该！！！</p><p><img src="https://pic.youmingsama.fun/kksk/%E5%86%A5%E6%83%B3.jpg" alt="" /></p><h3 id="效果图"><a class="markdownIt-Anchor" href="#效果图"></a> 效果图</h3><p><img src="https://pic.youmingsama.fun/kksk/theme.png" alt="" /></p><p>以及并不完美的竖屏图</p><p><img src="https://pic.youmingsama.fun/kksk/theme_s.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 摸鱼大师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集真的是太棒了</title>
      <link href="/posts/efa11b01/"/>
      <url>/posts/efa11b01/</url>
      
        <content type="html"><![CDATA[<h2 id="并查集真的是太棒了"><a class="markdownIt-Anchor" href="#并查集真的是太棒了"></a> 并查集真的是太棒了</h2><p>这个月的leetcode简直就是查并集月啊，打卡没错一题，查并集？查并集？又是查并集！不会！不会！又不会！看题解！好耶我又会了？做题，我是废物。</p><p>之前在油管上看Robert Sedgewick巨，佬的视频，我觉得我行了（，但好像重来没有系统的整理过查并集和相关的知识。</p><p>在开始之前需要先了解一个概念</p><h3 id="1-动态连通性"><a class="markdownIt-Anchor" href="#1-动态连通性"></a> 1. 动态连通性</h3><p>并查集：并：合并，查：查找，集：集合。如果有下面的这样一个问题，问题的输入是一列整数对，其中每个类型都表示某种类型的对象，假如阿有一对整数p,q，就可以理解为p，q是相连的，我们假设<code>相连</code>是一种等价关系，就意味这有以下关系</p><ul><li>自反性：p和p是相连的</li><li>对称性：如果p和q是相连的那么q和p也是相连的</li><li>传递性：如果p和q是相连的而且q和r是相连的那么p和也是相连的</li></ul><p>等价关系能够把对象分为多个等价类，且两个对象相连时他们才属于同一个等价关系</p><p>目标：所以我们应该过滤掉没有意义的帧数对，也就是说如果所有的整数对都不能证明p和q是相连的，那么我们就把它输出，相反如果证明了是相连的那我们应该把他们忽略掉并继续处理下面的整数对。为了达到以上的效果我们需要用一个数据结构来保存这些整数对的信息，并来判断他们某一对象是否相连，于是我们把这个问题的通俗的叫做<strong>动态连通性问题</strong></p><p>比如我们所熟知的网络，每时每刻就可能要处理数百万对象和数十亿次连接，所以我们需要一个算法帮我们快速的处理类似的问题。所以当我们处理两个可以连接的分量，那我们就可以把他加入到一个集合当中；</p><h3 id="2来设计算法思想"><a class="markdownIt-Anchor" href="#2来设计算法思想"></a> 2.来设计算法思想</h3><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">UF</span><span class="params">(N)</span><span class="comment">//初始化函数</span></span></span><br><span class="line"><span class="function">&gt;<span class="type">void</span> <span class="title">unino</span><span class="params">(p,q)</span><span class="comment">//添加连接</span></span></span><br><span class="line"><span class="function">&gt;<span class="type">int</span> <span class="title">find</span><span class="params">(q)</span><span class="comment">//查找所在的分量标识符</span></span></span><br><span class="line"><span class="function">&gt;<span class="type">bool</span> <span class="title">connected</span><span class="params">(p,q)</span><span class="comment">//判断是否存在于一个分量中</span></span></span><br><span class="line"><span class="function">&gt;<span class="type">int</span> <span class="title">count</span><span class="params">()</span><span class="comment">//计算连通分量的个数</span></span></span><br></pre></td></tr></table></figure><p>于是我们就需要定义一种数据结果实现以上的思想因此我们需要</p><ul><li><p>定义一种数据结构表示已知连接</p></li><li><p>实现以上方法</p></li></ul><p>数据结构的性质将直接影响到算法的效率，我们可以用</p><blockquote><ul><li>触点为索引id[]做基本的数据结构来表示所有的分量</li><li>使用某个触点的名称做为分量的标识符，也因此每个分量都是由他的触点之一表示的</li><li>一开始每个触点都为一个独立的分量，所以我们把分量初始化为i</li><li>用find方法来判断它属于那个分量当中</li><li>coonected用来判断find(p)==find(q)，返回布尔值</li><li>unino用来连接连个这两个分量</li></ul></blockquote></blockquote><h3 id="3先写个demo"><a class="markdownIt-Anchor" href="#3先写个demo"></a> 3.先写个demo</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by youmingsama on 2021/4/22.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bits/stdc++.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> id[<span class="number">10000</span>];</span><br><span class="line"><span class="type">int</span> count1=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> N=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UF</span><span class="params">(<span class="type">int</span> id[],<span class="type">int</span> *count,<span class="type">int</span> N)</span></span>&#123;</span><br><span class="line">    *count=N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        id[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (p!=id[p])&#123;</span><br><span class="line">        p=id[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">connected</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(p)==<span class="built_in">find</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">union1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> pRoot=<span class="built_in">find</span>(p);</span><br><span class="line">    <span class="type">int</span> qRoot=<span class="built_in">find</span>(q);</span><br><span class="line">    <span class="keyword">if</span> (pRoot==qRoot)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    id[pRoot]=qRoot;</span><br><span class="line">    count1--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">8</span>],b[<span class="number">8</span>];</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">6</span>;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    <span class="built_in">UF</span>(id,&amp;count1,N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;a[i]&gt;&gt;b[i];</span><br><span class="line">        <span class="type">int</span> p=a[i];</span><br><span class="line">        <span class="type">int</span> q=b[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">connected</span>(p,q)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">union1</span>(p,q);</span><br><span class="line">        cout&lt;&lt;p&lt;&lt;<span class="string">&quot;--&gt;&quot;</span>&lt;&lt;q&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;count1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="关于不同的实现方法"><a class="markdownIt-Anchor" href="#关于不同的实现方法"></a> 关于不同的实现方法</h3><p>对算法的核心处理无异于是对find函数和union，其他的函数都大同小异对算法的效率影响不大，所以这里我们重点来看find方法和union算法的实现</p><h4 id="quick-find算法"><a class="markdownIt-Anchor" href="#quick-find算法"></a> quick-find算法</h4><p>一种实现方法是保证<code>id[p]==id[q]</code>,这则说明当前p和q是连通的是属于同一个分量，也就说连通分量重的所有触点的id[]必须是相同的，这就意味着<code>connected</code>只需要判断<code>id[p]==id[q]</code>就能判断是否属于同一个连通分量。</p><p>如果属于同一个连通分量我们就不需要做任何操作，如果不是属于同一个连通分量我们就需要做连接操作啦。union(p,q)把两个分量合二为一就意味着id[]的值必须是相等的，等于两方任何一方的值<code>(id[p] or id(q))。</code>为此我们需要遍历数组把其中一个集合的id[]，变成另外一个集合的id[]值。</p><p>嘛简单整理以下就是：</p><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">find</span>(p)&#123;</span><br><span class="line">&gt;<span class="keyword">return</span> id[p]</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="keyword">if</span> <span class="built_in">connected</span>(p,q)</span><br><span class="line">&gt;<span class="keyword">continue</span></span><br><span class="line">&gt;<span class="built_in">union</span>(p,q)&#123;</span><br><span class="line">&gt;<span class="type">int</span> pid=<span class="built_in">find</span>(p);</span><br><span class="line">&gt;<span class="type">int</span> pid=<span class="built_in">find</span>(q);</span><br><span class="line">&gt;<span class="keyword">if</span> pid==qid <span class="keyword">return</span>;</span><br><span class="line">&gt;<span class="keyword">for</span> i=<span class="number">0</span>,i&lt;id.length;i++&#123;</span><br><span class="line">  <span class="keyword">if</span> (id[i]==pid)&#123;</span><br><span class="line">      id[i]=qid;</span><br><span class="line">  &#125;</span><br><span class="line">  count--;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>在qiuck算法中，find操作显然是很快的，因为它只需要访问id一次，但是对于处理较大型的问题，每一次执行unino都要扫描一id数组 如果使用quick-find算法来解决动态连通性问题最后只得到了一个连通分量，那么至少要调用N-1次union，那么数组访问至少要访问(N-4)(N-1),显然平方级别的在我们处理非常大型的项目上是很难接受的，所以我们需要更快的算法。</p></blockquote><h4 id="quick-union算法"><a class="markdownIt-Anchor" href="#quick-union算法"></a> quick-union算法</h4>]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念3</title>
      <link href="/posts/2f9356bf/"/>
      <url>/posts/2f9356bf/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
            <tag> 不知道在讲啥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次的Cloudflare worker</title>
      <link href="/posts/ea3732f5/"/>
      <url>/posts/ea3732f5/</url>
      
        <content type="html"><![CDATA[<h2 id="cloudflare真好玩"><a class="markdownIt-Anchor" href="#cloudflare真好玩"></a> Cloudflare真好玩</h2><p>在nisama强烈的推荐下我怀着好奇的心态开始了cloudflare的疯狂踩坑，无非是这一个月挺多了nisama关于‘啊无服务器实在是太爽啦’，‘白嫖真爽啊’，‘嗯，白嫖下次还白嫖’，<strong>Cloudflare</strong>（<a href="https://zh.wikipedia.org/wiki/%E7%BA%BD%E7%BA%A6%E8%AF%81%E5%88%B8%E4%BA%A4%E6%98%93%E6%89%80">NYSE</a>：<a href="http://www.nyse.com/quote/XNYS:NET">NET</a>）是一家总部位于旧金山的美国跨国科技企业，以向客户提供基于<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">反向代理</a>的<a href="https://zh.wikipedia.org/wiki/%E5%85%A7%E5%AE%B9%E5%82%B3%E9%81%9E%E7%B6%B2%E8%B7%AF">内容分发网络</a>（Content Delivery Network, CDN）及分布式域名解析服务（Distributed Domain Name Server）为主要业务。利用 Cloudflare 全球<a href="https://zh.wikipedia.org/wiki/%E4%BB%BB%E6%92%AD">任播</a>网络，Cloudflare可以帮助受保护站点抵御包<a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A">拒绝服务攻击</a>等网络攻击，确保该网站长期在线，同时提升网站的性能、加载速度以改善访客体验。嗯cloudflare是最富盛名的cdn服务商，不过虽然它很香但抵不住它贵啊，cloudflare上很多体验良好的服务都是收费的，当然一提到cdn最优秀的服务商当然是cloudflare（？当然对于cloudflare上提供的免费cdn当然没有逃过可爱的勤劳的中国人民撸羊毛的机会，于是你会简单不管是网站，各种稀奇古怪的应用甚至是各种梯子都在用cloudflare做CDN，毕竟入口带宽也是有限的，这就导致在用网高峰期甚至是日常使用的响应速度不尽如人意，当然也是因为毕竟也是国外的节点啦，下图为我2021年3月8日的测试结果。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo_1/img2/ping.png" alt="ping 1.1.1.1" /></p><blockquote><p><strong>1.1.1.1</strong>是一款免费的域名解析服务，也就是域名服务器，由<a href="https://zh.wikipedia.org/wiki/CloudFlare">CloudFlare</a>与<a href="https://zh.wikipedia.org/wiki/%E4%BA%9A%E5%A4%AA%E4%BA%92%E8%81%94%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E4%B8%AD%E5%BF%83">APNIC</a>共同拥有与维护。该服务于2018年4月1日发表启用且被Cloudflare称为“互联网最快、以隐私优先的消费者端DNS服务”（the Internet’s fastest, privacy-first consumer DNS service）</p></blockquote><p>当然做为一个正经人我并没有怎么薅过cloudflare的羊毛，当然让我对cloudflare直呼真香的也并他们的cdn而是他们的Cloudflare Workers！！不过在疯狂踩坑之前有必要了解一下和Cloudflare Workers有关的无服务器计算</p><h3 id="关于这点我想cloudflare的文档提供了详细的解释"><a class="markdownIt-Anchor" href="#关于这点我想cloudflare的文档提供了详细的解释"></a> 关于这点我想cloudflare的文档提供了详细的解释</h3><p>无服务器计算是一种按需提供后端服务的方法。无服务器架构允许用户编写和部署代码，而不必担心底层基础设施。从无服务器提供商获得后端服务的公司将根据其计算量来付费，而不必保留和支付固定数量的带宽或服务器，因为该服务可自动扩展。请注意，尽管称为无服务器，但它仍使用了物理服务器，只是开发人员不需要考虑它们的存在。</p><p>在Web早期，任何想要构建Web应用程序的人都必须拥有运行服务器所需的物理硬件，这是一项繁琐而昂贵的工作。</p><p>之后是云，可以远程租用固定数量的服务器或一定数量的服务器空间。租用这些固定服务器空间单元的开发人员和公司通常会过度购买，以确保流量或活动的激增不会因为超过每月限额而中断其应用程序。这意味着通常支付的大部分服务器空间都浪费了。云供应商已经引入了自动扩展模型来解决该问题，但是即使是自动扩展，也可能因为恶意活动激增（例如 <a href="https://www.cloudflare.com/zh-cn/learning/ddos/what-is-a-ddos-attack">DDoS 攻击</a>）而产生非常昂贵的成本。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/tupianpian@master/img/benefits-of-serverless.svg" alt="" /></p><p>无服务器计算允许开发人员在灵活的“按需付费”的基础上购买后端服务，这意味着开发人员仅需为使用的服务付费。这就像从每月固定限额的手机数据套餐切换到只为实际使用的每个字节数据收费的套餐一样。</p><p>“无服务器”一词在某种程度上具有误导性，因为它仍然有服务器提供这些后端服务，但是所有服务器空间和基础设施问题都由提供商处理。无服务器意味着开发人员可以完全不用担心服务器。</p><h3 id="什么是后端服务前端和后端之间有什么区别"><a class="markdownIt-Anchor" href="#什么是后端服务前端和后端之间有什么区别"></a> 什么是后端服务？前端和后端之间有什么区别？</h3><p>应用程序开发通常分为两个领域：前端和后端。前端是用户看到并与之交互的应用程序部分，例如视觉设计。后端是用户看不到的部分。其中包括应用程序文件所在的服务器以及持久存储用户数据和业务逻辑的数据库。</p><p>![<img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/tupianpian@master/img/frontend-vs-backend.svg" alt="" /></p><p>例如，我们可以想象一个卖音乐会门票的网站。当用户在浏览器窗口中键入请求时，浏览器会将请求发送到后端服务器，后端服务器以网站数据作为响应。然后，用户将看到网站的前端，该前端将包括文本、图像和供用户填写的表单字段。然后，用户可以与前端上的表单字段之一进行交互，以搜索他们喜欢的音乐表演。当用户单击“提交”时，这将触发另一个对后端的请求。后端代码检查其数据库，以查看是否存在具有该名称的表演者，如果存在，则会反馈下次表演的时间以及有多少可售的票。然后，后端会将数据传递回前端，前端将以用户能理解的方式显示结果。同样，当用户创建一个帐户并输入财务信息以购买票时，前端与后端之间将发生另一次来回通信。</p><h3 id="无服务器计算可以提供什么样的后端服务"><a class="markdownIt-Anchor" href="#无服务器计算可以提供什么样的后端服务"></a> 无服务器计算可以提供什么样的后端服务？</h3><p>大多数无服务器提供商都为其客户提供数据库和存储服务，并且许多无服务器提供商还具有<a href="https://www.cloudflare.com/zh-cn/learning/serverless/glossary/function-as-a-service-faas">功能即服务（FaaS）</a>平台，例如 <a href="https://www.cloudflare.com/zh-cn/products/cloudflare-workers">Cloudflare Workers</a>。这些平台可以在不存储任何数据的情况下在边缘执行代码。</p><h3 id="无服务器计算的优势是什么"><a class="markdownIt-Anchor" href="#无服务器计算的优势是什么"></a> 无服务器计算的优势是什么？</h3><ul><li><strong>降低成本</strong> – 无服务器计算通常具有很高的成本效益，因为传统的后端服务（服务器分配）云提供商经常导致用户为未使用的空间或空闲的 CPU 时间付费。</li><li><strong>简化可扩展性</strong> – 使用无服务器架构的开发人员不必担心扩展其代码的策略。无服务器供应商可按需处理所有扩展。</li><li><strong>简化后端代码</strong> – 使用 FaaS，开发人员可以创建简单的功能，这些功能独立地执行单个目的，例如进行 API 调用。</li><li><strong>加快周转时间</strong> – 无服务器架构可以大大缩短产品上市时间。开发人员无需通过复杂的部署过程实施错误修复和新功能，而是逐个添加和修改代码。</li></ul><h3 id="cloudflare-workers-是什么"><a class="markdownIt-Anchor" href="#cloudflare-workers-是什么"></a> Cloudflare Workers 是什么？</h3><p>Cloudflare Workers 是一个平台，用于使无服务器功能尽可能接近最终用户运行。本质上，无服务器代码本身是“缓存”在网络上的，并在收到正确类型的请求时运行。Cloudflare Workers 是根据 service workers API 用 JavaScript 编写的，这意味着它们可以使用 service workers 提供的所有功能。它们利用 Chrome V8 引擎执行。Cloudflare Workers 代码托管在 Cloudflare 遍布全球的庞大数据中心网络中。</p><blockquote><p>Chrome V8，也称为“ V8”，是 Google 为编译、优化和执行 JavaScript 开发的 JavaScript 引擎。使用 V8 进行 JavaScript 代码执行，可大大减少 JavaScript workers 的启动时间，因此消除了大多数情况下的“冷启动”问题。V8 还进行了详细的安全漏洞分析，因此是安全运行 JavaScript 代码的理想选择。</p></blockquote><h3 id="什么是无服务器-javascript"><a class="markdownIt-Anchor" href="#什么是无服务器-javascript"></a> 什么是无服务器 JavaScript？</h3><p>无服务器 JavaScript 是包含全部或部分应用程序的 JavaScript 代码，仅在请求时运行，不在专有服务器上托管。它使开发人员能够构建在网络中运行的高性能、低延迟的无服务器应用程序，并避免了许多与其他无服务器应用程序相关的问题，例如冷启动。</p><p><a href="https://www.cloudflare.com/zh-cn/learning/serverless/what-is-serverless">无服务器</a> JavaScript 托管在边缘网络中或由 HTTP 缓存服务托管，后者存储内容以快速响应 HTTP 请求。开发人员可以编写和部署处理 HTTP 请求的 JavaScript 函数，在处理后再将请求一直传递到<a href="https://www.cloudflare.com/zh-cn/learning/cdn/glossary/origin-server">源站</a>。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/tupianpian@master/img/serverless-javascript-running-on-edge-server.svg" alt="" /></p><p>使用无服务器 JavaScript，可以通过在边缘运行代码来扩展现有应用程序的功能并改善用户体验，或者创建一个快速且高度可扩展的、全新的、完全无服务器的应用程序。<a href="https://www.cloudflare.com/zh-cn/products/cloudflare-workers">Cloudflare Workers </a>就是无服务器 JavaScript 平台。</p><blockquote><p>边缘计算是一种致力于使计算尽可能靠近数据源、以减少延迟和带宽使用的网络理念。简而言之，边缘计算意味着在云端运行更少的进程，将这些进程移动到本地，例如用户的计算机、<a href="https://www.cloudflare.com/zh-cn/learning/ddos/glossary/internet-of-things-iot">IoT 设备</a>或<a href="https://www.cloudflare.com/zh-cn/learning/cdn/glossary/edge-server">边缘服务器</a>。将计算放到网络边缘可以最大程度地减少客户端和服务器之间必须进行的长距离通信量。</p></blockquote><h3 id="什么是-varnish"><a class="markdownIt-Anchor" href="#什么是-varnish"></a> 什么是 Varnish？</h3><p>Varnish 是一个 Web 加速器，旨在加速 Web 应用程序并提高网站性能。它是一个缓存 HTTP <a href="https://www.cloudflare.com/zh-cn/learning/cdn/glossary/reverse-proxy">反向代理</a> ，这意味着它位于任何 Web 服务器的前端，并通过缓存或存储 Web 客户端经常请求的任何内容来加速往返于该服务器的 HTTP 流量。将 Varnish 配置语言（简称 VCL）与 Varnish 结合使用，开发人员就可以自定义 Varnish 如何管理 Web 请求。</p><h3 id="在无服务器架构中使用-javascript-代替-vcl-有什么优势"><a class="markdownIt-Anchor" href="#在无服务器架构中使用-javascript-代替-vcl-有什么优势"></a> 在无服务器架构中使用 JavaScript 代替 VCL 有什么优势？</h3><p>VCL 是一种配置语言，旨在使 Varnish 缓存易于配置；它不是一种成熟的编程语言。VCL 不够灵活，无法构建或扩展强大的应用程序。与 JavaScript 相比，它的功能有限。此外，VCL 不在 Varnish 实施之外使用，因此大多数开发人员都不熟悉 VCL。而 JavaScript 则应用广泛，并且已经广泛用于构建应用程序。在无服务器架构中使用 JavaScript 可使开发人员以他们熟悉的语言构建完整的应用程序。</p><p>无服务器 JavaScript 使更广泛的开发人员群体能够利用边缘上的无服务器计算，并允许这些开发人员构建更多种类的应用程序。</p><h3 id="为什么使用无服务器-javascript-构建应用程序可以减少延迟"><a class="markdownIt-Anchor" href="#为什么使用无服务器-javascript-构建应用程序可以减少延迟"></a> 为什么使用无服务器 JavaScript 构建应用程序可以减少延迟？</h3><p>无服务器 JavaScript 在 HTTP 缓存网络中运行，该网络比源站上托管的代码更接近最终用户。因此，请求不必一路传递到源站再一路回传，应用程序对用户交互的响应速度更快。缓存网络在地理上分布的边缘位置越多，延迟时间就越短。</p><h3 id="无服务器-javascript-何时运行"><a class="markdownIt-Anchor" href="#无服务器-javascript-何时运行"></a> 无服务器 JavaScript 何时运行？</h3><p>在无服务器模型中，应用程序被分解为函数，并且函数代码在响应某些事件时运行，在其他情况下不会运行。触发无服务器 JavaScript 执行的事件是 HTTP 请求。开发人员可以自定义其 JavaScript 函数响应的 HTTP 请求的类型，以及如何更改或实现 HTTP 请求。</p><h3 id="什么是-http-缓存"><a class="markdownIt-Anchor" href="#什么是-http-缓存"></a> 什么是 HTTP 缓存？</h3><p>HTTP 缓存是指服务器或浏览器保存对用户 HTTP 请求的响应的副本，以便更快答复以后的请求。<a href="https://www.cloudflare.com/zh-cn/learning/cdn/what-is-a-cdn">CDN </a>服务器就是 HTTP 缓存的例子。一些 HTTP 缓存服务使开发人员可以自定义 HTTP 缓存如何为其应用程序运行。</p><p>Cloudflare 是一个 HTTP 缓存边缘网络，其中包含遍布世界各地的数据中心，它允许开发人员在网络边缘编写和部署自己的 JavaScript。在 Cloudflare 网络中，HTTP 缓存不在任何特定服务器中进行，而是在最接近 HTTP 请求来源的数据中心内进行。</p><h3 id="与-service-workers-相比cloudflare-workers-有何独特之处"><a class="markdownIt-Anchor" href="#与-service-workers-相比cloudflare-workers-有何独特之处"></a> 与 service workers 相比，Cloudflare Workers 有何独特之处？</h3><p>使用 Cloudflare Workers 和使用 service workers 的一个主要区别是，service workers 是在客户端运行的，必须由用户的浏览器下载，而 Cloudflare Workers 在 Cloudflare 网络的边缘运行，介于用户和 Internet 的其余部分之间，有效地在网络内部运行。</p><blockquote><h5 id="什么是-service-workers"><a class="markdownIt-Anchor" href="#什么是-service-workers"></a> 什么是 service workers？</h5><p>Service workers 是浏览器下载并运行以为用户创建自定义体验的脚本。Service workers 使在浏览器中实现推送通知、后台同步和脱机运行等功能成为可能。它们使用 JavaScript 编写，可以在 HTTP 请求到达 Internet 之前拦截、修改和响应请求。</p><h5 id="service-worker-可以通过两种方式处理-http-流量"><a class="markdownIt-Anchor" href="#service-worker-可以通过两种方式处理-http-流量"></a> Service worker 可以通过两种方式处理 HTTP 流量：</h5><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo_1/img2/service-worker-responds-http-request.svg" alt="" /></p><p>Service workers 可以响应 HTTP 请求而无需联系 Web 服务器</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo_1/img2/service-worker-modifies-http-request-response.svg" alt="" /></p><p>Service workers 可以修改 HTTP 请求和响应</p></blockquote><h3 id="cloudflare-worker使用教程"><a class="markdownIt-Anchor" href="#cloudflare-worker使用教程"></a> cloudflare worker使用教程</h3><p>没有比官方文档更加详细的东西了，cloudflare文档本身内容就非常的详实，所以只需要仔细阅读cloudflare文档就能非常轻松的达到上手的程度，另一方面cloudflare worker本身使用就非常的简单，官方提供了多种语言可以供编写，JavaScript，rust，c，c++，python等等，所以对于绝大部分使用者来说语言都不会成为他们的障碍，当然官方首推是是JavaScript。</p><h3 id="关于额度问题"><a class="markdownIt-Anchor" href="#关于额度问题"></a> 关于额度问题</h3><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/tupianpian@master/img/worker%E8%AF%B4%E6%98%8E.png" alt="" /></p><p>关于这点我的回答是完全够用，</p><ul><li><p>每天免费提供100000个请求</p></li><li><p>每天 100,000 次读取操作</p></li><li><p>每天 1,000 次写入、删除、列出操作</p></li><li><p>提供大概1GB的kv储存空间</p></li></ul><p>另外付费版也就每月5dollar啦（，但是对于个人使用来看免费额度已经非常非常够用了，其次主要还是白嫖能带来满满的满足感（一拳一个白嫖怪）。</p><h3 id="hello-cloudflare-worker"><a class="markdownIt-Anchor" href="#hello-cloudflare-worker"></a> hello cloudflare worker</h3><p>接下来我们可以基于以上来写一个非常非常简单的栗子。</p><h3 id="api"><a class="markdownIt-Anchor" href="#api"></a> API</h3><p>比如说我们现在想要写一个每日可以返回bing壁纸的动态api，首先我们需要获取bing壁纸的url，打开f12就能很简单的获取到壁纸链接，这里我们就直接粗暴的直接打开worker，当然你也可以按照官方文档安装Workers CLI，按照官方的步骤一步一步的来，这里仅仅进行一个非常简单的演示，我们很容易就能编写到以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> req = request</span><br><span class="line">    <span class="keyword">const</span> urlStr = req.<span class="property">url</span></span><br><span class="line">    <span class="keyword">const</span> urlObj = <span class="keyword">new</span> <span class="title function_">URL</span>(urlStr)</span><br><span class="line">    <span class="keyword">const</span> path = urlObj.<span class="property">href</span>.<span class="title function_">substr</span>(urlObj.<span class="property">origin</span>.<span class="property">length</span>)</span><br><span class="line">    <span class="keyword">const</span> domain = (urlStr.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>))[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">let</span> day = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> destinationURL = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="title function_">startsWith</span>(<span class="string">&#x27;/bing&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">let</span> day = urlObj.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;day&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> destination = <span class="keyword">await</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="keyword">await</span> (<span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`https://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=<span class="subst">$&#123;day&#125;</span>&amp;n=1`</span>)).<span class="title function_">text</span>())[<span class="string">&quot;images&quot;</span>][<span class="number">0</span>][<span class="string">&quot;url&quot;</span>]</span><br><span class="line">            destinationURL = <span class="string">`https://cn.bing.com/<span class="subst">$&#123;destination&#125;</span>`</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">fetch</span>(destinationURL)</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的<code>fetch()</code>是 XMLHttpRequest 的升级版，用于在 JavaScript 脚本里面发出 HTTP 请求。</p></blockquote><p>然后直接吧这段代码粘贴到worker里面就行啦</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/tupianpian@master/img/worker_edtor.png" alt="" /></p><p>创建worker的时候会自动分配一个子域名，当然支持自定义域名，具体请参考文档</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/tupianpian@master/img/%E8%84%9A%E6%9C%AC1.png" alt="" /></p><p>然后访问子域名/bing就好啦，可以看到状态码是200，这里我的子域名是<a href="https://empty-credit-b440.youmingsama.workers.dev/">https://empty-credit-b440.youmingsama.workers.dev/</a>  于是就可以得到<a href="https://empty-credit-b440.youmingsama.workers.dev/bing">https://empty-credit-b440.youmingsama.workers.dev/bing</a> 就得到了我们想要的图片啦</p><p>于是下面几个api，实现几乎的原理和bing大同小异</p><ul><li><p>获取bing的每日一图 <a href="https://empty-credit-b440.youmingsama.workers.dev/bing">https://empty-credit-b440.youmingsama.workers.dev/bing</a></p></li><li><p>获取bing图片信息 <a href="https://empty-credit-b440.youmingsama.workers.dev/mbing">https://empty-credit-b440.youmingsama.workers.dev/mbing</a></p><blockquote><p>默认返回json格式</p></blockquote></li><li><p>返回一张随机生成的动漫人物头像 <a href="https://empty-credit-b440.youmingsama.workers.dev/suijilaopo">https://empty-credit-b440.youmingsama.workers.dev/suijilaopo</a></p></li><li><p>随机返回一言: <a href="https://empty-credit-b440.youmingsama.workers.dev/hitokoto">https://empty-credit-b440.youmingsama.workers.dev/hitokoto</a></p><blockquote><p>默认返回txt格式</p></blockquote></li><li><p>今日网抑云 <a href="https://empty-credit-b440.youmingsama.workers.dev/wangyiyun">https://empty-credit-b440.youmingsama.workers.dev/wangyiyun</a></p><blockquote><p>默认返回txt格式</p></blockquote></li><li><p>反代网站：*************************************************************************************************（高度加密）</p></li></ul><h3 id="cloudflare大法好"><a class="markdownIt-Anchor" href="#cloudflare大法好"></a> cloudflare大法好</h3><p>worker加上kv储存可玩性可拓展性非常强，这里演示的API仅仅是一种最简单的使用方法，不仅仅是网站，各种快速搭建的应用，cloudflare更让我们看到了无限的可能。</p><h1 id="所以白嫖大法好"><a class="markdownIt-Anchor" href="#所以白嫖大法好"></a> 所以白嫖大法好</h1><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/tupianpian@master/img/%E5%A5%BD%E8%80%B6.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> print*,&quot;hello world!!!&quot; </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单聊聊http</title>
      <link href="/posts/60b00a8/"/>
      <url>/posts/60b00a8/</url>
      
        <content type="html"><![CDATA[<h3 id="那就来简单的聊聊http吧"><a class="markdownIt-Anchor" href="#那就来简单的聊聊http吧"></a> 那就来简单的聊聊http吧</h3><p>http（Hypertext Transfer Protocol）超文本传输协议，简单的来概况就是一个简单的请求响应协议，我们熟悉的web就是建立再一个http上的王国。</p><blockquote><p>超文本传输协议是约定俗成的叫法更加正确的叫法应该称作：超文本转移协议</p></blockquote><h4 id="来聊聊uri和url"><a class="markdownIt-Anchor" href="#来聊聊uri和url"></a> 来聊聊URI和URL</h4><p>URI（uniform Resoutce Identifier）即统一资源标识符，URL(uniform Resoutce Locator),即统一资源定位符，鸡蛋但来说我们日常再浏览器地址栏输入的一般开始就是URL当然也是一个URI，通过这个我们就可以定位到我们需要查找的资源</p><blockquote><p>URL和URI并没有严格的区分，但是URL是URI的一个子集，也就是是每个URL都是一个URI但是每个URI不一定三个URL，因为URI还包括一个URN（统一资源名称）的子类，URN只是用来命名资源而并非定位资源，几乎自会在极少数情况下使用</p></blockquote><h4 id="来聊聊http的历史演变和发展历程"><a class="markdownIt-Anchor" href="#来聊聊http的历史演变和发展历程"></a> 来聊聊http的历史演变和发展历程</h4><h4 id="一http09"><a class="markdownIt-Anchor" href="#一http09"></a> 一.HTTP/0.9</h4><p>HTTP 是基于 TCP/IP 协议的<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html"><strong>应用层协议</strong></a>。它不涉及数据包（packet）传输，主要规定了客户端和服务器之间的通信格式，默认使用80端口。</p><p>最早版本是1991年发布的0.9版。该版本极其简单，只有一个命令<code>GET</code>。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html</span><br></pre></td></tr></table></figure></blockquote><p>上面命令表示，TCP 连接（connection）建立后，客户端向服务器请求（request）网页<code>index.html</code>。</p><p>协议规定，服务器只能回应HTML格式的字符串，不能回应别的格式。</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>服务器发送完毕，就关闭TCP连接。</p><h4 id="二-http10"><a class="markdownIt-Anchor" href="#二-http10"></a> 二 HTTP/1.0</h4><p>1996年5月，HTTP/1.0 版本发布，内容大大增加。</p><p>首先，任何格式的内容都可以发送。这使得互联网不仅可以传输文字，还能传输图像、视频、二进制文件。这为互联网的大发展奠定了基础。</p><p>其次，除了<code>GET</code>命令，还引入了<code>POST</code>命令和<code>HEAD</code>命令，丰富了浏览器与服务器的互动手段。</p><p>再次，HTTP请求和回应的格式也变了。除了数据部分，每次通信都必须包括头信息（HTTP header），用来描述一些元数据。</p><p>其他的新增功能还包括状态码（status code）、多字符集支持、多部分发送（multi-part type）、权限（authorization）、缓存（cache）、内容编码（content encoding）等。</p><h4 id="21请求格式"><a class="markdownIt-Anchor" href="#21请求格式"></a> 2.1请求格式</h4><p>下面是一个1.0版的HTTP请求的例子。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.0</span></span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br></pre></td></tr></table></figure></blockquote><p>可以看到，这个格式与0.9版有很大变化。</p><p>第一行是请求命令，必须在尾部添加协议版本（<code>HTTP/1.0</code>）。后面就是多行头信息，描述客户端的情况。</p><h4 id="22-回应格式"><a class="markdownIt-Anchor" href="#22-回应格式"></a> 2.2 回应格式</h4><p>服务器的回应如下。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.0</span> <span class="number">200</span> OK </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>137582</span><br><span class="line"><span class="attribute">Expires</span><span class="punctuation">: </span>Thu, 05 Dec 1997 16:00:00 GMT</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Wed, 5 August 1996 15:55:28 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache 0.84</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><p>回应的格式是&quot;头信息 + 一个空行（<code>\r\n</code>） + 数据&quot;。其中，第一行是&quot;协议版本 + 状态码（status code） + 状态描述&quot;。</p><h4 id="23-content-type-字段"><a class="markdownIt-Anchor" href="#23-content-type-字段"></a> 2.3 Content-Type 字段</h4><p>关于字符的编码，1.0版规定，头信息必须是 ASCII 码，后面的数据可以是任何格式。因此，服务器回应的时候，必须告诉客户端，数据是什么格式，这就是<code>Content-Type</code>字段的作用。</p><p>下面是一些常见的<code>Content-Type</code>字段的值。</p><blockquote><ul><li>text/plain</li><li>text/html</li><li>text/css</li><li>image/jpeg</li><li>image/png</li><li>image/svg+xml</li><li>audio/mp4</li><li>video/mp4</li><li>application/javascript</li><li>application/pdf</li><li>application/zip</li><li>application/atom+xml</li></ul></blockquote><p>这些数据类型总称为<code>MIME type</code>，每个值包括一级类型和二级类型，之间用斜杠分隔。</p><p>除了预定义的类型，厂商也可以自定义类型。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application/vnd.debian.binary-package</span><br></pre></td></tr></table></figure></blockquote><p>上面的类型表明，发送的是Debian系统的二进制数据包。</p><p><code>MIME type</code>还可以在尾部使用分号，添加参数。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br></pre></td></tr></table></figure></blockquote><p>上面的类型表明，发送的是网页，而且编码是UTF-8。</p><p>客户端请求的时候，可以使用<code>Accept</code>字段声明自己可以接受哪些数据格式。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，客户端声明自己可以接受任何格式的数据。</p><p><code>MIME type</code>不仅用在HTTP协议，还可以用在其他地方，比如HTML网页。</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等同于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure></blockquote><h4 id="24-content-encoding-字段"><a class="markdownIt-Anchor" href="#24-content-encoding-字段"></a> 2.4 Content-Encoding 字段</h4><p>由于发送的数据可以是任何格式，因此可以把数据压缩后再发送。<code>Content-Encoding</code>字段说明数据的压缩方法。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>gzip</span><br><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>compress</span><br><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>deflate</span><br></pre></td></tr></table></figure></blockquote><p>客户端在请求时，用<code>Accept-Encoding</code>字段说明自己可以接受哪些压缩方法。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br></pre></td></tr></table></figure></blockquote><h4 id="25缺点"><a class="markdownIt-Anchor" href="#25缺点"></a> 2.5缺点</h4><p>HTTP/1.0 版的主要缺点是，每个TCP连接只能发送一个请求。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。</p><p>TCP连接的新建成本很高，因为需要客户端和服务器三次握手，并且开始时发送速率较慢（slow start）。所以，HTTP 1.0版本的性能比较差。随着网页加载的外部资源越来越多，这个问题就愈发突出了。</p><p>为了解决这个问题，有些浏览器在请求时，用了一个非标准的<code>Connection</code>字段。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br></pre></td></tr></table></figure></blockquote><p>这个字段要求服务器不要关闭TCP连接，以便其他请求复用。服务器同样回应这个字段。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br></pre></td></tr></table></figure></blockquote><p>一个可以复用的TCP连接就建立了，直到客户端或服务器主动关闭连接。但是，这不是标准字段，不同实现的行为可能不一致，因此不是根本的解决办法。</p><h4 id="三-http11"><a class="markdownIt-Anchor" href="#三-http11"></a> 三、HTTP/1.1</h4><p>1997年1月，HTTP/1.1 版本发布，只比 1.0 版本晚了半年。它进一步完善了 HTTP 协议。</p><h4 id="31-持久连接"><a class="markdownIt-Anchor" href="#31-持久连接"></a> 3.1 持久连接</h4><p>1.1 版的最大变化，就是引入了持久连接（persistent connection），即TCP连接默认不关闭，可以被多个请求复用，不用声明<code>Connection: keep-alive</code>。</p><p>客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。不过，规范的做法是，客户端在最后一个请求时，发送<code>Connection: close</code>，明确要求服务器关闭TCP连接。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure></blockquote><p>目前，对于同一个域名，大多数浏览器允许同时建立6个持久连接。</p><h4 id="32-管道机制"><a class="markdownIt-Anchor" href="#32-管道机制"></a> 3.2 管道机制</h4><p>1.1 版还引入了管道机制（pipelining），即在同一个TCP连接里面，客户端可以同时发送多个请求。这样就进一步改进了HTTP协议的效率。</p><p>举例来说，客户端需要请求两个资源。以前的做法是，在同一个TCP连接里面，先发送A请求，然后等待服务器做出回应，收到后再发出B请求。管道机制则是允许浏览器同时发出A请求和B请求，但是服务器还是按照顺序，先回应A请求，完成后再回应B请求。</p><h4 id="33-content-length-字段"><a class="markdownIt-Anchor" href="#33-content-length-字段"></a> 3.3 Content-Length 字段</h4><p>一个TCP连接现在可以传送多个回应，势必就要有一种机制，区分数据包是属于哪一个回应的。这就是<code>Content-length</code>字段的作用，声明本次回应的数据长度。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>3495</span><br></pre></td></tr></table></figure></blockquote><p>上面代码告诉浏览器，本次回应的长度是3495个字节，后面的字节就属于下一个回应了。</p><p>在1.0版中，<code>Content-Length</code>字段不是必需的，因为浏览器发现服务器关闭了TCP连接，就表明收到的数据包已经全了。</p><h4 id="34-分块传输编码"><a class="markdownIt-Anchor" href="#34-分块传输编码"></a> 3.4 分块传输编码</h4><p>使用<code>Content-Length</code>字段的前提条件是，服务器发送回应之前，必须知道回应的数据长度。</p><p>对于一些很耗时的动态操作来说，这意味着，服务器要等到所有操作完成，才能发送数据，显然这样的效率不高。更好的处理方法是，产生一块数据，就发送一块，采用&quot;流模式&quot;（stream）取代&quot;缓存模式&quot;（buffer）。</p><p>因此，1.1版规定可以不使用<code>Content-Length</code>字段，而使用<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81">&quot;分块传输编码&quot;</a>（chunked transfer encoding）。只要请求或回应的头信息有<code>Transfer-Encoding</code>字段，就表明回应将由数量未定的数据块组成。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br></pre></td></tr></table></figure></blockquote><p>每个非空的数据块之前，会有一个16进制的数值，表示这个块的长度。最后是一个大小为0的块，就表示本次回应的数据发送完了。下面是一个例子。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-livecodeserver"><span class="number">25</span></span></span><br><span class="line"><span class="language-livecodeserver">This is <span class="keyword">the</span> data <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">first</span> chunk</span></span><br><span class="line"><span class="language-livecodeserver"></span></span><br><span class="line"><span class="language-livecodeserver"><span class="number">1</span>C</span></span><br><span class="line"><span class="language-livecodeserver"><span class="keyword">and</span> this is <span class="keyword">the</span> <span class="keyword">second</span> <span class="literal">one</span></span></span><br><span class="line"><span class="language-livecodeserver"></span></span><br><span class="line"><span class="language-livecodeserver"><span class="number">3</span></span></span><br><span class="line"><span class="language-livecodeserver">con</span></span><br><span class="line"><span class="language-livecodeserver"></span></span><br><span class="line"><span class="language-livecodeserver"><span class="number">8</span></span></span><br><span class="line"><span class="language-livecodeserver">sequence</span></span><br><span class="line"><span class="language-livecodeserver"></span></span><br><span class="line"><span class="language-livecodeserver"><span class="number">0</span></span></span><br></pre></td></tr></table></figure></blockquote><h4 id="35-其他功能"><a class="markdownIt-Anchor" href="#35-其他功能"></a> 3.5 其他功能</h4><p>1.1版还新增了许多动词方法：<code>PUT</code>、<code>PATCH</code>、<code>HEAD</code>、 <code>OPTIONS</code>、<code>DELETE</code>。</p><p>另外，客户端请求的头信息新增了<code>Host</code>字段，用来指定服务器的域名。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.com</span><br></pre></td></tr></table></figure></blockquote><p>有了<code>Host</code>字段，就可以将请求发往同一台服务器上的不同网站，为虚拟主机的兴起打下了基础。</p><h4 id="36-缺点"><a class="markdownIt-Anchor" href="#36-缺点"></a> 3.6 缺点</h4><p>虽然1.1版允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的。服务器只有处理完一个回应，才会进行下一个回应。要是前面的回应特别慢，后面就会有许多请求排队等着。这称为<a href="https://zh.wikipedia.org/wiki/%E9%98%9F%E5%A4%B4%E9%98%BB%E5%A1%9E">&quot;队头堵塞&quot;</a>（Head-of-line blocking）。</p><p>为了避免这个问题，只有两种方法：一是减少请求数，二是同时多开持久连接。这导致了很多的网页优化技巧，比如合并脚本和样式表、将图片嵌入CSS代码、域名分片（domain sharding）等等。如果HTTP协议设计得更好一些，这些额外的工作是可以避免的。</p><h4 id="四-spdy-协议"><a class="markdownIt-Anchor" href="#四-spdy-协议"></a> 四、SPDY 协议</h4><p>2009年，谷歌公开了自行研发的 SPDY 协议，主要解决 HTTP/1.1 效率不高的问题。</p><p>这个协议在Chrome浏览器上证明可行以后，就被当作 HTTP/2 的基础，主要特性都在 HTTP/2 之中得到继承。</p><h4 id="五-http2"><a class="markdownIt-Anchor" href="#五-http2"></a> 五、HTTP/2</h4><p>HTTP/2 诞生于 8 年前 Google 一封 SPDY 协议白皮书。5 年前，RFC7540 和 RFC7541 的发布正式确立了 HTTP/2。5 年过去了，支持 HTTP/2 的浏览器的市场占有率达到了 96.88%。</p><h4 id="51-二进制协议"><a class="markdownIt-Anchor" href="#51-二进制协议"></a> 5.1 二进制协议</h4><p>HTTP/1.1 版的头信息肯定是文本（ASCII编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为&quot;帧&quot;（frame）：头信息帧和数据帧。</p><p>二进制协议的一个好处是，可以定义额外的帧。HTTP/2 定义了近十种帧，为将来的高级应用打好了基础。如果使用文本实现这种功能，解析数据将会变得非常麻烦，二进制解析则方便得多。</p><h4 id="52-多工"><a class="markdownIt-Anchor" href="#52-多工"></a> 5.2 多工</h4><p>HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应，这样就避免了&quot;队头堵塞&quot;。</p><p>举例来说，在一个TCP连接里面，服务器同时收到了A请求和B请求，于是先回应A请求，结果发现处理过程非常耗时，于是就发送A请求已经处理好的部分， 接着回应B请求，完成后，再发送A请求剩下的部分。</p><p>这样双向的、实时的通信，就叫做多工（Multiplexing）。</p><h4 id="53-数据流"><a class="markdownIt-Anchor" href="#53-数据流"></a> 5.3 数据流</h4><p>因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。因此，必须要对数据包做标记，指出它属于哪个回应。</p><p>HTTP/2 将每个请求或回应的所有数据包，称为一个数据流（stream）。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流ID，用来区分它属于哪个数据流。另外还规定，客户端发出的数据流，ID一律为奇数，服务器发出的，ID为偶数。</p><p>数据流发送到一半的时候，客户端和服务器都可以发送信号（<code>RST_STREAM</code>帧），取消这个数据流。1.1版取消数据流的唯一方法，就是关闭TCP连接。这就是说，HTTP/2 可以取消某一次请求，同时保证TCP连接还打开着，可以被其他请求使用。</p><p>客户端还可以指定数据流的优先级。优先级越高，服务器就会越早回应。</p><h4 id="54-头信息压缩"><a class="markdownIt-Anchor" href="#54-头信息压缩"></a> 5.4 头信息压缩</h4><p>HTTP/1.1 时代，消息本体已经用 gzip 进行了压缩、或者二进制文件（如 woff 字体等）也内置了压缩格式。但是，响应头、状态码并没有经过任何压缩、直接使用明文传输，对于不会经常变动的如 User-Agent、Cookie、状态码等每次请求会造成数百字节流量的浪费。</p><p>HTTP/2 对这一点做了优化，引入了头信息压缩机制（header compression）。一方面，头信息使用<code>gzip</code>或<code>compress</code>压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了。</p><h4 id="55-服务器推送"><a class="markdownIt-Anchor" href="#55-服务器推送"></a> 5.5 服务器推送</h4><p>HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送（server push）。</p><p>常见场景是客户端请求一个网页，这个网页里面包含很多静态资源。正常情况下，客户端必须收到网页后，解析HTML源码，发现有静态资源，再发出静态资源请求。其实，服务器可以预期到客户端请求网页后，很可能会再请求静态资源，所以就主动把这些静态资源随着网页一起发给客户端了。</p><h4 id="对http的展望"><a class="markdownIt-Anchor" href="#对http的展望"></a> 对http的展望</h4><p>虽然目前http2再目前的浏览器市场占有决定碾压的优势，http3的诞生也让人们对未来发展充满了憧憬，HTTP/3 和 HTTP/2 以及 HTTP/1.1 最大的不同应该是 HTTP/3 颠覆了 HTTP 使用 TCP 的「传统」，新版的UDP会更加快速稳定，也会更加安全。</p><h3 id="链接"><a class="markdownIt-Anchor" href="#链接"></a> 链接</h3><p><a href="https://www.jesuisundev.com/en/understand-http3-in-5-minutes/">五分钟看懂http3</a></p><p><a href="https://kinsta.com/blog/http3/">什么是http3</a></p>]]></content>
      
      
      <categories>
          
          <category> print*,&quot;hello world!!!&quot; </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口不也挺好的嘛</title>
      <link href="/posts/de1f8121/"/>
      <url>/posts/de1f8121/</url>
      
        <content type="html"><![CDATA[<h2 id="滑动窗口不也挺好的吗jpg"><a class="markdownIt-Anchor" href="#滑动窗口不也挺好的吗jpg"></a> 滑动窗口不也挺好的吗.jpg</h2><p>这个月大胆预测一波，这个月可能是leetcode的滑动窗口月，先提前开个坑（，毕竟上个月的查并集月已经在写了已经在写了（雾。</p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo_1/img2/问题不大.png" style="zoom: 33%;" /><h4 id="643-子数组最大平均数-i"><a class="markdownIt-Anchor" href="#643-子数组最大平均数-i"></a> <a href="https://leetcode-cn.com/problems/maximum-average-subarray-i/">643. 子数组最大平均数 I</a></h4><p>给定 <code>n</code> 个整数，找出平均数最大且长度为 <code>k</code> 的连续子数组，并输出该最大平均数。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,12,-5,-6,50,3], k = 4</span><br><span class="line">输出：12.75</span><br><span class="line">解释：最大平均数 (12-5-6+50)/4 = 51/4 = 12.75</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>1 &lt;= <code>k</code> &lt;= <code>n</code> &lt;= 30,000。</li><li>所给数据范围 [-10,000，10,000]。</li></ul><p>非常典型的滑动窗口类型题目，不过暴力嘛很容易超时，当然如果你之前做过滑动窗口类型的题目的话，这题肯定一眼就看出来了.jpg。当然代码也在意料之中的很简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMaxAverage</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">      <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">          sum+=nums[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">double</span> maxsum=sum;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i=k;i&lt;nums.length;i++)&#123;</span><br><span class="line">          sum=sum+nums[i]-nums[i-k];</span><br><span class="line">          maxsum=Math.max(sum,maxsum);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> maxsum/k;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1208-尽可能使字符串相等"><a class="markdownIt-Anchor" href="#1208-尽可能使字符串相等"></a> <a href="https://leetcode-cn.com/problems/get-equal-substrings-within-budget/">1208. 尽可能使字符串相等</a></h4><p>给你两个长度相同的字符串，<code>s</code> 和 <code>t</code>。</p><p>将 <code>s</code> 中的第 <code>i</code> 个字符变到 <code>t</code> 中的第 <code>i</code> 个字符需要 <code>|s[i] - t[i]|</code> 的开销（开销可能为 0），也就是两个字符的 ASCII 码值的差的绝对值。</p><p>用于变更字符串的最大预算是 <code>maxCost</code>。在转化字符串时，总开销应当小于等于该预算，这也意味着字符串的转化可能是不完全的。</p><p>如果你可以将 <code>s</code> 的子字符串转化为它在 <code>t</code> 中对应的子字符串，则返回可以转化的最大长度。</p><p>如果 <code>s</code> 中没有子字符串可以转化成 <code>t</code> 中对应的子字符串，则返回 <code>0</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abcd&quot;, t = &quot;bcdf&quot;, cost = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：s 中的 &quot;abc&quot; 可以变为 &quot;bcd&quot;。开销为 3，所以最大长度为 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abcd&quot;, t = &quot;cdef&quot;, cost = 3</span><br><span class="line">输出：1</span><br><span class="line">解释：s 中的任一字符要想变成 t 中对应的字符，其开销都是 2。因此，最大长度为 1。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abcd&quot;, t = &quot;acde&quot;, cost = 0</span><br><span class="line">输出：1</span><br><span class="line">解释：你无法作出任何改动，所以最大长度为 1。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 10^5</code></li><li><code>0 &lt;= maxCost &lt;= 10^6</code></li><li><code>s</code> 和 <code>t</code> 都只含小写英文字母。</li></ul><p>这题也是滑动窗口类型的题耶，滑动窗口月实锤！！！！，这题也是滑动窗口诶，这题的滑动窗口使用双指针来维护，right指针不变，让left指针来缩小范围即可，简单题我重拳出击，困难题我唯唯诺诺（。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">equalSubstring</span><span class="params">(String s, String t, <span class="type">int</span> maxCost)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>, left = <span class="number">0</span>, maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">            cost += Math.abs(s.charAt(right) - t.charAt(right));</span><br><span class="line">            <span class="keyword">while</span> (cost &gt; maxCost) &#123;<span class="comment">//如果条件不满足</span></span><br><span class="line">                cost -= Math.abs(s.charAt(left) - t.charAt(left));</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            maxLength = Math.max(maxLength, right - left + <span class="number">1</span>);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ps：有人指出这题严格来说不算是滑动窗口，严格来说应该是双指针，两者的区别在于「滑动窗口」是一类问题本身，「双指针」是解决一类二分查找问题的通用优化方法。或者说<strong>滑动窗口」本身并不是解决问题的一种方法（或者说算法），它其实就是这个问题本身</strong>。我们需要做的是寻找合适的数据结构来「维护」这个「滑动窗口」，比如说第一题典型的滑动窗口</p></blockquote><h4 id="1423-可获得的最大点数"><a class="markdownIt-Anchor" href="#1423-可获得的最大点数"></a> <a href="https://leetcode-cn.com/problems/maximum-points-you-can-obtain-from-cards/">1423. 可获得的最大点数</a></h4><p>几张卡牌 <strong>排成一行</strong>，每张卡牌都有一个对应的点数。点数由整数数组 <code>cardPoints</code> 给出。</p><p>每次行动，你可以从行的开头或者末尾拿一张卡牌，最终你必须正好拿 <code>k</code> 张卡牌。</p><p>你的点数就是你拿到手中的所有卡牌的点数之和。</p><p>给你一个整数数组 <code>cardPoints</code> 和整数 <code>k</code>，请你返回可以获得的最大点数。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：cardPoints = [1,2,3,4,5,6,1], k = 3</span><br><span class="line">输出：12</span><br><span class="line">解释：第一次行动，不管拿哪张牌，你的点数总是 1 。但是，先拿最右边的卡牌将会最大化你的可获得点数。最优策略是拿右边的三张牌，最终点数为 1 + 6 + 5 = 12 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：cardPoints = [2,2,2], k = 2</span><br><span class="line">输出：4</span><br><span class="line">解释：无论你拿起哪两张卡牌，可获得的点数总是 4 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：cardPoints = [9,7,7,9,7,7,9], k = 7</span><br><span class="line">输出：55</span><br><span class="line">解释：你必须拿起所有卡牌，可以获得的点数为所有卡牌的点数之和。</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：cardPoints = [1,1000,1], k = 1</span><br><span class="line">输出：1</span><br><span class="line">解释：你无法拿到中间那张卡牌，所以可以获得的最大点数为 1 。 </span><br></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：cardPoints = [1,79,80,1,1,1,200,1], k = 3</span><br><span class="line">输出：202</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= cardPoints.length &lt;= 10^5</code></li><li><code>1 &lt;= cardPoints[i] &lt;= 10^4</code></li><li><code>1 &lt;= k &lt;= cardPoints.length</code></li></ul><p>emmmmm这题我一开始就陷入了误区，慌慌忙忙开始敲代码，这题既然求最大的点数之和，我们只需要维护最小的滑动窗口就行了，知道了这点之后就变得很简单了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxScore</span><span class="params">(<span class="type">int</span>[] cardPoints, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cardPoints.length;</span><br><span class="line">        <span class="comment">// 滑动窗口大小为 n-k</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">windowSize</span> <span class="operator">=</span> n - k;</span><br><span class="line">        <span class="comment">// 选前 n-k 个作为初始值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; windowSize; ++i) &#123;</span><br><span class="line">            sum += cardPoints[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minSum</span> <span class="operator">=</span> sum;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> windowSize; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="comment">// 滑动窗口每向右移动一格，增加从右侧进入窗口的元素值，并减少从左侧离开窗口的元素值</span></span><br><span class="line">            sum += cardPoints[i] - cardPoints[i - windowSize];</span><br><span class="line">            minSum = Math.min(minSum, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(cardPoints).sum() - minSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="978-最长湍流子数组"><a class="markdownIt-Anchor" href="#978-最长湍流子数组"></a> <a href="https://leetcode-cn.com/problems/longest-turbulent-subarray/">978. 最长湍流子数组</a></h4><p>当 <code>A</code> 的子数组 <code>A[i], A[i+1], ..., A[j]</code> 满足下列条件时，我们称其为<em>湍流子数组</em>：</p><ul><li>若 <code>i &lt;= k &lt; j</code>，当 <code>k</code> 为奇数时， <code>A[k] &gt; A[k+1]</code>，且当 <code>k</code> 为偶数时，<code>A[k] &lt; A[k+1]</code>；</li><li><strong>或</strong> 若 <code>i &lt;= k &lt; j</code>，当 <code>k</code> 为偶数时，<code>A[k] &gt; A[k+1]</code> ，且当 <code>k</code> 为奇数时， <code>A[k] &lt; A[k+1]</code>。</li></ul><p>也就是说，如果比较符号在子数组中的每个相邻元素对之间翻转，则该子数组是湍流子数组。</p><p>返回 <code>A</code> 的最大湍流子数组的<strong>长度</strong>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[9,4,2,10,7,8,8,1,9]</span><br><span class="line">输出：5</span><br><span class="line">解释：(A[1] &gt; A[2] &lt; A[3] &gt; A[4] &lt; A[5])</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[4,8,12,16]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[100]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li><code>1 &lt;= A.length &lt;= 40000</code></li><li><code>0 &lt;= A[i] &lt;= 10^9</code></li></ol><p>这题我们根据定义可能会存在<code>arr[right-1]&lt;arr[right]&amp;&amp;arr[right]&gt;arr[right+1]</code>或者<code>arr[right-1]&gt;arr[right]&amp;&amp;arr[right]&lt;arr[right-1]</code>，这两种情况需要把right向右移动一个单位，此外当无法满足这两种情况时需要另<code>left=right</code>。</p><p>当窗口的长度为1时，需要把left和right都右移一个单位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxTurbulenceSize</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (right &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[left] == arr[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                right++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[right - <span class="number">1</span>] &lt; arr[right] &amp;&amp; arr[right] &gt; arr[right + <span class="number">1</span>]) &#123;</span><br><span class="line">                    right++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[right - <span class="number">1</span>] &gt; arr[right] &amp;&amp; arr[right] &lt; arr[right + <span class="number">1</span>]) &#123;</span><br><span class="line">                    right++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = Math.max(ret, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="485-最大连续-1-的个数"><a class="markdownIt-Anchor" href="#485-最大连续-1-的个数"></a> <a href="https://leetcode-cn.com/problems/max-consecutive-ones/">485. 最大连续 1 的个数</a></h4><p>给定一个二进制数组， 计算其中最大连续 1 的个数。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,1,0,1,1,1]</span><br><span class="line">输出：3</span><br><span class="line">解释：开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>输入的数组只包含 <code>0</code> 和 <code>1</code> 。</li><li>输入数组的长度是正整数，且不超过 10,000。</li></ul><p>这题有了上面几题的经验和模板应该很容易看出来了.jpg</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxConsecutiveOnes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[right] == <span class="number">1</span>) &#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right++;</span><br><span class="line">                left = right;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, right - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1004-最大连续1的个数-iii"><a class="markdownIt-Anchor" href="#1004-最大连续1的个数-iii"></a> <a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/">1004. 最大连续1的个数 III</a></h4><p>给定一个由若干 <code>0</code> 和 <code>1</code> 组成的数组 <code>A</code>，我们最多可以将 <code>K</code> 个值从 0 变成 1 。</p><p>返回仅包含 1 的最长（连续）子数组的长度。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：A = [1,1,1,0,0,0,1,1,1,1,0], K = 2</span><br><span class="line">输出：6</span><br><span class="line">解释： </span><br><span class="line">[1,1,1,0,0,1,1,1,1,1,1]</span><br><span class="line">粗体数字从 0 翻转到 1，最长的子数组长度为 6。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3</span><br><span class="line">输出：10</span><br><span class="line">解释：</span><br><span class="line">[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]</span><br><span class="line">粗体数字从 0 翻转到 1，最长的子数组长度为 10。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li><code>1 &lt;= A.length &lt;= 20000</code></li><li><code>0 &lt;= K &lt;= A.length</code></li><li><code>A[i]</code> 为 <code>0</code> 或 <code>1</code></li></ol><p>这题看了半天没想到怎么用滑动数组，这里其实不用去计算1的数量，我们只需要去维护0的数量小于2的滑动窗口就好了,想通了这一点之后就变得很简单了，代码的话是常规滑动数组的写法，也没什么好说的，总之就是很简单.jpg</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestOnes</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> A.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, lsum = <span class="number">0</span>, rsum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; n; ++right) &#123;</span><br><span class="line">            rsum += <span class="number">1</span> - A[right];</span><br><span class="line">            <span class="keyword">while</span> (lsum &lt; rsum - K) &#123;</span><br><span class="line">                lsum += <span class="number">1</span> - A[left];</span><br><span class="line">                ++left;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, right - left + <span class="number">1</span>);</span><br><span class="line">         </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1052-爱生气的书店老板"><a class="markdownIt-Anchor" href="#1052-爱生气的书店老板"></a> <a href="https://leetcode-cn.com/problems/grumpy-bookstore-owner/">1052. 爱生气的书店老板</a></h4><p>今天，书店老板有一家店打算试营业 <code>customers.length</code> 分钟。每分钟都有一些顾客（<code>customers[i]</code>）会进入书店，所有这些顾客都会在那一分钟结束后离开。</p><p>在某些时候，书店老板会生气。 如果书店老板在第 <code>i</code> 分钟生气，那么 <code>grumpy[i] = 1</code>，否则 <code>grumpy[i] = 0</code>。 当书店老板生气时，那一分钟的顾客就会不满意，不生气则他们是满意的。</p><p>书店老板知道一个秘密技巧，能抑制自己的情绪，可以让自己连续 <code>X</code> 分钟不生气，但却只能使用一次。</p><p>请你返回这一天营业下来，最多有多少客户能够感到满意的数量。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3</span><br><span class="line">输出：16</span><br><span class="line">解释：</span><br><span class="line">书店老板在最后 3 分钟保持冷静。</span><br><span class="line">感到满意的最大客户数量 = 1 + 1 + 1 + 1 + 7 + 5 = 16.</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= X &lt;= customers.length == grumpy.length &lt;= 20000</code></li><li><code>0 &lt;= customers[i] &lt;= 1000</code></li><li><code>0 &lt;= grumpy[i] &lt;= 1</code></li></ul><p>这题也是典型的滑动窗口，这题灵活的运用了数组customer和grumpy的关系，代码实现倒是很简单，弹前提是活用customer和grumpy的关系，代码实现倒是很常规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSatisfied</span><span class="params">(<span class="type">int</span>[] customers, <span class="type">int</span>[] grumpy, <span class="type">int</span> X)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> customers.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grumpy[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                total += customers[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">increase</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; X; i++) &#123;</span><br><span class="line">            increase += customers[i] * grumpy[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIncrease</span> <span class="operator">=</span> increase;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> X; i &lt; n; i++) &#123;</span><br><span class="line">            increase = increase - customers[i - X] * grumpy[i - X] + customers[i] * grumpy[i];</span><br><span class="line">            maxIncrease = Math.max(maxIncrease, increase);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total + maxIncrease;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="这是二月最后一道滑动窗口题啦这我我最后的波纹啦jojo"><a class="markdownIt-Anchor" href="#这是二月最后一道滑动窗口题啦这我我最后的波纹啦jojo"></a> 这是二月最后一道滑动窗口题啦，这我我最后的波纹啦，jojo！！！！</h4><h4 id="395-至少有-k-个重复字符的最长子串"><a class="markdownIt-Anchor" href="#395-至少有-k-个重复字符的最长子串"></a> <a href="https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/">395. 至少有 K 个重复字符的最长子串</a></h4><p>给你一个字符串 <code>s</code> 和一个整数 <code>k</code> ，请你找出 <code>s</code> 中的最长子串， 要求该子串中的每一字符出现次数都不少于 <code>k</code> 。返回这一子串的长度。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;aaabb&quot;, k = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：最长子串为 &quot;aaa&quot; ，其中 &#x27;a&#x27; 重复了 3 次。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ababbc&quot;, k = 2</span><br><span class="line">输出：5</span><br><span class="line">解释：最长子串为 &quot;ababb&quot; ，其中 &#x27;a&#x27; 重复了 2 次， &#x27;b&#x27; 重复了 3 次。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> 仅由小写英文字母组成</li><li><code>1 &lt;= k &lt;= 105</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSubstring</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">char</span>[] cs = s.toCharArray();</span><br><span class="line">    <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">curKind</span> <span class="operator">=</span> <span class="number">1</span>; curKind &lt;= <span class="number">26</span>; curKind++) &#123;</span><br><span class="line">      <span class="comment">//对于限定的字符数量的条件下进行滑动窗口</span></span><br><span class="line">      Arrays.fill(cnt, <span class="number">0</span>);</span><br><span class="line">      <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">//totalKind:窗口内所有字符类型数量，sumKind:窗口内满足出现次数不少于k的字符类型数量</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">totalKind</span> <span class="operator">=</span> <span class="number">0</span>, sumKind = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (right &lt; len)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightIndex</span> <span class="operator">=</span> cs[right] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        cnt[rightIndex]++;</span><br><span class="line">        <span class="keyword">if</span> (cnt[rightIndex] == <span class="number">1</span>) totalKind++;</span><br><span class="line">        <span class="keyword">if</span> (cnt[rightIndex] == k) sumKind++;</span><br><span class="line">        <span class="comment">//当总字符种类数量不满足限定的字符种类数量，需要被迫移动左指针来减少总字符种类数量</span></span><br><span class="line">        <span class="keyword">while</span> (totalKind &gt; curKind) &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">leftIndex</span> <span class="operator">=</span> cs[left] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">          <span class="keyword">if</span> (cnt[leftIndex] == <span class="number">1</span>) totalKind--;</span><br><span class="line">          <span class="keyword">if</span> (cnt[leftIndex] == k) sumKind--;</span><br><span class="line">          cnt[leftIndex]--;</span><br><span class="line">          left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (totalKind == sumKind) ans = Math.max(ans, right - left + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//主动移动右指针</span></span><br><span class="line">        right++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>嗯这的确是leetcode本月最后一道滑动窗口题，二月最后一道滑动窗口题发出了它最后的波纹，二月的题我几乎每道题都打了，注意是几乎是几乎，也就是说还有几道因为大过年的懒得刷，还有令我唯唯诺诺的困难题，嗯！！！二月勋章没拿到呢！！！！</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo_1/img2/%E9%9D%9E%E5%B8%B8%E6%81%90%E6%80%96.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 蒟蒻弱弱弱弱弱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sissy Sky</title>
      <link href="/posts/a79ea1c9/"/>
      <url>/posts/a79ea1c9/</url>
      
        <content type="html"><![CDATA[<p>好久时间没有看过柯南了！！！78仍然在那里水剧情，水一集，两集，三集…几百集，熟练的打开b站，鼠标滑轮不停往下滑，粗暴的划过1000多集，熟悉的单元剧，熟悉的柯学，熟悉的情节，但是唯一不同的是片尾曲！！！！是片尾曲！！！！突然的插播一句，这次bilibili动画大选我们的haibara ai是第八诶，反观其他的柯学人物，emmmmm，哦原来是需要从下往上划啊（。灰原哀？那个无情的搜索引擎？任劳任怨的工具人？啊，sherry！！嗯没错就是她</p>    <div id="aplayer-ysYpMklb" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="001yD43w3tB4ow" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?aid=66161708&bvid=BV1w4411m7hJ&cid=115159280&page=1&high_quality=1&danmaku=0" frameborder="no" scrolling="no"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Roman </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 歌歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朝と夜の物語</title>
      <link href="/posts/43fc1bb6/"/>
      <url>/posts/43fc1bb6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Roman </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物语系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哀酱</title>
      <link href="/posts/d015c452/"/>
      <url>/posts/d015c452/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 呐！ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jpg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂谈：异度之刃2</title>
      <link href="/posts/929895af/"/>
      <url>/posts/929895af/</url>
      
        <content type="html"><![CDATA[<p>youmingsamakkskkksk</p><p>回航</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂谈：异度之刃2</title>
      <link href="/posts/929895af/"/>
      <url>/posts/929895af/</url>
      
        <content type="html"><![CDATA[<p>youmingsamakkskkksk</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java多线程原理篇大概</title>
      <link href="/posts/7126b21b/"/>
      <url>/posts/7126b21b/</url>
      
        <content type="html"><![CDATA[<h3 id="这大概是传说中的原理篇"><a class="markdownIt-Anchor" href="#这大概是传说中的原理篇"></a> 这大概是传说中的原理篇</h3><p>当然其中会参杂一些其他的东西，（失礼了</p><h3 id="1先来看看java内存模型"><a class="markdownIt-Anchor" href="#1先来看看java内存模型"></a> 1.先来看看Java内存模型</h3><ul><li>线程间如何通信？即：线程之间以何种机制来交换信息</li><li>线程间如何同步？即：线程以何种机制来控制不同线程间操作发生的相对顺序</li></ul><p>有两种并发模型可以解决这两个问题：</p><ul><li>消息传递并发模型</li><li>共享内存并发模型</li></ul><p>这两种模型之间的区别如下表所示：</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/ing/%E4%B8%A4%E7%A7%8D%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%AF%94%E8%BE%831.png" alt="" /></p><p>我们看出来了<strong>在Java中，使用的是共享内存并发模型</strong>。</p><h2 id="java内存模型的抽象结构"><a class="markdownIt-Anchor" href="#java内存模型的抽象结构"></a> Java内存模型的抽象结构</h2><h3 id="运行时内存的划分"><a class="markdownIt-Anchor" href="#运行时内存的划分"></a> 运行时内存的划分</h3><p>先谈一下运行时数据区，下面这张图相信大家一点都不陌生：<img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/ing/Java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.png" alt="" /></p><p>对于每一个线程来说，栈都是私有的，而堆是共有的。</p><p>也就是说在栈中的变量（局部变量、方法定义参数、异常处理器参数）不会在线程之间共享，也就不会有内存可见性（下文会说到）的问题，也不受内存模型的影响。而在堆中的变量是共享的，本文称为共享变量。</p><p>所以，内存可见性是针对的<strong>共享变量</strong>。</p><h3 id="既然堆是共享的为什么在堆中会有内存不可见问题"><a class="markdownIt-Anchor" href="#既然堆是共享的为什么在堆中会有内存不可见问题"></a> 既然堆是共享的，为什么在堆中会有内存不可见问题？</h3><p>这是因为现代计算机为了高效，往往会在高速缓存区中缓存共享变量，因为cpu访问缓存区比访问内存要快得多。</p><blockquote><p>线程之间的共享变量存在主内存中，每个线程都有一个私有的本地内存，存储了该线程以读、写共享变量的副本。本地内存是Java内存模型的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器等。</p></blockquote><p>Java线程之间的通信由Java内存模型（简称JMM）控制，从抽象的角度来说，JMM定义了线程和主内存之间的抽象关系。JMM的抽象示意图如图所示：</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/ing/JMM%E6%8A%BD%E8%B1%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="" /></p><p>从图中可以看出： 1. 所有的共享变量都存在主内存中。 2. 每个线程都保存了一份该线程使用到的共享变量的副本。 3. 如果线程A与线程B之间要通信的话，必须经历下面2个步骤： 1. 线程A将本地内存A中更新过的共享变量刷新到主内存中去。 2. 线程B到主内存中去读取线程A之前已经更新过的共享变量。</p><p><strong>所以，线程A无法直接访问线程B的工作内存，线程间通信必须经过主内存。</strong></p><p>注意，根据JMM的规定，<strong>线程对共享变量的所有操作都必须在自己的本地内存中进行，不能直接从主内存中读取</strong>。</p><p>所以线程B并不是直接去主内存中读取共享变量的值，而是先在本地内存B中找到这个共享变量，发现这个共享变量已经被更新了，然后本地内存B去主内存中读取这个共享变量的新值，并拷贝到本地内存B中，最后线程B再读取本地内存B中的新值。</p><p>那么怎么知道这个共享变量的被其他线程更新了呢？这就是JMM的功劳了，也是JMM存在的必要性之一。<strong>JMM通过控制主内存与每个线程的本地内存之间的交互，来提供内存可见性保证</strong>。</p><blockquote><p>Java中的volatile关键字可以保证多线程操作共享变量的可见性以及禁止指令重排序，synchronized关键字不仅保证可见性，同时也保证了原子性（互斥性）。在更底层，JMM通过内存屏障来实现内存的可见性以及禁止重排序。为了程序员的方便理解，提出了happens-before，它更加的简单易懂，从而避免了去理解内存可见性而去学习复杂的重排序规则以及这些规则的具体实现方法。</p></blockquote><h3 id="jmm与java内存区域划分的区别与联系"><a class="markdownIt-Anchor" href="#jmm与java内存区域划分的区别与联系"></a> JMM与Java内存区域划分的区别与联系</h3><p>上面两小节分别提到了JMM和Java运行时内存区域的划分，这两者既有差别又有联系：</p><ul><li><p>区别</p><p>两者是不同的概念层次。JMM是抽象的，他是用来描述一组规则，通过这个规则来控制各个变量的访问方式，围绕原子性、有序性、可见性等展开的。而Java运行时内存的划分是具体的，是JVM运行Java程序时，必要的内存划分。</p></li><li><p>联系</p><p>都存在私有数据区域和共享数据区域。一般来说，JMM中的主内存属于共享数据区域，他是包含了堆和方法区；同样，JMM中的本地内存属于私有数据区域，包含了程序计数器、本地方法栈、虚拟机栈。</p></li></ul><p><strong>实际上，他们表达的是同一种含义，这里不做区分。</strong></p><h2 id="2重排序和happens-before"><a class="markdownIt-Anchor" href="#2重排序和happens-before"></a> 2.重排序和happens-before</h2><h3 id="什么是重排序"><a class="markdownIt-Anchor" href="#什么是重排序"></a> 什么是重排序？</h3><p>计算机在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排。</p><p><strong>为什么指令重排序可以提高性能？</strong></p><p>简单地说，每一个指令都会包含多个步骤，每个步骤可能使用不同的硬件。因此，<strong>流水线技术</strong>产生了，它的原理是指令1还没有执行完，就可以开始执行指令2，而不用等到指令1执行结束之后再执行指令2，这样就大大提高了效率。</p><p>但是，流水线技术最害怕<strong>中断</strong>，恢复中断的代价是比较大的，所以我们要想尽办法不让流水线中断。指令重排就是减少中断的一种技术。</p><p>我们分析一下下面这个代码的执行情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = b + c;</span><br><span class="line">d = e - f ;</span><br></pre></td></tr></table></figure><p>先加载b、c（<strong>注意，即有可能先加载b，也有可能先加载c</strong>），但是在执行add(b,c)的时候，需要等待b、c装载结束才能继续执行，也就是增加了停顿，那么后面的指令也会依次有停顿,这降低了计算机的执行效率。</p><p>为了减少这个停顿，我们可以先加载e和f,然后再去加载add(b,c),这样做对程序（串行）是没有影响的,但却减少了停顿。既然add(b,c)需要停顿，那还不如去做一些有意义的事情。</p><p>综上所述，<strong>指令重排对于提高CPU处理性能十分必要。虽然由此带来了乱序的问题，但是这点牺牲是值得的。</strong></p><p>指令重排一般分为以下三种：</p><ul><li><p><strong>编译器优化重排</strong></p><p>编译器在<strong>不改变单线程程序语义</strong>的前提下，可以重新安排语句的执行顺序。</p></li><li><p><strong>指令并行重排</strong></p><p>现代处理器采用了指令级并行技术来将多条指令重叠执行。如果<strong>不存在数据依赖性</strong>(即后一个执行的语句无需依赖前面执行的语句的结果)，处理器可以改变语句对应的机器指令的执行顺序。</p></li><li><p><strong>内存系统重排</strong></p><p>由于处理器使用缓存和读写缓存冲区，这使得加载(load)和存储(store)操作看上去可能是在乱序执行，因为三级缓存的存在，导致内存与缓存的数据同步存在时间差。</p></li></ul><p><strong>指令重排可以保证串行语义一致，但是没有义务保证多线程间的语义也一致</strong>。所以在多线程下，指令重排序可能会导致一些问题。</p><h3 id="顺序一致性模型与jmm的保证"><a class="markdownIt-Anchor" href="#顺序一致性模型与jmm的保证"></a> 顺序一致性模型与JMM的保证</h3><p>顺序一致性模型是一个<strong>理论参考模型</strong>，内存模型在设计的时候都会以顺序一致性内存模型作为参考。</p><h3 id="数据竞争与顺序一致性"><a class="markdownIt-Anchor" href="#数据竞争与顺序一致性"></a> 数据竞争与顺序一致性</h3><p>当程序未正确同步的时候，就可能存在数据竞争。</p><blockquote><p>数据竞争：在一个线程中写一个变量，在另一个线程读同一个变量，并且写和读没有通过同步来排序。</p></blockquote><p>如果程序中包含了数据竞争，那么运行的结果往往充满了<strong>不确定性</strong>，比如读发生在了写之前，可能就会读到错误的值；如果一个线程程序能够正确同步，那么就不存在数据竞争。</p><p>Java内存模型（JMM）对于正确同步多线程程序的内存一致性做了以下保证：</p><blockquote><p><strong>如果程序是正确同步的，程序的执行将具有顺序一致性</strong>。 即程序的执行结果和该程序在顺序一致性模型中执行的结果相同。</p></blockquote><p>这里的同步包括了使用<code>volatile</code>、<code>final</code>、<code>synchronized</code>等关键字来实现<strong>多线程下的同步</strong>。</p><p>如果程序员没有正确使用<code>volatile</code>、<code>final</code>、<code>synchronized</code>，那么即便是使用了同步（单线程下的同步），JMM也不会有内存可见性的保证，可能会导致你的程序出错，并且具有不可重现性，很难排查。</p><p>所以如何正确使用<code>volatile</code>、<code>final</code>、<code>synchronized</code>，是我们应该去了解的。后面会有专门的章节介绍这几个关键字的内存语义及使用。</p><h3 id="顺序一致性模型"><a class="markdownIt-Anchor" href="#顺序一致性模型"></a> 顺序一致性模型</h3><p>顺序一致性内存模型是一个<strong>理想化的理论参考模型</strong>，它为我们提供了极强的内存可见性保证。</p><p>顺序一致性模型有两大特性：</p><ul><li>一个线程中的所有操作必须按照程序的顺序（即Java代码的顺序）来执行。</li><li>不管程序是否同步，所有线程都只能看到一个单一的操作执行顺序。即在顺序一致性模型中，每个操作必须是<strong>原子性的，且立刻对所有线程可见</strong>。</li></ul><blockquote><p>关于原子操作这里先不做阐述</p></blockquote><p>为了理解这两个特性，我们举个例子，假设有两个线程A和B并发执行，线程A有3个操作，他们在程序中的顺序是A1-&gt;A2-&gt;A3，线程B也有3个操作，B1-&gt;B2-&gt;B3。</p><p>假设<strong>正确使用了同步</strong>，A线程的3个操作执行后释放锁，B线程获取同一个锁。那么在<strong>顺序一致性模型</strong>中的执行效果如下所示：</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/ing/%E6%AD%A3%E7%A1%AE%E5%90%8C%E6%AD%A5.png" alt="" /></p><p>操作的执行整体上有序，并且两个线程都只能看到这个执行顺序。</p><p>假设<strong>没有使用同步</strong>，那么在<strong>顺序一致性模型</strong>中的执行效果如下所示：</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/ing/%E6%B2%A1%E6%9C%89%E6%AD%A3%E7%A1%AE%E5%90%8C%E6%AD%A5.png" alt="" /></p><p>操作的执行整体上无序，但是两个线程都只能看到这个执行顺序。之所以可以得到这个保证，是因为顺序一致性模型中的<strong>每个操作必须立即对任意线程可见</strong>。</p><p><strong>但是JMM没有这样的保证。</strong></p><p>比如，在当前线程把写过的数据缓存在本地内存中，在没有刷新到主内存之前，这个写操作仅对当前线程可见；从其他线程的角度来观察，这个写操作根本没有被当前线程所执行。只有当前线程把本地内存中写过的数据刷新到主内存之后，这个写操作才对其他线程可见。在这种情况下，当前线程和其他线程看到的执行顺序是不一样的。</p><h3 id="jmm中同步程序的顺序一致性效果"><a class="markdownIt-Anchor" href="#jmm中同步程序的顺序一致性效果"></a> JMM中同步程序的顺序一致性效果</h3><p>在顺序一致性模型中，所有操作完全按照程序的顺序串行执行。但是JMM中，临界区内（同步块或同步方法中）的代码可以发生重排序（但不允许临界区内的代码“逃逸”到临界区之外，因为会破坏锁的内存语义）。</p><p>虽然线程A在临界区做了重排序，但是因为锁的特性，线程B无法观察到线程A在临界区的重排序。这种重排序既提高了执行效率，又没有改变程序的执行结果。</p><p>同时，JMM会在退出临界区和进入临界区做特殊的处理，使得在临界区内程序获得与顺序一致性模型相同的内存视图。</p><p><strong>由此可见，JMM的具体实现方针是：在不改变（正确同步的）程序执行结果的前提下，尽量为编译期和处理器的优化打开方便之门</strong>。</p><h3 id="jmm中未同步程序的顺序一致性效果"><a class="markdownIt-Anchor" href="#jmm中未同步程序的顺序一致性效果"></a> JMM中未同步程序的顺序一致性效果</h3><p>对于未同步的多线程程序，JMM只提供<strong>最小安全性</strong>：线程读取到的值，要么是之前某个线程写入的值，要么是默认值，不会无中生有。</p><p>为了实现这个安全性，JVM在堆上分配对象时，首先会对内存空间清零，然后才会在上面分配对象（这两个操作是同步的）。</p><p><strong>JMM没有保证未同步程序的执行结果与该程序在顺序一致性中执行结果一致。因为如果要保证执行结果一致，那么JMM需要禁止大量的优化，对程序的执行性能会产生很大的影响。</strong></p><p>未同步程序在JMM和顺序一致性内存模型中的执行特性有如下差异： 1. 顺序一致性保证单线程内的操作会按程序的顺序执行；JMM不保证单线程内的操作会按程序的顺序执行。（因为重排序，但是JMM保证单线程下的重排序不影响执行结果） 2. 顺序一致性模型保证所有线程只能看到一致的操作执行顺序，而JMM不保证所有线程能看到一致的操作执行顺序。（因为JMM不保证所有操作立即可见） 3. JMM不保证对64位的long型和double型变量的写操作具有原子性，而顺序一致性模型保证对所有的内存读写操作都具有原子性。</p><h3 id="happens-before"><a class="markdownIt-Anchor" href="#happens-before"></a> happens-before</h3><h3 id="什么是happens-before"><a class="markdownIt-Anchor" href="#什么是happens-before"></a> 什么是happens-before?</h3><p>一方面，程序员需要JMM提供一个强的内存模型来编写代码；另一方面，编译器和处理器希望JMM对它们的束缚越少越好，这样它们就可以最可能多的做优化来提高性能，希望的是一个弱的内存模型。</p><p>JMM考虑了这两种需求，并且找到了平衡点，对编译器和处理器来说，<strong>只要不改变程序的执行结果（单线程程序和正确同步了的多线程程序），编译器和处理器怎么优化都行。</strong></p><p>而对于程序员，JMM提供了<strong>happens-before规则</strong>（JSR-133规范），满足了程序员的需求——**简单易懂，并且提供了足够强的内存可见性保证。**换言之，程序员只要遵循happens-before规则，那他写的程序就能保证在JMM中具有强的内存可见性。</p><p>JMM使用happens-before的概念来定制两个操作之间的执行顺序。这两个操作可以在一个线程以内，也可以是不同的线程之间。因此，JMM可以通过happens-before关系向程序员提供跨线程的内存可见性保证。</p><p>happens-before关系的定义如下： 1. 如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。 2. <strong>两个操作之间存在happens-before关系，并不意味着Java平台的具体实现必须要按照happens-before关系指定的顺序来执行。如果重排序之后的执行结果，与按happens-before关系来执行的结果一致，那么JMM也允许这样的重排序。</strong></p><p>happens-before关系本质上和as-if-serial语义是一回事。</p><p>as-if-serial语义保证单线程内重排序后的执行结果和程序代码本身应有的结果是一致的，happens-before关系保证正确同步的多线程程序的执行结果不被重排序改变。</p><p>总之，<strong>如果操作A happens-before操作B，那么操作A在内存上所做的操作对操作B都是可见的，不管它们在不在一个线程。</strong></p><h3 id="天然的happens-before关系"><a class="markdownIt-Anchor" href="#天然的happens-before关系"></a> 天然的happens-before关系</h3><p>在Java中，有以下天然的happens-before关系：</p><ul><li>程序顺序规则：一个线程中的每一个操作，happens-before于该线程中的任意后续操作。</li><li>监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li><li>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li><li>传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</li><li>start规则：如果线程A执行操作ThreadB.start()启动线程B，那么A线程的ThreadB.start（）操作happens-before于线程B中的任意操作、</li><li>join规则：如果线程A执行操作ThreadB.join（）并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。</li></ul><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a = 1; // A操作</span><br><span class="line">int b = 2; // B操作</span><br><span class="line">int sum = a + b;// C 操作</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure><p>根据以上介绍的happens-before规则，假如只有一个线程，那么不难得出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&gt; A happens-before B </span><br><span class="line">2&gt; B happens-before C </span><br><span class="line">3&gt; A happens-before C</span><br></pre></td></tr></table></figure><p>注意，真正在执行指令的时候，其实JVM有可能对操作A &amp; B进行重排序，因为无论先执行A还是B，他们都对对方是可见的，并且不影响执行结果。</p><p>如果这里发生了重排序，这在视觉上违背了happens-before原则，但是JMM是允许这样的重排序的。</p><p>所以，我们只关心happens-before规则，不用关心JVM到底是怎样执行的。只要确定操作A happens-before操作B就行了。</p><p>重排序有两类，JMM对这两类重排序有不同的策略：</p><ul><li>会改变程序执行结果的重排序，比如 A -&gt; C，JMM要求编译器和处理器都不许禁止这种重排序。</li><li>不会改变程序执行结果的重排序，比如 A -&gt; B，JMM对编译器和处理器不做要求，允许这种重排序。</li></ul><h2 id="3volatile"><a class="markdownIt-Anchor" href="#3volatile"></a> 3.Volatile</h2><p>之前在我们有说过要好好来聊聊Volatile，由于上次篇幅有限所以就不了了之了（毕竟上次写了一万多字啊</p><p>嗯现在我们来看看Volatile</p><p>Volatile是什么啊，我们为什么要用Volatile，仔细想想啊如果有时我们只是 为了简单的读写一两个实例字段而使用同步的话看起来好像有点划不来。毕竟什么地方能出错呢，可是现代处理器和编译器出错的可能非常大。</p><p>原因如下：</p><ul><li>有处理器的计算机能够暂时在寄存器或者本地缓存中保存内存值，于是造成的结果就是运行在不同的处理器上的线程可能看到的是同一个内存位置会有不同的值。</li><li>虽然我们可以改变指令的顺序使吞吐量达到最大化，编译器不会选择可能改变代码语义的顺序，但是编译器有一个假定，认为只有在代码中有显式修改指令时才会改变，然而，特殊情况是，内存值有可能被线程改变。</li></ul><p>这种时候我们使用锁来保护可能会被多线程访问的代码，这个时候这种问题显然不存在。Volatile则为实例字段的同步访问供了一种免锁机制。</p><h3 id="内存可见性"><a class="markdownIt-Anchor" href="#内存可见性"></a> 内存可见性</h3><p>在Java内存模型那一章我们介绍了JMM有一个主内存，每个线程有自己私有的工作内存，工作内存中保存了一些变量在主内存的拷贝。</p><p><strong>内存可见性，指的是线程之间的可见性，当一个线程修改了共享变量时，另一个线程可以读取到这个修改后的值</strong>。</p><p>之前说了两个概念</p><h3 id="重排序"><a class="markdownIt-Anchor" href="#重排序"></a> 重排序</h3><p>为优化程序性能，对原有的指令执行顺序进行优化重新排序。重排序可能发生在多个阶段，比如编译重排序、CPU重排序等。</p><h3 id="happens-before规则"><a class="markdownIt-Anchor" href="#happens-before规则"></a> happens-before规则</h3><p>是一个给程序员使用的规则，只要程序员在写代码的时候遵循happens-before规则，JVM就能保证指令在多线程之间的顺序性符合程序员的预期。</p><p>那么问题来了Volatile的呢</p><h2 id="volatile的内存语义"><a class="markdownIt-Anchor" href="#volatile的内存语义"></a> volatile的内存语义</h2><p>在Java中，volatile关键字有特殊的内存语义。volatile主要有以下两个功能：</p><ul><li>保证变量的<strong>内存可见性</strong></li><li>禁止volatile变量与普通变量<strong>重排序</strong>（JSR133提出，Java 5 开始才有这个“增强的volatile内存语义”）</li></ul><h3 id="内存可见性-2"><a class="markdownIt-Anchor" href="#内存可见性-2"></a> 内存可见性</h3><p>以一段示例代码开始：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileExample</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writer</span><span class="params">()</span> &#123;</span><br><span class="line">        a = <span class="number">1</span>; <span class="comment">// step 1</span></span><br><span class="line">        flag = <span class="literal">true</span>; <span class="comment">// step 2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123; <span class="comment">// step 3</span></span><br><span class="line">            System.out.println(a); <span class="comment">// step 4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码里，我们使用<code>volatile</code>关键字修饰了一个<code>boolean</code>类型的变量<code>flag</code>。</p><p>所谓内存可见性，指的是当一个线程对<code>volatile</code>修饰的变量进行<strong>写操作</strong>（比如step 2）时，JMM会立即把该线程对应的本地内存中的共享变量的值刷新到主内存；当一个线程对<code>volatile</code>修饰的变量进行<strong>读操作</strong>（比如step 3）时，JMM会把立即该线程对应的本地内存置为无效，从主内存中读取共享变量的值。</p><blockquote><p>在这一点上，volatile与锁具有相同的内存效果，volatile变量的写和锁的释放具有相同的内存语义，volatile变量的读和锁的获取具有相同的内存语义。</p></blockquote><p>假设在时间线上，线程A先自行方法<code>writer</code>方法，线程B后执行<code>reader</code>方法。那必然会有下图：</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/ing/volatile%E5%86%85%E5%AD%98%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="" /></p><p>而如果<code>flag</code>变量<strong>没有</strong>用<code>volatile</code>修饰，在step 2，线程A的本地内存里面的变量就不会立即更新到主内存，那随后线程B也同样不会去主内存拿最新的值，仍然使用线程B本地内存缓存的变量的值<code>a = 0，flag = false</code></p><h3 id="禁止重排序"><a class="markdownIt-Anchor" href="#禁止重排序"></a> 禁止重排序</h3><p>在JSR-133之前的旧的Java内存模型中，是允许volatile变量与普通变量重排序的。那上面的案例中，可能就会被重排序成下列时序来执行：</p><ol><li>线程A写volatile变量，step 2，设置flag为true；</li><li>线程B读同一个volatile，step 3，读取到flag为true；</li><li>线程B读普通变量，step 4，读取到 a = 0；</li><li>线程A修改普通变量，step 1，设置 a = 1；</li></ol><p>可见，如果volatile变量与普通变量发生了重排序，虽然volatile变量能保证内存可见性，也可能导致普通变量读取错误。</p><p>所以在旧的内存模型中，volatile的写-读就不能与锁的释放-获取具有相同的内存语义了。为了提供一种比锁更轻量级的<strong>线程间的通信机制</strong>，<strong>JSR-133</strong>专家组决定增强volatile的内存语义：严格限制编译器和处理器对volatile变量与普通变量的重排序。</p><p>编译器还好说，JVM是怎么还能限制处理器的重排序的呢？它是通过<strong>内存屏障</strong>来实现的。</p><p>什么是内存屏障？硬件层面，内存屏障分两种：读屏障（Load Barrier）和写屏障（Store Barrier）。内存屏障有两个作用：</p><ol><li>阻止屏障两侧的指令重排序；</li><li>强制把写缓冲区/高速缓存中的脏数据等写回主内存，或者让缓存中相应的数据失效。</li></ol><blockquote><p>注意这里的缓存主要指的是CPU缓存，如L1，L2等</p></blockquote><p>编译器在<strong>生成字节码时</strong>，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。编译器选择了一个<strong>比较保守的JMM内存屏障插入策略</strong>，这样可以保证在任何处理器平台，任何程序中都能得到正确的volatile内存语义。这个策略是：</p><ul><li>在每个volatile写操作前插入一个StoreStore屏障；</li><li>在每个volatile写操作后插入一个StoreLoad屏障；</li><li>在每个volatile读操作后插入一个LoadLoad屏障；</li><li>在每个volatile读操作后再插入一个LoadStore屏障。</li></ul><p>大概示意图是这个样子：</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/ing/%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C.png" alt="" /></p><blockquote><p>再逐个解释一下这几个屏障。注：下述Load代表读操作，Store代表写操作</p><p><strong>LoadLoad屏障</strong>：对于这样的语句Load1; LoadLoad; Load2，在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。<br /><strong>StoreStore屏障</strong>：对于这样的语句Store1; StoreStore; Store2，在Store2及后续写入操作执行前，这个屏障会吧Store1强制刷新到内存，保证Store1的写入操作对其它处理器可见。<br /><strong>LoadStore屏障</strong>：对于这样的语句Load1; LoadStore; Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。<br /><strong>StoreLoad屏障</strong>：对于这样的语句Store1; StoreLoad; Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。它的开销是四种屏障中最大的（冲刷写缓冲器，清空无效化队列）。在大多数处理器的实现中，这个屏障是个万能屏障，兼具其它三种内存屏障的功能</p></blockquote><p>对于连续多个volatile变量读或者连续多个volatile变量写，编译器做了一定的优化来提高性能，比如：</p><blockquote><p>第一个volatile读;</p><p>LoadLoad屏障；</p><p>第二个volatile读；</p><p>LoadStore屏障</p></blockquote><p>再介绍一下volatile与普通变量的重排序规则:</p><ol><li>如果第一个操作是volatile读，那无论第二个操作是什么，都不能重排序；</li><li>如果第二个操作是volatile写，那无论第一个操作是什么，都不能重排序；</li><li>如果第一个操作是volatile写，第二个操作是volatile读，那不能重排序。</li></ol><p>举个例子，我们在案例中step 1，是普通变量的写，step 2是volatile变量的写，那符合第2个规则，这两个steps不能重排序。而step 3是volatile变量读，step 4是普通变量读，符合第1个规则，同样不能重排序。</p><p>但如果是下列情况：第一个操作是普通变量读，第二个操作是volatile变量读，那是可以重排序的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 声明普通变量</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 声明volatile变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下两个变量的读操作是可以重排序的</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a; <span class="comment">// 普通变量读</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">j</span> <span class="operator">=</span> flag; <span class="comment">// volatile变量读</span></span><br></pre></td></tr></table></figure><h3 id="volatile的用途"><a class="markdownIt-Anchor" href="#volatile的用途"></a> volatile的用途</h3><p>从volatile的内存语义上来看，volatile可以保证内存可见性且禁止重排序。</p><p>在保证内存可见性这一点上，volatile有着与锁相同的内存语义，所以可以作为一个“轻量级”的锁来使用。但由于volatile仅仅保证对单个volatile变量的读/写具有原子性，而锁可以保证整个<strong>临界区代码</strong>的执行具有原子性。所以<strong>在功能上，锁比volatile更强大；在性能上，volatile更有优势</strong>。</p><p>在禁止重排序这一点上，volatile也是非常有用的。比如我们熟悉的单例模式，其中有一种实现方式是“双重锁检查”，比如这样的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance; <span class="comment">// 不使用volatile关键字</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 双重锁检验</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123; <span class="comment">// 第7行</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>(); <span class="comment">// 第10行</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这里的变量声明不使用volatile关键字，是可能会发生错误的。它可能会被重排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">instance = new Singleton(); // 第10行</span><br><span class="line"></span><br><span class="line">// 可以分解为以下三个步骤</span><br><span class="line">1 memory=allocate();// 分配内存 相当于c的malloc</span><br><span class="line">2 ctorInstanc(memory) //初始化对象</span><br><span class="line">3 s=memory //设置s指向刚分配的地址</span><br><span class="line"></span><br><span class="line">// 上述三个步骤可能会被重排序为 1-3-2，也就是：</span><br><span class="line">1 memory=allocate();// 分配内存 相当于c的malloc</span><br><span class="line">3 s=memory //设置s指向刚分配的地址</span><br><span class="line">2 ctorInstanc(memory) //初始化对象</span><br></pre></td></tr></table></figure><p>而一旦假设发生了这样的重排序，比如线程A在第10行执行了步骤1和步骤3，但是步骤2还没有执行完。这个时候另一个线程B执行到了第7行，它会判定instance不为空，然后直接返回了一个未初始化完成的instance！</p><p>所以JSR-133对volatile做了增强后，volatile的禁止重排序功能还是非常有用的。</p><h2 id="总之说了半天我们终于磕到锁了"><a class="markdownIt-Anchor" href="#总之说了半天我们终于磕到锁了"></a> 总之说了半天我们终于磕到锁了</h2><p>首先需要明确的一点是：<strong>Java多线程的锁都是基于对象的</strong>，Java中的每一个对象都可以作为一个锁。</p><p>还有一点需要注意的是，我们常听到的<strong>类锁</strong>其实也是对象锁。</p><p>Java类只有一个Class对象（可以有多个实例对象，多个实例共享这个Class对象），而Class对象也是特殊的Java对象。所以我们常说的类锁，其实就是Class对象的锁。</p><h3 id="synchronized关键字"><a class="markdownIt-Anchor" href="#synchronized关键字"></a> Synchronized关键字</h3><p>说到锁，我们通常会谈到<code>synchronized</code>这个关键字。它翻译成中文就是“同步”的意思。</p><p>我们通常使用<code>synchronized</code>关键字来给一段代码或一个方法上锁。它通常有以下三种形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键字在实例方法上，锁为当前实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">instanceLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字在静态方法上，锁为当前Class对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">classLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字在代码块上，锁为括号里面的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">blockLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里介绍一下“临界区”的概念。所谓“临界区”，指的是某一块代码区域，它同一时刻只能由一个线程执行。在上面的例子中，如果<code>synchronized</code>关键字在方法上，那临界区就是整个方法内部。而如果是使用synchronized代码块，那临界区就指的是代码块内部的区域。</p><p>通过上面的例子我们可以看到，下面这两个写法其实是等价的作用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键字在实例方法上，锁为当前实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">instanceLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字在代码块上，锁为括号里面的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">blockLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，下面这两个方法也应该是等价的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键字在静态方法上，锁为当前Class对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">classLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字在代码块上，锁为括号里面的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">blockLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.getClass()) &#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="几种锁"><a class="markdownIt-Anchor" href="#几种锁"></a> 几种锁</h3><p>Java 6 为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁“。在Java 6 以前，所有的锁都是”重量级“锁。所以在Java 6 及其以后，一个对象其实有四种锁状态，它们级别由低到高依次是：</p><ol><li>无锁状态</li><li>偏向锁状态</li><li>轻量级锁状态</li><li>重量级锁状态</li></ol><p>无锁就是没有对资源进行锁定，任何线程都可以尝试去修改它，这里就不再进行赘述。</p><p>几种锁会随着竞争情况逐渐升级，锁的升级很容易发生，但是锁降级发生的条件会比较苛刻，锁降级发生在Stop The World期间，当JVM进入安全点的时候，会检查是否有闲置的锁，然后进行降级。</p><blockquote><p>关于锁降级有两点说明：</p><p>1.不同于大部分文章说锁不能降级，实际上HotSpot JVM 是支持锁降级的</p><p>2.上面提到的Stop The World期间，以及安全点，这些知识是属于JVM的知识范畴，本文不做细讲。</p></blockquote><p>下面分别介绍这几种锁以及它们之间的升级。</p><p>youmingsama编辑中</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/ing/huima.png" alt="" /></p><p>呐呐呐youmingsama持续编辑中绘麻天下第一！！！是的呢</p><p>！！！！</p>]]></content>
      
      
      <categories>
          
          <category> print*,&quot;hello world!!!&quot; </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java!!! </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang杂耍大师混乱的笔记</title>
      <link href="/posts/8f098f8e/"/>
      <url>/posts/8f098f8e/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文截选至the way to go 中文版</p></blockquote><h2 id="从字符串中读取内容"><a class="markdownIt-Anchor" href="#从字符串中读取内容"></a> 从字符串中读取内容</h2><p>函数 <code>strings.NewReader(str)</code> 用于生成一个 <code>Reader</code> 并读取字符串中的内容，然后返回指向该 <code>Reader</code> 的指针，从其它类型读取内容的函数还有：</p><ul><li><code>Read()</code> 从 []byte 中读取内容。</li><li><code>ReadByte()</code> 和 <code>ReadRune()</code> 从字符串中读取下一个 byte 或者 rune。</li></ul><h2 id="字符串与其它类型的转换"><a class="markdownIt-Anchor" href="#字符串与其它类型的转换"></a> 字符串与其它类型的转换</h2><p>与字符串相关的类型转换都是通过 <code>strconv</code> 包实现的。</p><p>该包包含了一些变量用于获取程序运行的操作系统平台下 int 类型所占的位数，如：<code>strconv.IntSize</code>。</p><p>任何类型 <strong>T</strong> 转换为字符串总是成功的。</p><p>针对从数字类型转换到字符串，Go 提供了以下函数：</p><ul><li><code>strconv.Itoa(i int) string</code> 返回数字 i 所表示的字符串类型的十进制数。</li><li><code>strconv.FormatFloat(f float64, fmt byte, prec int, bitSize int) string</code> 将 64 位浮点型的数字转换为字符串，其中 <code>fmt</code> 表示格式（其值可以是 <code>'b'</code>、<code>'e'</code>、<code>'f'</code> 或 <code>'g'</code>），<code>prec</code> 表示精度，<code>bitSize</code> 则使用 32 表示 float32，用 64 表示 float64。</li></ul><p>将字符串转换为其它类型 <strong>tp</strong> 并不总是可能的，可能会在运行时抛出错误 <code>parsing &quot;…&quot;: invalid argument</code>。</p><p>针对从字符串类型转换为数字类型，Go 提供了以下函数：</p><ul><li><code>strconv.Atoi(s string) (i int, err error)</code> 将字符串转换为 int 型。</li><li><code>strconv.ParseFloat(s string, bitSize int) (f float64, err error)</code> 将字符串转换为 float64 型。</li></ul><p>利用多返回值的特性，这些函数会返回 2 个值，第 1 个是转换后的结果（如果转换成功），第 2 个是可能出现的错误，因此，我们一般使用以下形式来进行从字符串到其它类型的转换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val, err = strconv.Atoi(s)</span><br></pre></td></tr></table></figure><h1 id="时间和日期"><a class="markdownIt-Anchor" href="#时间和日期"></a> 时间和日期</h1><p><code>time</code> 包为我们提供了一个数据类型 <code>time.Time</code>（作为值使用）以及显示和测量时间和日期的功能函数。</p><p>当前时间可以使用 <code>time.Now()</code> 获取，或者使用 <code>t.Day()</code>、<code>t.Minute()</code> 等等来获取时间的一部分；你甚至可以自定义时间格式化字符串，例如： <code>fmt.Printf(&quot;%02d.%02d.%4d\n&quot;, t.Day(), t.Month(), t.Year())</code> 将会输出 <code>21.07.2011</code>。</p><p>Duration 类型表示两个连续时刻所相差的纳秒数，类型为 int64。Location 类型映射某个时区的时间，UTC 表示通用协调世界时间。</p><p>包中的一个预定义函数 <code>func (t Time) Format(layout string) string</code> 可以根据一个格式化字符串来将一个时间 t 转换为相应格式的字符串，你可以使用一些预定义的格式，如：<code>time.ANSIC</code> 或 <code>time.RFC822</code>。</p><p>一般的格式化设计是通过对于一个标准时间的格式化描述来展现的，这听起来很奇怪，但看下面这个例子你就会一目了然：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(t.Format(&quot;02 Jan 2006 15:04&quot;)) </span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21 Jul 2011 10:31</span><br></pre></td></tr></table></figure><p>其它有关时间操作的文档请参阅 <a href="http://golang.org/pkg/time/">官方文档</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> week time.Duration</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := time.Now()</span><br><span class="line">    fmt.Println(t) <span class="comment">// e.g. Wed Dec 21 09:52:14 +0100 RST 2011</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%02d.%02d.%4d\n&quot;</span>, t.Day(), t.Month(), t.Year())</span><br><span class="line">    <span class="comment">// 21.12.2011</span></span><br><span class="line">    t = time.Now().UTC()</span><br><span class="line">    fmt.Println(t) <span class="comment">// Wed Dec 21 08:52:14 +0000 UTC 2011</span></span><br><span class="line">    fmt.Println(time.Now()) <span class="comment">// Wed Dec 21 09:52:14 +0100 RST 2011</span></span><br><span class="line">    <span class="comment">// calculating times:</span></span><br><span class="line">    week = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span> * <span class="number">1e9</span> <span class="comment">// must be in nanosec</span></span><br><span class="line">    week_from_now := t.Add(time.Duration(week))</span><br><span class="line">    fmt.Println(week_from_now) <span class="comment">// Wed Dec 28 08:52:14 +0000 UTC 2011</span></span><br><span class="line">    <span class="comment">// formatting times:</span></span><br><span class="line">    fmt.Println(t.Format(time.RFC822)) <span class="comment">// 21 Dec 11 0852 UTC</span></span><br><span class="line">    fmt.Println(t.Format(time.ANSIC)) <span class="comment">// Wed Dec 21 08:56:34 2011</span></span><br><span class="line">    <span class="comment">// The time must be 2006-01-02 15:04:05</span></span><br><span class="line">    fmt.Println(t.Format(<span class="string">&quot;02 Jan 2006 15:04&quot;</span>)) <span class="comment">// 21 Dec 2011 08:52</span></span><br><span class="line">    s := t.Format(<span class="string">&quot;20060102&quot;</span>)</span><br><span class="line">    fmt.Println(t, <span class="string">&quot;=&gt;&quot;</span>, s)</span><br><span class="line">    <span class="comment">// Wed Dec 21 08:52:14 +0000 UTC 2011 =&gt; 20111221</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的结果已经写在每行 <code>//</code> 的后面。</p><p>如果你需要在应用程序在经过一定时间或周期执行某项任务（事件处理的特例），则可以使用 <code>time.After</code> 或者 <code>time.Ticker</code> 另外，<code>time.Sleep（d Duration）</code> 可以实现对某个进程（实质上是 goroutine）时长为 d 的暂停。</p><h1 id="测试多返回值函数的错误"><a class="markdownIt-Anchor" href="#测试多返回值函数的错误"></a> 测试多返回值函数的错误</h1><p>Go 语言的函数经常使用两个返回值来表示执行是否成功：返回某个值以及 true 表示成功；返回零值（或 nil）和 false 表示失败（第 4.4 节）。当不使用 true 或 false 的时候，也可以使用一个 error 类型的变量来代替作为第二个返回值：成功执行的话，error 的值为 nil，否则就会包含相应的错误信息（Go 语言中的错误类型为 error: <code>var err error</code>，我们将会在第 13 章进行更多地讨论）。这样一来，就很明显需要用一个 if 语句来测试执行结果；由于其符号的原因，这样的形式又称之为 comma,ok 模式（pattern）。</p><p>在第 4.7 节的程序 <code>string_conversion.go</code> 中，函数 <code>strconv.Atoi</code> 的作用是将一个字符串转换为一个整数。之前我们忽略了相关的错误检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anInt, _ = strconv.Atoi(origStr)</span><br></pre></td></tr></table></figure><p>如果 origStr 不能被转换为整数，anInt 的值会变成 0 而 <code>_</code> 无视了错误，程序会继续运行。</p><p>这样做是非常不好的：程序应该在最接近的位置检查所有相关的错误，至少需要暗示用户有错误发生并对函数进行返回，甚至中断程序。</p><p>我们在第二个版本中对代码进行了改进：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> orig <span class="type">string</span> = <span class="string">&quot;ABC&quot;</span></span><br><span class="line">    <span class="comment">// var an int</span></span><br><span class="line">    <span class="keyword">var</span> newS <span class="type">string</span></span><br><span class="line">    <span class="comment">// var err error</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;The size of ints is: %d\n&quot;</span>, strconv.IntSize)  </span><br><span class="line">    <span class="comment">// anInt, err = strconv.Atoi(origStr)</span></span><br><span class="line">    an, err := strconv.Atoi(orig)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;orig %s is not an integer - exiting with error\n&quot;</span>, orig)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125; </span><br><span class="line">    fmt.Printf(<span class="string">&quot;The integer is %d\n&quot;</span>, an)</span><br><span class="line">    an = an + <span class="number">5</span></span><br><span class="line">    newS = strconv.Itoa(an)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;The new string is: %s\n&quot;</span>, newS)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是测试 err 变量是否包含一个真正的错误（<code>if err != nil</code>）的习惯用法。如果确实存在错误，则会打印相应的错误信息然后通过 return 提前结束函数的执行。我们还可以使用携带返回值的 return 形式，例如 <code>return err</code>。这样一来，函数的调用者就可以检查函数执行过程中是否存在错误了。</p><p><strong>习惯用法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">value, err := pack1.Function1(param1)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;An error occured in pack1.Function1 with parameter %v&quot;</span>, param1)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 未发生错误，继续执行：</span></span><br></pre></td></tr></table></figure><p>由于本例的函数调用者属于 main 函数，所以程序会直接停止运行。</p><p>如果我们想要在错误发生的同时终止程序的运行，我们可以使用 <code>os</code> 包的 <code>Exit</code> 函数：</p><p><strong>习惯用法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Program stopping with error %v&quot;</span>, err)</span><br><span class="line">    os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（此处的退出代码 1 可以使用外部脚本获取到）</p><p>有时候，你会发现这种习惯用法被连续重复地使用在某段代码中。</p><p>当没有错误发生时，代码继续运行就是唯一要做的事情，所以 if 语句块后面不需要使用 else 分支。</p><p>示例 2：我们尝试通过 <code>os.Open</code> 方法打开一个名为 <code>name</code> 的只读文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">doSomething(f) <span class="comment">// 当没有错误发生时，文件对象被传入到某个函数中</span></span><br><span class="line">doSomething</span><br></pre></td></tr></table></figure><p>示例 3：可以将错误的获取放置在 if 语句的初始化部分：</p><p><strong>习惯用法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := file.Chmod(<span class="number">0664</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例 4：或者将 ok-pattern 的获取放置在 if 语句的初始化部分，然后进行判断：</p><p><strong>习惯用法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> value, ok := readData(); ok &#123;</span><br><span class="line">…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>如果您像下面一样，没有为多返回值的函数准备足够的变量来存放结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mySqrt</span><span class="params">(f <span class="type">float64</span>)</span></span> (v <span class="type">float64</span>, ok <span class="type">bool</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123; <span class="keyword">return</span> &#125; <span class="comment">// error case</span></span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(f),<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := mySqrt(<span class="number">25.0</span>)</span><br><span class="line">    fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您会得到一个编译错误：<code>multiple-value mySqrt() in single-value context</code>。</p><p>正确的做法是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t, ok := mySqrt(<span class="number">25.0</span>)</span><br><span class="line"><span class="keyword">if</span> ok &#123; fmt.Println(t) &#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项 2</strong></p><p>当您将字符串转换为整数时，且确定转换一定能够成功时，可以将 <code>Atoi</code> 函数进行一层忽略错误的封装：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">atoi</span> <span class="params">(s <span class="type">string</span>)</span></span> (n <span class="type">int</span>) &#123;</span><br><span class="line">    n, _ = strconv.Atoi(s)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，<code>fmt</code> 包最简单的打印函数也有 2 个返回值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count, err := fmt.Println(x) <span class="comment">// number of bytes printed, nil or 0, error</span></span><br></pre></td></tr></table></figure><p>当打印到控制台时，可以将该函数返回的错误忽略；但当输出到文件流、网络流等具有不确定因素的输出对象时，应该始终检查是否有错误发生</p><h2 id="or-range-结构"><a class="markdownIt-Anchor" href="#or-range-结构"></a> or-range 结构</h2><p>这是 Go 特有的一种的迭代结构，您会发现它在许多情况下都非常有用。它可以迭代任何一个集合（包括数组和 map，详见第 7 和 8 章）。语法上很类似其它语言中 foreach 语句，但您依旧可以获得每次迭代所对应的索引。一般形式为：<code>for ix, val := range coll &#123; &#125;</code>。</p><p>要注意的是，<code>val</code> 始终为集合中对应索引的值拷贝，因此它一般只具有只读性质，对它所做的任何修改都不会影响到集合中原有的值（<strong>译者注：如果 <code>val</code> 为指针，则会产生指针的拷贝，依旧可以修改集合中的原值</strong>）。一个字符串是 Unicode 编码的字符（或称之为 <code>rune</code>）集合，因此您也可以用它迭代字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for pos, char := range str &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个 rune 字符和索引在 for-range 循环中是一一对应的。它能够自动根据 UTF-8 规则识别 Unicode 编码的字符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">&quot;Go is a beautiful language!&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;The length of str is: %d\n&quot;</span>, <span class="built_in">len</span>(str))</span><br><span class="line">    <span class="keyword">for</span> pos, char := <span class="keyword">range</span> str &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Character on position %d is: %c \n&quot;</span>, pos, char)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">    str2 := <span class="string">&quot;Chinese: 日本語&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;The length of str2 is: %d\n&quot;</span>, <span class="built_in">len</span>(str2))</span><br><span class="line">    <span class="keyword">for</span> pos, char := <span class="keyword">range</span> str2 &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;character %c starts at byte position %d\n&quot;</span>, char, pos)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">    fmt.Println(<span class="string">&quot;index int(rune) rune    char bytes&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> index, <span class="type">rune</span> := <span class="keyword">range</span> str2 &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%-2d      %d      %U &#x27;%c&#x27; % X\n&quot;</span>, index, <span class="type">rune</span>, <span class="type">rune</span>, <span class="type">rune</span>, []<span class="type">byte</span>(<span class="type">string</span>(<span class="type">rune</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">The length of str is: 27</span><br><span class="line">Character on position 0 is: G </span><br><span class="line">Character on position 1 is: o </span><br><span class="line">Character on position 2 is:   </span><br><span class="line">Character on position 3 is: i </span><br><span class="line">Character on position 4 is: s </span><br><span class="line">Character on position 5 is:   </span><br><span class="line">Character on position 6 is: a </span><br><span class="line">Character on position 7 is:   </span><br><span class="line">Character on position 8 is: b </span><br><span class="line">Character on position 9 is: e </span><br><span class="line">Character on position 10 is: a </span><br><span class="line">Character on position 11 is: u </span><br><span class="line">Character on position 12 is: t </span><br><span class="line">Character on position 13 is: i </span><br><span class="line">Character on position 14 is: f </span><br><span class="line">Character on position 15 is: u </span><br><span class="line">Character on position 16 is: l </span><br><span class="line">Character on position 17 is:   </span><br><span class="line">Character on position 18 is: l </span><br><span class="line">Character on position 19 is: a </span><br><span class="line">Character on position 20 is: n </span><br><span class="line">Character on position 21 is: g </span><br><span class="line">Character on position 22 is: u </span><br><span class="line">Character on position 23 is: a </span><br><span class="line">Character on position 24 is: g </span><br><span class="line">Character on position 25 is: e </span><br><span class="line">Character on position 26 is: ! </span><br><span class="line"></span><br><span class="line">The length of str2 is: 18</span><br><span class="line">character C starts at byte position 0</span><br><span class="line">character h starts at byte position 1</span><br><span class="line">character i starts at byte position 2</span><br><span class="line">character n starts at byte position 3</span><br><span class="line">character e starts at byte position 4</span><br><span class="line">character s starts at byte position 5</span><br><span class="line">character e starts at byte position 6</span><br><span class="line">character : starts at byte position 7</span><br><span class="line">character   starts at byte position 8</span><br><span class="line">character 日 starts at byte position 9</span><br><span class="line">character 本 starts at byte position 12</span><br><span class="line">character 語 starts at byte position 15</span><br><span class="line"></span><br><span class="line">index int(rune) rune    char bytes</span><br><span class="line">0       67      U+0043 &#x27;C&#x27; 43</span><br><span class="line">1       104      U+0068 &#x27;h&#x27; 68</span><br><span class="line">2       105      U+0069 &#x27;i&#x27; 69</span><br><span class="line">3       110      U+006E &#x27;n&#x27; 6E</span><br><span class="line">4       101      U+0065 &#x27;e&#x27; 65</span><br><span class="line">5       115      U+0073 &#x27;s&#x27; 73</span><br><span class="line">6       101      U+0065 &#x27;e&#x27; 65</span><br><span class="line">7       58      U+003A &#x27;:&#x27; 3A</span><br><span class="line">8       32      U+0020 &#x27; &#x27; 20</span><br><span class="line">9       26085      U+65E5 &#x27;日&#x27; E6 97 A5</span><br><span class="line">12      26412      U+672C &#x27;本&#x27; E6 9C AC</span><br><span class="line">15      35486      U+8A9E &#x27;語&#x27; E8 AA 9E</span><br></pre></td></tr></table></figure><p>请将输出结果和进行对比。</p><p>我们可以看到，常用英文字符使用 1 个字节表示，而汉字（严格来说，“Chinese: 日本語”的Chinese应该是Japanese**）使用 3 个字符表示。</p><h2 id="命名的返回值named-return-variables"><a class="markdownIt-Anchor" href="#命名的返回值named-return-variables"></a> 命名的返回值（named return variables）</h2><p>如下 里的函数带有一个 <code>int</code> 参数，返回两个 <code>int</code> 值；其中一个函数的返回值在函数调用时就已经被赋予了一个初始零值。</p><p><code>getX2AndX3</code> 与 <code>getX2AndX3_2</code> 两个函数演示了如何使用非命名返回值与命名返回值的特性。当需要返回多个非命名返回值时，需要使用 <code>()</code> 把它们括起来，比如 <code>(int, int)</code>。</p><p>命名返回值作为结果形参（result parameters）被初始化为相应类型的零值，当需要返回的时候，我们只需要一条简单的不带参数的return语句。需要注意的是，即使只有一个命名返回值，也需要使用 <code>()</code> 括起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">var num int = 10</span><br><span class="line">var numx2, numx3 int</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    numx2, numx3 = getX2AndX3(num)</span><br><span class="line">    PrintValues()</span><br><span class="line">    numx2, numx3 = getX2AndX3_2(num)</span><br><span class="line">    PrintValues()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func PrintValues() &#123;</span><br><span class="line">    fmt.Printf(&quot;num = %d, 2x num = %d, 3x num = %d\n&quot;, num, numx2, numx3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getX2AndX3(input int) (int, int) &#123;</span><br><span class="line">    return 2 * input, 3 * input</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getX2AndX3_2(input int) (x2 int, x3 int) &#123;</span><br><span class="line">    x2 = 2 * input</span><br><span class="line">    x3 = 3 * input</span><br><span class="line">    // return x2, x3</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = 10, 2x num = 20, 3x num = 30    </span><br><span class="line">num = 10, 2x num = 20, 3x num = 30 </span><br></pre></td></tr></table></figure><p>警告：</p><ul><li>return 或 return var 都是可以的。</li><li>不过 <code>return var = expression</code>（表达式） 会引发一个编译错误：<code>syntax error: unexpected =, expecting semicolon or newline or &#125;</code>。</li></ul><p>即使函数使用了命名返回值，你依旧可以无视它而返回明确的值。</p><p>任何一个非命名返回值（使用非命名返回值是很糟的编程习惯）在 <code>return</code> 语句里面都要明确指出包含返回值的变量或是一个可计算的值（就像上面警告所指出的那样）。</p><p><strong>尽量使用命名返回值：会使代码更清晰、更简短，同时更加容易读懂。</strong></p><h2 id="改变外部变量outside-variable"><a class="markdownIt-Anchor" href="#改变外部变量outside-variable"></a> 改变外部变量（outside variable）</h2><p>传递指针给函数不但可以节省内存（因为没有复制变量的值），而且赋予了函数直接修改外部变量的能力，所以被修改的变量不再需要使用 <code>return</code> 返回。如下的例子，<code>reply</code> 是一个指向 <code>int</code> 变量的指针，通过这个指针，我们在函数内修改了这个 <code>int</code> 变量的数值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// this function changes reply:</span><br><span class="line">func Multiply(a, b int, reply *int) &#123;</span><br><span class="line">    *reply = a * b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    n := 0</span><br><span class="line">    reply := &amp;n</span><br><span class="line">    Multiply(10, 5, reply)</span><br><span class="line">    fmt.Println(&quot;Multiply:&quot;, *reply) // Multiply: 50</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这仅仅是个指导性的例子，当需要在函数内改变一个占用内存比较大的变量时，性能优势就更加明显了。然而，如果不小心使用的话，传递一个指针很容易引发一些不确定的事，所以，我们要十分小心那些可以改变外部变量的函数，在必要时，需要添加注释以便其他人能够更加清楚的知道函数里面到底发生了什么。</p><h1 id="defer-和追踪"><a class="markdownIt-Anchor" href="#defer-和追踪"></a> defer 和追踪</h1><p>关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 <code>return</code> 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 <code>return</code> 语句同样可以包含一些操作，而不是单纯地返回某个值）。</p><p>关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 <code>finally</code> 语句块，它一般用于释放某些已分配的资源。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    function1()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;In function1 at the top\n&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> function2()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;In function1 at the bottom!\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Function2: Deferred until the end of the calling function!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In Function1 at the top</span><br><span class="line">In Function1 at the bottom!</span><br><span class="line">Function2: Deferred until the end of the calling function!</span><br></pre></td></tr></table></figure><p>请将 defer 关键字去掉并对比输出结果。</p><p>使用 defer 的语句同样可以接受参数，下面这个例子就会在执行 defer 语句时打印 <code>0</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">    i++</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">defer</span> fmt.Printf(<span class="string">&quot;%d &quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将会输出：<code>4 3 2 1 0</code>。</p><p>关键字 defer 允许我们进行一些函数执行完成后的收尾工作，例如：</p><ol><li>关闭文件流</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// open a file  </span><br><span class="line">defer file.Close()</span><br></pre></td></tr></table></figure><ol><li>解锁一个加锁的资源</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mu.Lock()  </span><br><span class="line">defer mu.Unlock() </span><br></pre></td></tr></table></figure><ol><li>打印最终报告</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printHeader()  </span><br><span class="line">defer printFooter()</span><br></pre></td></tr></table></figure><ol><li>关闭数据库链接</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// open a database connection  </span><br><span class="line">defer disconnectFromDB()</span><br></pre></td></tr></table></figure><p>合理使用 defer 语句能够使得代码更加简洁。</p><p>以下代码模拟了上面描述的第 4 种情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    doDBOperations()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">connectToDB</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;ok, connected to db&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">disconnectFromDB</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;ok, disconnected from db&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doDBOperations</span><span class="params">()</span></span> &#123;</span><br><span class="line">    connectToDB()</span><br><span class="line">    fmt.Println(<span class="string">&quot;Defering the database disconnect.&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> disconnectFromDB() <span class="comment">//function called here with defer</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Doing some DB operations ...&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Oops! some crash or network error ...&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Returning from function here!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">//terminate the program</span></span><br><span class="line">    <span class="comment">// deferred function executed here just before actually returning, even if</span></span><br><span class="line">    <span class="comment">// there is a return or abnormal termination before</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ok, connected to db</span><br><span class="line">Defering the database disconnect.</span><br><span class="line">Doing some DB operations ...</span><br><span class="line">Oops! some crash or network error ...</span><br><span class="line">Returning from function here!</span><br><span class="line">ok, disconnected from db</span><br></pre></td></tr></table></figure><p><strong>使用 defer 语句实现代码追踪</strong></p><p>一个基础但十分实用的实现代码执行追踪的方案就是在进入和离开某个函数打印相关的消息，即可以提炼为下面两个函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trace</span><span class="params">(s <span class="type">string</span>)</span></span> &#123; fmt.Println(<span class="string">&quot;entering:&quot;</span>, s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">untrace</span><span class="params">(s <span class="type">string</span>)</span></span> &#123; fmt.Println(<span class="string">&quot;leaving:&quot;</span>, s) &#125;</span><br></pre></td></tr></table></figure><p>以下代码展示了何时调用这两个函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trace</span><span class="params">(s <span class="type">string</span>)</span></span>   &#123; fmt.Println(<span class="string">&quot;entering:&quot;</span>, s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">untrace</span><span class="params">(s <span class="type">string</span>)</span></span> &#123; fmt.Println(<span class="string">&quot;leaving:&quot;</span>, s) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">    trace(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> untrace(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;in a&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line">    trace(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> untrace(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;in b&quot;</span>)</span><br><span class="line">    a()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    b()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entering: b</span><br><span class="line">in b</span><br><span class="line">entering: a</span><br><span class="line">in a</span><br><span class="line">leaving: a</span><br><span class="line">leaving: b</span><br></pre></td></tr></table></figure><p>上面的代码还可以修改为更加简便的版本</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trace</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;entering:&quot;</span>, s)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">un</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;leaving:&quot;</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> un(trace(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">    fmt.Println(<span class="string">&quot;in a&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> un(trace(<span class="string">&quot;b&quot;</span>))</span><br><span class="line">    fmt.Println(<span class="string">&quot;in b&quot;</span>)</span><br><span class="line">    a()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    b()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 defer 语句来记录函数的参数与返回值</strong></p><p>下面的代码展示了另一种在调试时使用 defer 语句的手法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">(s <span class="type">string</span>)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;func1(%q) = %d, %v&quot;</span>, s, n, err)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">7</span>, io.EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    func1(<span class="string">&quot;Go&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Output: 2011/10/04 10:46:11 func1(&quot;Go&quot;) = 7, EOF</span><br></pre></td></tr></table></figure><h1 id="将函数作为参数"><a class="markdownIt-Anchor" href="#将函数作为参数"></a> 将函数作为参数</h1><p>函数可以作为其它函数的参数进行传递，然后在其它函数内调用执行，一般称之为回调。下面是一个将函数作为参数的简单例子（function_parameter.go）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    callback(<span class="number">1</span>, Add)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a, b <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;The sum of %d and %d is: %d\n&quot;</span>, a, b, a+b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">callback</span><span class="params">(y <span class="type">int</span>, f <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span>) &#123;</span><br><span class="line">    f(y, <span class="number">2</span>) <span class="comment">// this becomes Add(1, 2)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The sum of 1 and 2 is: 3</span><br></pre></td></tr></table></figure><h1 id="将函数作为返回值"><a class="markdownIt-Anchor" href="#将函数作为返回值"></a> 将函数作为返回值</h1><p>在程序 <code>function_return.go</code> 中我们将会看到函数 Add2 和 Adder 均会返回签名为 <code>func(b int) int</code> 的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func Add2() (func(b int) int)</span><br><span class="line">func Adder(a int) (func(b int) int)</span><br></pre></td></tr></table></figure><p>函数 Add2 不接受任何参数，但函数 Adder 接受一个 int 类型的整数作为参数。</p><p>我们也可以将 Adder 返回的函数存到变量中（function_return.go）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    // make an Add2 function, give it a name p2, and call it:</span><br><span class="line">    p2 := Add2()</span><br><span class="line">    fmt.Printf(&quot;Call Add2 for 3 gives: %v\n&quot;, p2(3))</span><br><span class="line">    // make a special Adder function, a gets value 2:</span><br><span class="line">    TwoAdder := Adder(2)</span><br><span class="line">    fmt.Printf(&quot;The result is: %v\n&quot;, TwoAdder(3))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Add2() func(b int) int &#123;</span><br><span class="line">    return func(b int) int &#123;</span><br><span class="line">        return b + 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Adder(a int) func(b int) int &#123;</span><br><span class="line">    return func(b int) int &#123;</span><br><span class="line">        return a + b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Call Add2 for 3 gives: 5</span><br><span class="line">The result is: 5</span><br></pre></td></tr></table></figure><p>下例为一个略微不同的实现（function_closure.go）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var f = Adder()</span><br><span class="line">    fmt.Print(f(1), &quot; - &quot;)</span><br><span class="line">    fmt.Print(f(20), &quot; - &quot;)</span><br><span class="line">    fmt.Print(f(300))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Adder() func(int) int &#123;</span><br><span class="line">    var x int</span><br><span class="line">    return func(delta int) int &#123;</span><br><span class="line">        x += delta</span><br><span class="line">        return x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 Adder() 现在被赋值到变量 f 中（类型为 <code>func(int) int</code>）。</p><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 - 21 - 321</span><br></pre></td></tr></table></figure><p>三次调用函数 f 的过程中函数 Adder() 中变量 delta 的值分别为：1、20 和 300。</p><p>我们可以看到，在多次调用中，变量 x 的值是被保留的，即 <code>0 + 1 = 1</code>，然后 <code>1 + 20 = 21</code>，最后 <code>21 + 300 = 321</code>：闭包函数保存并积累其中的变量的值，不管外部函数退出与否，它都能够继续操作外部函数中的局部变量。</p><p>这些局部变量同样可以是参数，例如之前例子中的 <code>Adder(as int)</code>。</p><p>这些例子清楚地展示了如何在 Go 语言中使用闭包。</p><p>在闭包中使用到的变量可以是在闭包函数体内声明的，也可以是在外部函数声明的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var g int</span><br><span class="line">go func(i int) &#123;</span><br><span class="line">    s := 0</span><br><span class="line">    for j := 0; j &lt; i; j++ &#123; s += j &#125;</span><br><span class="line">    g = s</span><br><span class="line">&#125;(1000) // Passes argument 1000 to the function literal.</span><br></pre></td></tr></table></figure><p>这样闭包函数就能够被应用到整个集合的元素上，并修改它们的值。然后这些变量就可以用于表示或计算全局或平均值。</p><h1 id="通过内存缓存来提升性能"><a class="markdownIt-Anchor" href="#通过内存缓存来提升性能"></a> 通过内存缓存来提升性能</h1><p>当在进行大量的计算时，提升性能最直接有效的一种方式就是避免重复计算。通过在内存中缓存和重复利用相同计算的结果，称之为内存缓存。最明显的例子就是生成斐波那契数列的程序（详见第 6.6 和 6.11 节）：</p><p>要计算数列中第 n 个数字，需要先得到之前两个数的值，但很明显绝大多数情况下前两个数的值都是已经计算过的。即每个更后面的数都是基于之前计算结果的重复计算。</p><p>而我们要做就是将第 n 个数的值存在数组中索引为 n 的位置（详见第 7 章），然后在数组中查找是否已经计算过，如果没有找到，则再进行计算。</p><p>程序 Listing 6.17 - fibonacci_memoization.go 就是依照这个原则实现的，下面是计算到第 40 位数字的性能对比：</p><ul><li>普通写法：4.730270 秒</li><li>内存缓存：0.001000 秒</li></ul><p>内存缓存的优势显而易见，而且您还可以将它应用到其它类型的计算中，例如使用 map（详见第 7 章）而不是数组或切片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const LIM = 41</span><br><span class="line"></span><br><span class="line">var fibs [LIM]uint64</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var result uint64 = 0</span><br><span class="line">    start := time.Now()</span><br><span class="line">    for i := 0; i &lt; LIM; i++ &#123;</span><br><span class="line">        result = fibonacci(i)</span><br><span class="line">        fmt.Printf(&quot;fibonacci(%d) is: %d\n&quot;, i, result)</span><br><span class="line">    &#125;</span><br><span class="line">    end := time.Now()</span><br><span class="line">    delta := end.Sub(start)</span><br><span class="line">    fmt.Printf(&quot;longCalculation took this amount of time: %s\n&quot;, delta)</span><br><span class="line">&#125;</span><br><span class="line">func fibonacci(n int) (res uint64) &#123;</span><br><span class="line">    // memoization: check if fibonacci(n) is already known in array:</span><br><span class="line">    if fibs[n] != 0 &#123;</span><br><span class="line">        res = fibs[n]</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if n &lt;= 1 &#123;</span><br><span class="line">        res = 1</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        res = fibonacci(n-1) + fibonacci(n-2)</span><br><span class="line">    &#125;</span><br><span class="line">    fibs[n] = res</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存缓存的技术在使用计算成本相对昂贵的函数时非常有用（不仅限于例子中的递归），譬如大量进行相同参数的运算。这种技术还可以应用于纯函数中，即相同输入必定获得相同输出的函数。</p><h1 id="声明-初始化和-make"><a class="markdownIt-Anchor" href="#声明-初始化和-make"></a> 声明、初始化和 make</h1><h2 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h2><p>map 是引用类型，可以使用如下声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var map1 map[keytype]valuetype</span><br><span class="line">var map1 map[string]int</span><br></pre></td></tr></table></figure><p>（<code>[keytype]</code> 和 <code>valuetype</code> 之间允许有空格，但是 gofmt 移除了空格）</p><p>在声明的时候不需要知道 map 的长度，map 是可以动态增长的。</p><p>未初始化的 map 的值是 nil。</p><p>key 可以是任意可以用 == 或者 != 操作符比较的类型，比如 string、int、float。所以数组、切片和结构体不能作为 key (译者注：含有数组切片的结构体不能作为 key，只包含内建类型的 struct 是可以作为 key 的），但是指针和接口类型可以。如果要用结构体作为 key 可以提供 <code>Key()</code> 和 <code>Hash()</code> 方法，这样可以通过结构体的域计算出唯一的数字或者字符串的 key。</p><p>value 可以是任意类型的；通过使用空接口类型（详见第 11.9 节），我们可以存储任意值，但是使用这种类型作为值时需要先做一次类型断言（详见第 11.3 节）。</p><p>map 传递给函数的代价很小：在 32 位机器上占 4 个字节，64 位机器上占 8 个字节，无论实际上存储了多少数据。通过 key 在 map 中寻找值是很快的，比线性查找快得多，但是仍然比从数组和切片的索引中直接读取要慢 100 倍；所以如果你很在乎性能的话还是建议用切片来解决问题。</p><p>map 也可以用函数作为自己的值，这样就可以用来做分支结构（详见第 5 章）：key 用来选择要执行的函数。</p><p>如果 key1 是 map1 的key，那么 <code>map1[key1]</code> 就是对应 key1 的值，就如同数组索引符号一样（数组可以视为一种简单形式的 map，key 是从 0 开始的整数）。</p><p>key1 对应的值可以通过赋值符号来设置为 val1：<code>map1[key1] = val1</code>。</p><p>令 <code>v := map1[key1]</code> 可以将 key1 对应的值赋值给 v；如果 map 中没有 key1 存在，那么 v 将被赋值为 map1 的值类型的空值。</p><p>常用的 <code>len(map1)</code> 方法可以获得 map 中的 pair 数目，这个数目是可以伸缩的，因为 map-pairs 在运行时可以动态添加和删除。</p><p>示例 8.1 <a href="https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/examples/chapter_8/make_maps.go">make_maps.go</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mapLit <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">    <span class="comment">//var mapCreated map[string]float32</span></span><br><span class="line">    <span class="keyword">var</span> mapAssigned <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line">    mapLit = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">    mapCreated := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">float32</span>)</span><br><span class="line">    mapAssigned = mapLit</span><br><span class="line"></span><br><span class="line">    mapCreated[<span class="string">&quot;key1&quot;</span>] = <span class="number">4.5</span></span><br><span class="line">    mapCreated[<span class="string">&quot;key2&quot;</span>] = <span class="number">3.14159</span></span><br><span class="line">    mapAssigned[<span class="string">&quot;two&quot;</span>] = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Map literal at \&quot;one\&quot; is: %d\n&quot;</span>, mapLit[<span class="string">&quot;one&quot;</span>])</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Map created at \&quot;key2\&quot; is: %f\n&quot;</span>, mapCreated[<span class="string">&quot;key2&quot;</span>])</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Map assigned at \&quot;two\&quot; is: %d\n&quot;</span>, mapLit[<span class="string">&quot;two&quot;</span>])</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Map literal at \&quot;ten\&quot; is: %d\n&quot;</span>, mapLit[<span class="string">&quot;ten&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map literal at &quot;one&quot; is: 1</span><br><span class="line">Map created at &quot;key2&quot; is: 3.141590</span><br><span class="line">Map assigned at &quot;two&quot; is: 3</span><br><span class="line">Mpa literal at &quot;ten&quot; is: 0</span><br></pre></td></tr></table></figure><p>mapLit 说明了 <code>map literals</code> 的使用方法： map 可以用 <code>&#123;key1: val1, key2: val2&#125;</code> 的描述方法来初始化，就像数组和结构体一样。</p><p>map 是 <strong>引用类型</strong> 的： 内存用 make 方法来分配。</p><p>map 的初始化：<code>var map1 = make(map[keytype]valuetype)</code>。</p><p>或者简写为：<code>map1 := make(map[keytype]valuetype)</code>。</p><p>上面例子中的 mapCreated 就是用这种方式创建的：<code>mapCreated := make(map[string]float32)</code>。</p><p>相当于：<code>mapCreated := map[string]float32&#123;&#125;</code>。</p><p>mapAssigned 也是 mapList 的引用，对 mapAssigned 的修改也会影响到 mapLit 的值。</p><p><strong>不要使用 new，永远用 make 来构造 map</strong></p><p><strong>注意</strong> 如果你错误的使用 new() 分配了一个引用对象，你会获得一个空引用的指针，相当于声明了一个未初始化的变量并且取了它的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapCreated := new(map[string]float32)</span><br></pre></td></tr></table></figure><p>接下来当我们调用：<code>mapCreated[&quot;key1&quot;] = 4.5</code> 的时候，编译器会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invalid operation: mapCreated[&quot;key1&quot;] (index of type *map[string]float32).</span><br></pre></td></tr></table></figure><p>为了说明值可以是任意类型的，这里给出了一个使用 <code>func() int</code> 作为值的 map：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mf := <span class="keyword">map</span>[<span class="type">int</span>]<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span>&#123;</span><br><span class="line">        <span class="number">1</span>: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> <span class="number">10</span> &#125;,</span><br><span class="line">        <span class="number">2</span>: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> <span class="number">20</span> &#125;,</span><br><span class="line">        <span class="number">5</span>: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> <span class="number">50</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(mf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：<code>map[1:0x10903be0 5:0x10903ba0 2:0x10903bc0]</code>: 整形都被映射到函数地址。</p><h2 id="map-容量"><a class="markdownIt-Anchor" href="#map-容量"></a> map 容量</h2><p>和数组不同，map 可以根据新增的 key-value 对动态的伸缩，因此它不存在固定长度或者最大限制。但是你也可以选择标明 map 的初始容量 <code>capacity</code>，就像这样：<code>make(map[keytype]valuetype, cap)</code>。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map2 := make(map[string]float32, 100)</span><br></pre></td></tr></table></figure><p>当 map 增长到容量上限的时候，如果再增加新的 key-value 对，map 的大小会自动加 1。所以出于性能的考虑，对于大的 map 或者会快速扩张的 map，即使只是大概知道容量，也最好先标明。</p><p>这里有一个 map 的具体例子，即将音阶和对应的音频映射起来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">noteFrequency := map[string]float32 &#123;</span><br><span class="line">    &quot;C0&quot;: 16.35, &quot;D0&quot;: 18.35, &quot;E0&quot;: 20.60, &quot;F0&quot;: 21.83,</span><br><span class="line">    &quot;G0&quot;: 24.50, &quot;A0&quot;: 27.50, &quot;B0&quot;: 30.87, &quot;A4&quot;: 440&#125;</span><br></pre></td></tr></table></figure><h2 id="用切片作为-map-的值"><a class="markdownIt-Anchor" href="#用切片作为-map-的值"></a> 用切片作为 map 的值</h2><p>既然一个 key 只能对应一个 value，而 value 又是一个原始类型，那么如果一个 key 要对应多个值怎么办？例如，当我们要处理unix机器上的所有进程，以父进程（pid 为整形）作为 key，所有的子进程（以所有子进程的 pid 组成的切片）作为 value。通过将 value 定义为 <code>[]int</code> 类型或者其他类型的切片，就可以优雅的解决这个问题。</p><p>这里有一些定义这种 map 的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mp1 := make(map[int][]int)</span><br><span class="line">mp2 := make(map[int]*[]int)</span><br></pre></td></tr></table></figure><h1 id="切片"><a class="markdownIt-Anchor" href="#切片"></a> 切片</h1><h2 id="721-概念"><a class="markdownIt-Anchor" href="#721-概念"></a> 7.2.1 概念</h2><p>切片（slice）是对数组一个连续片段的引用（该数组我们称之为相关数组，通常是匿名的），所以切片是一个引用类型（因此更类似于 C/C++ 中的数组类型，或者 Python 中的 list 类型）。这个片段可以是整个数组，或者是由起始和终止索引标识的一些项的子集。需要注意的是，终止索引标识的项不包括在切片内。切片提供了一个相关数组的动态窗口。</p><p>切片是可索引的，并且可以由 <code>len()</code> 函数获取长度。</p><p>给定项的切片索引可能比相关数组的相同元素的索引小。和数组不同的是，切片的长度可以在运行时修改，最小为 0 最大为相关数组的长度：切片是一个 <strong>长度可变的数组</strong>。</p><p>切片提供了计算容量的函数 <code>cap()</code> 可以测量切片最长可以达到多少：它等于切片的长度 + 数组除切片之外的长度。如果 s 是一个切片，<code>cap(s)</code> 就是从 <code>s[0]</code> 到数组末尾的数组长度。切片的长度永远不会超过它的容量，所以对于 切片 s 来说该不等式永远成立：<code>0 &lt;= len(s) &lt;= cap(s)</code>。</p><p>多个切片如果表示同一个数组的片段，它们可以共享数据；因此一个切片和相关数组的其他切片是共享存储的，相反，不同的数组总是代表不同的存储。数组实际上是切片的构建块。</p><p><strong>优点</strong> 因为切片是引用，所以它们不需要使用额外的内存并且比使用数组更有效率，所以在 Go 代码中 切片比数组更常用。</p><p>声明切片的格式是： <code>var identifier []type</code>（不需要说明长度）。</p><p>一个切片在未初始化之前默认为 nil，长度为 0。</p><p>切片的初始化格式是：<code>var slice1 []type = arr1[start:end]</code>。</p><p>这表示 slice1 是由数组 arr1 从 start 索引到 <code>end-1</code> 索引之间的元素构成的子集（切分数组，start:end 被称为 slice 表达式）。所以 <code>slice1[0]</code> 就等于 <code>arr1[start]</code>。这可以在 arr1 被填充前就定义好。</p><p>如果某个人写：<code>var slice1 []type = arr1[:]</code> 那么 slice1 就等于完整的 arr1 数组（所以这种表示方式是 <code>arr1[0:len(arr1)]</code> 的一种缩写）。另外一种表述方式是：<code>slice1 = &amp;arr1</code>。</p><p><code>arr1[2:]</code> 和 <code>arr1[2:len(arr1)]</code> 相同，都包含了数组从第三个到最后的所有元素。</p><p><code>arr1[:3]</code> 和 <code>arr1[0:3]</code> 相同，包含了从第一个到第三个元素（不包括第四个）。</p><p>如果你想去掉 slice1 的最后一个元素，只要 <code>slice1 = slice1[:len(slice1)-1]</code>。</p><p>一个由数字 1、2、3 组成的切片可以这么生成：<code>s := [3]int&#123;1,2,3&#125;[:]</code>(注: 应先用<code>s := [3]int&#123;1, 2, 3&#125;</code>生成数组, 再使用<code>s[:]</code>转成切片) 甚至更简单的 <code>s := []int&#123;1,2,3&#125;</code>。</p><p><code>s2 := s[:]</code> 是用切片组成的切片，拥有相同的元素，但是仍然指向相同的相关数组。</p><p>一个切片 s 可以这样扩展到它的大小上限：<code>s = s[:cap(s)]</code>，如果再扩大的话就会导致运行时错误（参见第 7.7 节）。</p><p>对于每一个切片（包括 string），以下状态总是成立的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s == s[:i] + s[i:] // i是一个整数且: 0 &lt;= i &lt;= len(s)</span><br><span class="line">len(s) &lt;= cap(s)</span><br></pre></td></tr></table></figure><p>切片也可以用类似数组的方式初始化：<code>var x = []int&#123;2, 3, 5, 7, 11&#125;</code>。这样就创建了一个长度为 5 的数组并且创建了一个相关切片。</p><p>切片在内存中的组织方式实际上是一个有 3 个域的结构体：指向相关数组的指针，切片长度以及切片容量。下图给出了一个长度为 2，容量为 4 的切片y。</p><ul><li><code>y[0] = 3</code> 且 <code>y[1] = 5</code>。</li><li>切片 <code>y[0:4]</code> 由 元素 3，5，7 和 11 组成。</li></ul><p><a href="https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/images/7.2_fig7.2.png?raw=true"><img src="https://github.com/unknwon/the-way-to-go_ZH_CN/raw/master/eBook/images/7.2_fig7.2.png?raw=true" alt="img" /></a></p><p>示例 7.7 <a href="https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/examples/chapter_7/array_slices.go">array_slices.go</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var arr1 [6]int</span><br><span class="line">    var slice1 []int = arr1[2:5] // item at index 5 not included!</span><br><span class="line"></span><br><span class="line">    // load the array with integers: 0,1,2,3,4,5</span><br><span class="line">    for i := 0; i &lt; len(arr1); i++ &#123;</span><br><span class="line">        arr1[i] = i</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // print the slice</span><br><span class="line">    for i := 0; i &lt; len(slice1); i++ &#123;</span><br><span class="line">        fmt.Printf(&quot;Slice at %d is %d\n&quot;, i, slice1[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(&quot;The length of arr1 is %d\n&quot;, len(arr1))</span><br><span class="line">    fmt.Printf(&quot;The length of slice1 is %d\n&quot;, len(slice1))</span><br><span class="line">    fmt.Printf(&quot;The capacity of slice1 is %d\n&quot;, cap(slice1))</span><br><span class="line"></span><br><span class="line">    // grow the slice</span><br><span class="line">    slice1 = slice1[0:4]</span><br><span class="line">    for i := 0; i &lt; len(slice1); i++ &#123;</span><br><span class="line">        fmt.Printf(&quot;Slice at %d is %d\n&quot;, i, slice1[i])</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(&quot;The length of slice1 is %d\n&quot;, len(slice1))</span><br><span class="line">    fmt.Printf(&quot;The capacity of slice1 is %d\n&quot;, cap(slice1))</span><br><span class="line"></span><br><span class="line">    // grow the slice beyond capacity</span><br><span class="line">    //slice1 = slice1[0:7 ] // panic: runtime error: slice bound out of range</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Slice at 0 is 2  </span><br><span class="line">Slice at 1 is 3  </span><br><span class="line">Slice at 2 is 4  </span><br><span class="line">The length of arr1 is 6  </span><br><span class="line">The length of slice1 is 3  </span><br><span class="line">The capacity of slice1 is 4  </span><br><span class="line">Slice at 0 is 2  </span><br><span class="line">Slice at 1 is 3  </span><br><span class="line">Slice at 2 is 4  </span><br><span class="line">Slice at 3 is 5  </span><br><span class="line">The length of slice1 is 4  </span><br><span class="line">The capacity of slice1 is 4  </span><br></pre></td></tr></table></figure><p>如果 s2 是一个 slice，你可以将 s2 向后移动一位 <code>s2 = s2[1:]</code>，但是末尾没有移动。切片只能向后移动，<code>s2 = s2[-1:]</code> 会导致编译错误。切片不能被重新分片以获取数组的前一个元素。</p><p><strong>注意</strong> 绝对不要用指针指向 slice。切片本身已经是一个引用类型，所以它本身就是一个指针!!</p><p>问题 7.2： 给定切片 <code>b:= []byte&#123;'g', 'o', 'l', 'a', 'n', 'g'&#125;</code>，那么 <code>b[1:4]</code>、<code>b[:2]</code>、<code>b[2:]</code> 和 <code>b[:]</code> 分别是什么？</p><h2 id="722-将切片传递给函数"><a class="markdownIt-Anchor" href="#722-将切片传递给函数"></a> 7.2.2 将切片传递给函数</h2><p>如果你有一个函数需要对数组做操作，你可能总是需要把参数声明为切片。当你调用该函数时，把数组分片，创建为一个 切片引用并传递给该函数。这里有一个计算数组元素和的方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func sum(a []int) int &#123;</span><br><span class="line">    s := 0</span><br><span class="line">    for i := 0; i &lt; len(a); i++ &#123;</span><br><span class="line">        s += a[i]</span><br><span class="line">    &#125;</span><br><span class="line">    return s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var arr = [5]int&#123;0, 1, 2, 3, 4&#125;</span><br><span class="line">    sum(arr[:])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="723-用-make-创建一个切片"><a class="markdownIt-Anchor" href="#723-用-make-创建一个切片"></a> 7.2.3 用 make() 创建一个切片</h2><p>当相关数组还没有定义时，我们可以使用 make() 函数来创建一个切片 同时创建好相关数组：<code>var slice1 []type = make([]type, len)</code>。</p><p>也可以简写为 <code>slice1 := make([]type, len)</code>，这里 <code>len</code> 是数组的长度并且也是 <code>slice</code> 的初始长度。</p><p>所以定义 <code>s2 := make([]int, 10)</code>，那么 <code>cap(s2) == len(s2) == 10</code>。</p><p>make 接受 2 个参数：元素的类型以及切片的元素个数。</p><p>如果你想创建一个 slice1，它不占用整个数组，而只是占用以 len 为个数个项，那么只要：<code>slice1 := make([]type, len, cap)</code>。</p><p>make 的使用方式是：<code>func make([]T, len, cap)</code>，其中 cap 是可选参数。</p><p>所以下面两种方法可以生成相同的切片:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make([]int, 50, 100)</span><br><span class="line">new([100]int)[0:50]</span><br></pre></td></tr></table></figure><p>下图描述了使用 make 方法生成的切片的内存结构：[<img src="https://github.com/unknwon/the-way-to-go_ZH_CN/raw/master/eBook/images/7.2_fig7.2.1.png?raw=true" alt="img" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var slice1 []int = make([]int, 10)</span><br><span class="line">    // load the array/slice:</span><br><span class="line">    for i := 0; i &lt; len(slice1); i++ &#123;</span><br><span class="line">        slice1[i] = 5 * i</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // print the slice:</span><br><span class="line">    for i := 0; i &lt; len(slice1); i++ &#123;</span><br><span class="line">        fmt.Printf(&quot;Slice at %d is %d\n&quot;, i, slice1[i])</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(&quot;\nThe length of slice1 is %d\n&quot;, len(slice1))</span><br><span class="line">    fmt.Printf(&quot;The capacity of slice1 is %d\n&quot;, cap(slice1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Slice at 0 is 0  </span><br><span class="line">Slice at 1 is 5  </span><br><span class="line">Slice at 2 is 10  </span><br><span class="line">Slice at 3 is 15  </span><br><span class="line">Slice at 4 is 20  </span><br><span class="line">Slice at 5 is 25  </span><br><span class="line">Slice at 6 is 30  </span><br><span class="line">Slice at 7 is 35  </span><br><span class="line">Slice at 8 is 40  </span><br><span class="line">Slice at 9 is 45  </span><br><span class="line"></span><br><span class="line">The length of slice1 is 10  </span><br><span class="line">The capacity of slice1 is 10  </span><br></pre></td></tr></table></figure><p>因为字符串是纯粹不可变的字节数组，它们也可以被切分成 切片。</p><p>练习 7.4： fobinacci_funcarray.go: 为练习 7.3 写一个新的版本，主函数调用一个使用序列个数作为参数的函数，该函数返回一个大小为序列个数的 Fibonacci 切片。</p><h2 id="724-new-和-make-的区别"><a class="markdownIt-Anchor" href="#724-new-和-make-的区别"></a> 7.2.4 new() 和 make() 的区别</h2><p>看起来二者没有什么区别，都在堆上分配内存，但是它们的行为不同，适用于不同的类型。</p><ul><li>new(T) 为每个新的类型T分配一片内存，初始化为 0 并且返回类型为*T的内存地址：这种方法 <strong>返回一个指向类型为 T，值为 0 的地址的指针</strong>，它适用于值类型如数组和结构体（参见第 10 章）；它相当于 <code>&amp;T&#123;&#125;</code>。</li><li>make(T) <strong>返回一个类型为 T 的初始值</strong>，它只适用于3种内建的引用类型：切片、map 和 channel（参见第 8 章，第 13 章）。</li></ul><p>换言之，new 函数分配内存，make 函数初始化；下图给出了区别：</p><p><a href="https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/images/7.2_fig7.3.png?raw=true"><img src="https://github.com/unknwon/the-way-to-go_ZH_CN/raw/master/eBook/images/7.2_fig7.3.png?raw=true" alt="img" /></a></p><p>在图 7.3 的第一幅图中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var p *[]int = new([]int) // *p == nil; with len and cap 0</span><br><span class="line">p := new([]int)</span><br></pre></td></tr></table></figure><p>在第二幅图中， <code>p := make([]int, 0)</code> ，切片 已经被初始化，但是指向一个空的数组。</p><p>以上两种方式实用性都不高。下面的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var v []int = make([]int, 10, 50)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v := make([]int, 10, 50)</span><br></pre></td></tr></table></figure><p>这样分配一个有 50 个 int 值的数组，并且创建了一个长度为 10，容量为 50 的 切片 v，该 切片 指向数组的前 10 个元素。</p><p><strong>问题 7.3</strong> 给定 <code>s := make([]byte, 5)</code>，len(s) 和 cap(s) 分别是多少？<code>s = s[2:4]</code>，len(s) 和 cap(s) 又分别是多少？<br /><strong>问题 7.4</strong> 假设 <code>s1 := []byte&#123;'p', 'o', 'e', 'm'&#125;</code> 且 <code>s2 := s1[2:]</code>，s2 的值是多少？如果我们执行 <code>s2[1] = 't'</code>，s1 和 s2 现在的值又分别是多少？</p><p><em>译者注：如何理解new、make、slice、map、channel的关系</em></p><p><em>1.slice、map以及channel都是golang内建的一种引用类型，三者在内存中存在多个组成部分， 需要对内存组成部分初始化后才能使用，而make就是对三者进行初始化的一种操作方式</em></p><p><em>2. new 获取的是存储指定变量内存地址的一个变量，对于变量内部结构并不会执行相应的初始化操作， 所以slice、map、channel需要make进行初始化并获取对应的内存地址，而非new简单的获取内存地址</em></p><h2 id="725-多维-切片"><a class="markdownIt-Anchor" href="#725-多维-切片"></a> 7.2.5 多维 切片</h2><p>和数组一样，切片通常也是一维的，但是也可以由一维组合成高维。通过分片的分片（或者切片的数组），长度可以任意动态变化，所以 Go 语言的多维切片可以任意切分。而且，内层的切片必须单独分配（通过 make 函数）。</p><h2 id="726-bytes-包"><a class="markdownIt-Anchor" href="#726-bytes-包"></a> 7.2.6 bytes 包</h2><p>类型 <code>[]byte</code> 的切片十分常见，Go 语言有一个 bytes 包专门用来解决这种类型的操作方法。</p><p>bytes 包和字符串包十分类似（参见第 4.7 节）。而且它还包含一个十分有用的类型 Buffer:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &quot;bytes&quot;</span><br><span class="line"></span><br><span class="line">type Buffer struct &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个长度可变的 bytes 的 buffer，提供 Read 和 Write 方法，因为读写长度未知的 bytes 最好使用 buffer。</p><p>Buffer 可以这样定义：<code>var buffer bytes.Buffer</code>。</p><p>或者使用 new 获得一个指针：<code>var r *bytes.Buffer = new(bytes.Buffer)</code>。</p><p>或者通过函数：<code>func NewBuffer(buf []byte) *Buffer</code>，创建一个 Buffer 对象并且用 buf 初始化好；NewBuffer 最好用在从 buf 读取的时候使用。</p><p><strong>通过 buffer 串联字符串</strong></p><p>类似于 Java 的 StringBuilder 类。</p><p>在下面的代码段中，我们创建一个 buffer，通过 <code>buffer.WriteString(s)</code> 方法将字符串 s 追加到后面，最后再通过 <code>buffer.String()</code> 方法转换为 string：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var buffer bytes.Buffer</span><br><span class="line">for &#123;</span><br><span class="line">    if s, ok := getNextString(); ok &#123; //method getNextString() not shown here</span><br><span class="line">        buffer.WriteString(s)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(buffer.String(), &quot;\n&quot;)</span><br></pre></td></tr></table></figure><p>这种实现方式比使用 <code>+=</code> 要更节省内存和 CPU，尤其是要串联的字符串数目特别多的时候。</p><h2 id="修改字符串中的某个字符"><a class="markdownIt-Anchor" href="#修改字符串中的某个字符"></a> 修改字符串中的某个字符</h2><p>Go 语言中的字符串是不可变的，也就是说 <code>str[index]</code> 这样的表达式是不可以被放在等号左侧的。如果尝试运行 <code>str[i] = 'D'</code> 会得到错误：<code>cannot assign to str[i]</code>。</p><p>因此，您必须先将字符串转换成字节数组，然后再通过修改数组中的元素值来达到修改字符串的目的，最后将字节数组转换回字符串格式。</p><p>例如，将字符串 “hello” 转换为 “cello”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s := &quot;hello&quot;</span><br><span class="line">c := []byte(s)</span><br><span class="line">c[0] = &#x27;c&#x27;</span><br><span class="line">s2 := string(c) // s2 == &quot;cello&quot;</span><br></pre></td></tr></table></figure><p>所以，您可以通过操作切片来完成对字符串的操作。</p><h2 id="765-字节数组对比函数"><a class="markdownIt-Anchor" href="#765-字节数组对比函数"></a> 7.6.5 字节数组对比函数</h2><p>下面的 <code>Compare</code> 函数会返回两个字节数组字典顺序的整数对比结果，即 <code>0 if a == b, -1 if a &lt; b, 1 if a &gt; b</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Compare</span><span class="params">(a, b[]<span class="type">byte</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i &lt; <span class="built_in">len</span>(a) &amp;&amp; i &lt; <span class="built_in">len</span>(b); i++ &#123;</span><br><span class="line">        <span class="keyword">switch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> a[i] &gt; b[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> a[i] &lt; b[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 数组的长度可能不同</span></span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">len</span>(a) &lt; <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">len</span>(a) &gt; <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="comment">// 数组相等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搜索及排序切片和数组"><a class="markdownIt-Anchor" href="#搜索及排序切片和数组"></a> 搜索及排序切片和数组</h2><p>标准库提供了 <code>sort</code> 包来实现常见的搜索和排序操作。您可以使用 <code>sort</code> 包中的函数 <code>func Ints(a []int)</code> 来实现对 int 类型的切片排序。例如 <code>sort.Ints(arri)</code>，其中变量 arri 就是需要被升序排序的数组或切片。为了检查某个数组是否已经被排序，可以通过函数 <code>IntsAreSorted(a []int) bool</code> 来检查，如果返回 true 则表示已经被排序。</p><p>类似的，可以使用函数 <code>func Float64s(a []float64)</code> 来排序 float64 的元素，或使用函数 <code>func Strings(a []string)</code> 排序字符串元素。</p><p>想要在数组或切片中搜索一个元素，该数组或切片必须先被排序（因为标准库的搜索算法使用的是二分法）。然后，您就可以使用函数 <code>func SearchInts(a []int, n int) int</code> 进行搜索，并返回对应结果的索引值。</p><p>当然，还可以搜索 float64 和字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func SearchFloat64s(a []float64, x float64) int</span><br><span class="line">func SearchStrings(a []string, x string) int</span><br></pre></td></tr></table></figure><p>您可以通过查看 <a href="http://golang.org/pkg/sort/">官方文档</a> 来获取更详细的信息。</p><p>这就是如何使用 <code>sort</code> 包的方法，我们会在第 11.6 节对它的细节进行深入，并实现一个属于我们自己的版本。</p><h2 id="append-函数常见操作"><a class="markdownIt-Anchor" href="#append-函数常见操作"></a> append 函数常见操作</h2><p>我们在第 7.5 节提到的 append 非常有用，它能够用于各种方面的操作：</p><ol><li><p>将切片 b 的元素追加到切片 a 之后：<code>a = append(a, b...)</code></p></li><li><p>复制切片 a 的元素到新的切片 b 上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = make([]T, len(a))</span><br><span class="line">copy(b, a)</span><br></pre></td></tr></table></figure></li><li><p>删除位于索引 i 的元素：<code>a = append(a[:i], a[i+1:]...)</code></p></li><li><p>切除切片 a 中从索引 i 至 j 位置的元素：<code>a = append(a[:i], a[j:]...)</code></p></li><li><p>为切片 a 扩展 j 个元素长度：<code>a = append(a, make([]T, j)...)</code></p></li><li><p>在索引 i 的位置插入元素 x：<code>a = append(a[:i], append([]T&#123;x&#125;, a[i:]...)...)</code></p></li><li><p>在索引 i 的位置插入长度为 j 的新切片：<code>a = append(a[:i], append(make([]T, j), a[i:]...)...)</code></p></li><li><p>在索引 i 的位置插入切片 b 的所有元素：<code>a = append(a[:i], append(b, a[i:]...)...)</code></p></li><li><p>取出位于切片 a 最末尾的元素 x：<code>x, a = a[len(a)-1], a[:len(a)-1]</code></p></li><li><p>将元素 x 追加到切片 a：<code>a = append(a, x)</code></p></li></ol><p>因此，您可以使用切片和 append 操作来表示任意可变长度的序列。</p><p>从数学的角度来看，切片相当于向量，如果需要的话可以定义一个向量作为切片的别名来进行操作。</p>]]></content>
      
      
      <categories>
          
          <category> print*,&quot;hello world!!!&quot; </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的go语言生活</title>
      <link href="/posts/ce3ef34b/"/>
      <url>/posts/ce3ef34b/</url>
      
        <content type="html"><![CDATA[<h2 id="变量的初始化"><a class="markdownIt-Anchor" href="#变量的初始化"></a> 变量的初始化</h2><p>变量声明可以包含初始值，每个变量对应一个。</p><p>如果初始化值已存在，则可以省略类型；变量会从初始值中获得类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i, j  = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c, python, java  = <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">&quot;no!&quot;</span></span><br><span class="line">    fmt.Println(i, j, c, python, java)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="短变量声明"><a class="markdownIt-Anchor" href="#短变量声明"></a> 短变量声明</h2><p>在函数中，简洁赋值语句 <code>:=</code> 可在类型明确的地方代替 <code>var</code> 声明。</p><p>函数外的每个语句都必须以关键字开始（<code>var</code>, <code>func</code> 等等），因此 <code>:=</code> 结构不能在函数外使用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i, j <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    k := <span class="number">3</span></span><br><span class="line">    c, python, java := <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">&quot;no!&quot;</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(i, j, k, c, python, java)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="基本类型"><a class="markdownIt-Anchor" href="#基本类型"></a> 基本类型</h2><p>Go 的基本类型有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bool</span><br><span class="line"></span><br><span class="line">string</span><br><span class="line"></span><br><span class="line">int  int8  int16  int32  int64</span><br><span class="line">uint uint8 uint16 uint32 uint64 uintptr</span><br><span class="line"></span><br><span class="line">byte // uint8 的别名</span><br><span class="line"></span><br><span class="line">rune // int32 的别名</span><br><span class="line">    // 表示一个 Unicode 码点</span><br><span class="line"></span><br><span class="line">float32 float64</span><br><span class="line"></span><br><span class="line">complex64 complex128</span><br></pre></td></tr></table></figure><p>本例展示了几种类型的变量。 同导入语句一样，变量声明也可以“分组”成一个语法块。</p><p><code>int</code>, <code>uint</code> 和 <code>uintptr</code> 在 32 位系统上通常为 32 位宽，在 64 位系统上则为 64 位宽。 当你需要一个整数值时应使用 <code>int</code> 类型，除非你有特殊的理由使用固定大小或无符号的整数类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/cmplx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    ToBe   <span class="type">bool</span>       = <span class="literal">false</span></span><br><span class="line">    MaxInt <span class="type">uint64</span>     = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></span><br><span class="line">    z      <span class="type">complex128</span> = cmplx.Sqrt(<span class="number">-5</span> + <span class="number">12i</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Type: %T Value: %v\n&quot;</span>, ToBe, ToBe)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Type: %T Value: %v\n&quot;</span>, MaxInt, MaxInt)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Type: %T Value: %v\n&quot;</span>, z, z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h2><p>表达式 <code>T(v)</code> 将值 <code>v</code> 转换为类型 <code>T</code>。</p><p>一些关于数值的转换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var i int = 42</span><br><span class="line">var f float64 = float64(i)</span><br><span class="line">var u uint = uint(f)</span><br></pre></td></tr></table></figure><p>或者，更加简单的形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i := 42</span><br><span class="line">f := float64(i)</span><br><span class="line">u := uint(f)</span><br></pre></td></tr></table></figure><p>与 C 不同的是，Go 在不同类型的项之间赋值时需要显式转换。移除下面源代码中 <code>float64</code> 或 <code>uint</code> 就将报错</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x, y <span class="type">int</span> = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">    <span class="keyword">var</span> f <span class="type">float64</span> = math.Sqrt(<span class="type">float64</span>(x*x + y*y))</span><br><span class="line">    <span class="keyword">var</span> z <span class="type">uint</span> = <span class="type">uint</span>(f)</span><br><span class="line">    fmt.Println(x, y, z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="defer"><a class="markdownIt-Anchor" href="#defer"></a> defer</h2><p>defer 语句会将函数推迟到外层函数返回之后执行。</p><p>推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="defer-栈"><a class="markdownIt-Anchor" href="#defer-栈"></a> defer 栈</h2><p>推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。</p><p>更多关于 defer 语句的信息，请阅读<a href="http://blog.go-zh.org/defer-panic-and-recover">此博文</a>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;counting&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="指针"><a class="markdownIt-Anchor" href="#指针"></a> 指针</h2><p>Go 拥有指针。指针保存了值的内存地址。</p><p>类型 <code>*T</code> 是指向 <code>T</code> 类型值的指针。其零值为 <code>nil</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var p *int</span><br></pre></td></tr></table></figure><p><code>&amp;</code> 操作符会生成一个指向其操作数的指针。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i := 42</span><br><span class="line">p = &amp;i</span><br></pre></td></tr></table></figure><p><code>*</code> 操作符表示指针指向的底层值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(*p) // 通过指针 p 读取 i</span><br><span class="line">*p = 21         // 通过指针 p 设置 i</span><br></pre></td></tr></table></figure><p>这也就是通常所说的“间接引用”或“重定向”。</p><p>与 C 不同，Go 没有指针运算。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i, j := <span class="number">42</span>, <span class="number">2701</span></span><br><span class="line"></span><br><span class="line">    p := &amp;i         <span class="comment">// 指向 i</span></span><br><span class="line">    fmt.Println(*p) <span class="comment">// 通过指针读取 i 的值</span></span><br><span class="line">    *p = <span class="number">21</span>         <span class="comment">// 通过指针设置 i 的值</span></span><br><span class="line">    fmt.Println(i)  <span class="comment">// 查看 i 的值</span></span><br><span class="line"></span><br><span class="line">    p = &amp;j         <span class="comment">// 指向 j</span></span><br><span class="line">    *p = *p / <span class="number">37</span>   <span class="comment">// 通过指针对 j 进行除法运算</span></span><br><span class="line">    fmt.Println(j) <span class="comment">// 查看 j 的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结构体指针"><a class="markdownIt-Anchor" href="#结构体指针"></a> 结构体指针</h2><p>结构体字段可以通过结构体指针来访问。</p><p>如果我们有一个指向结构体的指针 <code>p</code>，那么可以通过 <code>(*p).X</code> 来访问其字段 <code>X</code>。不过这么写太啰嗦了，所以语言也允许我们使用隐式间接引用，直接写 <code>p.X</code> 就可以。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    X <span class="type">int</span></span><br><span class="line">    Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">    p := &amp;v</span><br><span class="line">    p.X = <span class="number">1e9</span></span><br><span class="line">    fmt.Println(v.X)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结构体文法"><a class="markdownIt-Anchor" href="#结构体文法"></a> 结构体文法</h2><p>结构体文法通过直接列出字段的值来新分配一个结构体。</p><p>使用 <code>Name:</code> 语法可以仅列出部分字段。（字段名的顺序无关。）</p><p>特殊的前缀 <code>&amp;</code> 返回一个指向结构体的指针。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    v1 = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;  <span class="comment">// 创建一个 Vertex 类型的结构体</span></span><br><span class="line">    v2 = Vertex&#123;X: <span class="number">1</span>&#125;  <span class="comment">// Y:0 被隐式地赋予</span></span><br><span class="line">    v3 = Vertex&#123;&#125;      <span class="comment">// X:0 Y:0</span></span><br><span class="line">    p  = &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 创建一个 *Vertex 类型的结构体（指针）</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(v1, p, v2, v3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;1 2&#125; &amp;&#123;1 2&#125; &#123;1 0&#125; &#123;0 0&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h2><p>类型 <code>[n]T</code> 表示拥有 <code>n</code> 个 <code>T</code> 类型的值的数组。</p><p>表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a [10]int</span><br></pre></td></tr></table></figure><p>会将变量 <code>a</code> 声明为拥有 10 个整数的数组。</p><p>数组的长度是其类型的一部分，因此数组不能改变大小。这看起来是个限制，不过没关系，Go 提供了更加便利的方式来使用数组。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">2</span>]<span class="type">string</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="string">&quot;World&quot;</span></span><br><span class="line">    fmt.Println(a[<span class="number">0</span>], a[<span class="number">1</span>])</span><br><span class="line">    fmt.Println(a)</span><br><span class="line"></span><br><span class="line">    primes := [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">    fmt.Println(primes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br><span class="line">[Hello World]</span><br><span class="line">[2 3 5 7 11 13]</span><br></pre></td></tr></table></figure><h2 id="切片"><a class="markdownIt-Anchor" href="#切片"></a> 切片</h2><p>每个数组的大小都是固定的。而切片则为数组元素提供动态大小的、灵活的视角。在实践中，切片比数组更常用。</p><p>类型 <code>[]T</code> 表示一个元素类型为 <code>T</code> 的切片。</p><p>切片通过两个下标来界定，即一个上界和一个下界，二者以冒号分隔：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[low : high]</span><br></pre></td></tr></table></figure><p>它会选择一个半开区间，包括第一个元素，但排除最后一个元素。</p><p>以下表达式创建了一个切片，它包含 <code>a</code> 中下标从 1 到 3 的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[1:4]</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    primes := [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s []<span class="type">int</span> = primes[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="切片就像数组的引用"><a class="markdownIt-Anchor" href="#切片就像数组的引用"></a> 切片就像数组的引用</h2><p>切片并不存储任何数据，它只是描述了底层数组中的一段。</p><p>更改切片的元素会修改其底层数组中对应的元素。</p><p>与它共享底层数组的切片都会观测到这些修改。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    names := [<span class="number">4</span>]<span class="type">string</span>&#123;</span><br><span class="line">        <span class="string">&quot;John&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Paul&quot;</span>,</span><br><span class="line">        <span class="string">&quot;George&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Ringo&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(names)</span><br><span class="line"></span><br><span class="line">    a := names[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    b := names[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line"></span><br><span class="line">    b[<span class="number">0</span>] = <span class="string">&quot;XXX&quot;</span></span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line">    fmt.Println(names)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[John Paul George Ringo]</span><br><span class="line">[John Paul] [Paul George]</span><br><span class="line">[John XXX] [XXX George]</span><br><span class="line">[John XXX George Ringo]</span><br></pre></td></tr></table></figure><h2 id="切片的默认行为"><a class="markdownIt-Anchor" href="#切片的默认行为"></a> 切片的默认行为</h2><p>在进行切片时，你可以利用它的默认行为来忽略上下界。</p><p>切片下界的默认值为 <code>0</code>，上界则是该切片的长度。</p><p>对于数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a [10]int</span><br></pre></td></tr></table></figure><p>来说，以下切片是等价的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a[0:10]</span><br><span class="line">a[:10]</span><br><span class="line">a[0:]</span><br><span class="line">a[:]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    s := []int&#123;2, 3, 5, 7, 11, 13&#125;</span><br><span class="line"></span><br><span class="line">    s = s[1:4]</span><br><span class="line">    fmt.Println(s)</span><br><span class="line"></span><br><span class="line">    s = s[:2]</span><br><span class="line">    fmt.Println(s)</span><br><span class="line"></span><br><span class="line">    s = s[1:]</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[3 5 7]</span><br><span class="line">[3 5]</span><br><span class="line">[5]</span><br></pre></td></tr></table></figure><h2 id="切片的长度与容量"><a class="markdownIt-Anchor" href="#切片的长度与容量"></a> 切片的长度与容量</h2><p>切片拥有 <strong>长度</strong> 和 <strong>容量</strong>。</p><p>切片的长度就是它所包含的元素个数。</p><p>切片的容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。</p><p>切片 <code>s</code> 的长度和容量可通过表达式 <code>len(s)</code> 和 <code>cap(s)</code> 来获取。</p><p>你可以通过重新切片来扩展一个切片，给它提供足够的容量。试着修改示例程序中的切片操作，向外扩展它的容量，看看会发生什么。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">    printSlice(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 截取切片使其长度为 0</span></span><br><span class="line">    s = s[:<span class="number">0</span>]</span><br><span class="line">    printSlice(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拓展其长度</span></span><br><span class="line">    s = s[:<span class="number">4</span>]</span><br><span class="line">    printSlice(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 舍弃前两个值</span></span><br><span class="line">    s = s[<span class="number">2</span>:]</span><br><span class="line">    printSlice(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;len=%d cap=%d %v\n&quot;</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">len=6 cap=6 [2 3 5 7 11 13]</span><br><span class="line">len=0 cap=6 []</span><br><span class="line">len=4 cap=6 [2 3 5 7]</span><br><span class="line">len=2 cap=4 [5 7]</span><br></pre></td></tr></table></figure><h2 id="nil-切片"><a class="markdownIt-Anchor" href="#nil-切片"></a> nil 切片</h2><p>切片的零值是 <code>nil</code>。</p><p>nil 切片的长度和容量为 0 且没</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s []<span class="type">int</span></span><br><span class="line">    fmt.Println(s, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))</span><br><span class="line">    <span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;nil!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[] <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="literal">nil</span>!</span><br></pre></td></tr></table></figure><h2 id="用-make-创建切片"><a class="markdownIt-Anchor" href="#用-make-创建切片"></a> 用 make 创建切片</h2><p>切片可以用内建函数 <code>make</code> 来创建，这也是你创建动态数组的方式。</p><p><code>make</code> 函数会分配一个元素为零值的数组并返回一个引用了它的切片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a := make([]int, 5)  // len(a)=5</span><br></pre></td></tr></table></figure><p>要指定它的容量，需向 <code>make</code> 传入第三个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b := make([]int, 0, 5) // len(b)=0, cap(b)=5</span><br><span class="line"></span><br><span class="line">b = b[:cap(b)] // len(b)=5, cap(b)=5</span><br><span class="line">b = b[1:]      // len(b)=4, cap(b)=</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;a&quot;</span>, a)</span><br><span class="line"></span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;b&quot;</span>, b)</span><br><span class="line"></span><br><span class="line">    c := b[:<span class="number">2</span>]</span><br><span class="line">    printSlice(<span class="string">&quot;c&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    d := c[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">    printSlice(<span class="string">&quot;d&quot;</span>, d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s <span class="type">string</span>, x []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s len=%d cap=%d %v\n&quot;</span>,</span><br><span class="line">        s, <span class="built_in">len</span>(x), <span class="built_in">cap</span>(x), x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a len=5 cap=5 [0 0 0 0 0]</span><br><span class="line">b len=0 cap=5 []</span><br><span class="line">c len=2 cap=5 [0 0]</span><br><span class="line">d len=3 cap=3 [</span><br></pre></td></tr></table></figure><h2 id="向切片追加元素"><a class="markdownIt-Anchor" href="#向切片追加元素"></a> 向切片追加元素</h2><p>为切片追加新的元素是种常用的操作，为此 Go 提供了内建的 <code>append</code> 函数。内建函数的<a href="https://go-zh.org/pkg/builtin/#append">文档</a>对此函数有详细的介绍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func append(s []T, vs ...T) []T</span><br></pre></td></tr></table></figure><p><code>append</code> 的第一个参数 <code>s</code> 是一个元素类型为 <code>T</code> 的切片，其余类型为 <code>T</code> 的值将会追加到该切片的末尾。</p><p><code>append</code> 的结果是一个包含原切片所有元素加上新添加元素的切片。</p><p>当 <code>s</code> 的底层数组太小，不足以容纳所有给定的值时，它就会分配一个更大的数组。返回的切片会指向这个新分配的数组。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s []<span class="type">int</span></span><br><span class="line">    printSlice(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个空切片</span></span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="number">0</span>)</span><br><span class="line">    printSlice(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个切片会按需增长</span></span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="number">1</span>)</span><br><span class="line">    printSlice(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以一次性添加多个元素</span></span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    printSlice(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;len=%d cap=%d %v\n&quot;</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">len=0 cap=0 []</span><br><span class="line">len=1 cap=1 [0]</span><br><span class="line">len=2 cap=2 [0 1]</span><br><span class="line">len=5 cap=6 [0 1 2 3 4]</span><br></pre></td></tr></table></figure><h2 id="range"><a class="markdownIt-Anchor" href="#range"></a> Range</h2><p><code>for</code> 循环的 <code>range</code> 形式可遍历切片或映射。</p><p>当使用 <code>for</code> 循环遍历切片时，每次迭代都会返回两个值。第一个值为当前元素的下标，第二个值为该下标所对应元素的一份副本。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pow = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;2**%d = %d\n&quot;</span>, i, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2**0 = 1</span><br><span class="line">2**1 = 2</span><br><span class="line">2**2 = 4</span><br><span class="line">2**3 = 8</span><br><span class="line">2**4 = 16</span><br><span class="line">2**5 = 32</span><br><span class="line">2**6 = 64</span><br><span class="line">2**7 = 128</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="映射"><a class="markdownIt-Anchor" href="#映射"></a> 映射</h2><p>映射将键映射到值。</p><p>映射的零值为 <code>nil</code> 。<code>nil</code> 映射既没有键，也不能添加键。</p><p><code>make</code> 函数会返回给定类型的映射，并将其初始化备用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    Lat, Long <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]Vertex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]Vertex)</span><br><span class="line">    m[<span class="string">&quot;Bell Labs&quot;</span>] = Vertex&#123;</span><br><span class="line">        <span class="number">40.68433</span>, <span class="number">-74.39967</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(m[<span class="string">&quot;Bell Labs&quot;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;40.68433 -74.39967&#125;</span><br></pre></td></tr></table></figure><h2 id="映射的文法"><a class="markdownIt-Anchor" href="#映射的文法"></a> 映射的文法</h2><p>映射的文法与结构体相似，不过必须有键名。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    Lat, Long <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="type">string</span>]Vertex&#123;</span><br><span class="line">    <span class="string">&quot;Bell Labs&quot;</span>: Vertex&#123;</span><br><span class="line">        <span class="number">40.68433</span>, <span class="number">-74.39967</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;Google&quot;</span>: Vertex&#123;</span><br><span class="line">        <span class="number">37.42202</span>, <span class="number">-122.08408</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map[Bell Labs:&#123;40.68433 -74.39967&#125; Google:&#123;37.42202 -122.08408&#125;]</span><br></pre></td></tr></table></figure><h2 id="映射的文法续"><a class="markdownIt-Anchor" href="#映射的文法续"></a> 映射的文法（续）</h2><p>若顶级类型只是一个类型名，你可以在文法的元素中省略它。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    Lat, Long <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="type">string</span>]Vertex&#123;</span><br><span class="line">    <span class="string">&quot;Bell Labs&quot;</span>: &#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;,</span><br><span class="line">    <span class="string">&quot;Google&quot;</span>:    &#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改映射"><a class="markdownIt-Anchor" href="#修改映射"></a> 修改映射</h2><p>在映射 <code>m</code> 中插入或修改元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m[key] = elem</span><br></pre></td></tr></table></figure><p>获取元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elem = m[key]</span><br></pre></td></tr></table></figure><p>删除元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete(m, key)</span><br></pre></td></tr></table></figure><p>通过双赋值检测某个键是否存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elem, ok = m[key]</span><br></pre></td></tr></table></figure><p>若 <code>key</code> 在 <code>m</code> 中，<code>ok</code> 为 <code>true</code> ；否则，<code>ok</code> 为 <code>false</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    m := make(map[string]int)</span><br><span class="line"></span><br><span class="line">    m[&quot;Answer&quot;] = 42</span><br><span class="line">    fmt.Println(&quot;The value:&quot;, m[&quot;Answer&quot;])</span><br><span class="line"></span><br><span class="line">    m[&quot;Answer&quot;] = 48</span><br><span class="line">    fmt.Println(&quot;The value:&quot;, m[&quot;Answer&quot;])</span><br><span class="line"></span><br><span class="line">    delete(m, &quot;Answer&quot;)</span><br><span class="line">    fmt.Println(&quot;The value:&quot;, m[&quot;Answer&quot;])</span><br><span class="line"></span><br><span class="line">    v, ok := m[&quot;Answer&quot;]</span><br><span class="line">    fmt.Println(&quot;The value:&quot;, v, &quot;Present?&quot;, ok)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The value: 42</span><br><span class="line">The value: 48</span><br><span class="line">The value: 0</span><br><span class="line">The value: 0 Present? false</span><br></pre></td></tr></table></figure><h2 id="函数值"><a class="markdownIt-Anchor" href="#函数值"></a> 函数值</h2><p>函数也是值。它们可以像其它值一样传递。</p><p>函数值可以用作函数的参数或返回值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compute</span><span class="params">(fn <span class="keyword">func</span>(<span class="type">float64</span>, <span class="type">float64</span>)</span></span> <span class="type">float64</span>) <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    hypot := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> math.Sqrt(x*x + y*y)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(hypot(<span class="number">5</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">    fmt.Println(compute(hypot))</span><br><span class="line">    fmt.Println(compute(math.Pow))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">13</span><br><span class="line">5</span><br><span class="line">81</span><br></pre></td></tr></table></figure><h2 id="函数的闭包"><a class="markdownIt-Anchor" href="#函数的闭包"></a> 函数的闭包</h2><p>Go 函数可以是一个闭包。闭包是一个函数值，它引用了其函数体之外的变量。该函数可以访问并赋予其引用的变量的值，换句话说，该函数被这些变量“绑定”在一起。</p><p>例如，函数 <code>adder</code> 返回一个闭包。每个闭包都被绑定在其各自的 <code>sum</code> 变量上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func adder() func(int) int &#123;</span><br><span class="line">    sum := 0</span><br><span class="line">    return func(x int) int &#123;</span><br><span class="line">        sum += x</span><br><span class="line">        return sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    pos, neg := adder(), adder()</span><br><span class="line">    for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">        fmt.Println(</span><br><span class="line">            pos(i),</span><br><span class="line">            neg(-2*i),</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0 0</span><br><span class="line">1 -2</span><br><span class="line">3 -6</span><br><span class="line">6 -12</span><br><span class="line">10 -20</span><br><span class="line">15 -30</span><br><span class="line">21 -42</span><br><span class="line">28 -56</span><br><span class="line">36 -72</span><br><span class="line">45 -90</span><br></pre></td></tr></table></figure><h2 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h2><p>Go 没有类。不过你可以为结构体类型定义方法。</p><p>方法就是一类带特殊的 <strong>接收者</strong> 参数的函数。</p><p>方法接收者在它自己的参数列表内，位于 <code>func</code> 关键字和方法名之间。</p><p>在此例中，<code>Abs</code> 方法拥有一个名为 <code>v</code>，类型为 <code>Vertex</code> 的接收者。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(b.X*b.X + b.Y*b.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    fmt.Println(v.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="方法即函数"><a class="markdownIt-Anchor" href="#方法即函数"></a> 方法即函数</h2><p>记住：方法只是个带接收者参数的函数。</p><p>现在这个 <code>Abs</code> 的写法就是个正常的函数，功能并没有什么变化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Abs</span><span class="params">(v Vertex)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    fmt.Println(Abs(v))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="方法续"><a class="markdownIt-Anchor" href="#方法续"></a> 方法（续）</h2><p>你也可以为非结构体类型声明方法。</p><p>在此例中，我们看到了一个带 <code>Abs</code> 方法的数值类型 <code>MyFloat</code>。</p><p>你只能为在同一包内定义的类型的接收者声明方法，而不能为其它包内定义的类型（包括 <code>int</code> 之类的内建类型）的接收者声明方法。</p><p>（译注：就是接收者的类型定义和方法声明必须在同一包内；不能为内建类型声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyFloat <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">float64</span>(-f)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f := MyFloat(-math.Sqrt2)</span><br><span class="line">    fmt.Println(f.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.4142135623730951</span><br></pre></td></tr></table></figure><h2 id="指针接收者"><a class="markdownIt-Anchor" href="#指针接收者"></a> 指针接收者</h2><p>你可以为指针接收者声明方法。</p><p>这意味着对于某类型 <code>T</code>，接收者的类型可以用 <code>*T</code> 的文法。（此外，<code>T</code> 不能是像 <code>*int</code> 这样的指针。）</p><p>例如，这里为 <code>*Vertex</code> 定义了 <code>Scale</code> 方法。</p><p>指针接收者的方法可以修改接收者指向的值（就像 <code>Scale</code> 在这做的）。由于方法经常需要修改它的接收者，指针接收者比值接收者更常用。</p><p>试着移除第 16 行 <code>Scale</code> 函数声明中的 <code>*</code>，观察此程序的行为如何变化。</p><p>若使用值接收者，那么 <code>Scale</code> 方法会对原始 <code>Vertex</code> 值的副本进行操作。（对于函数的其它参数也是如此。）``Scale<code>方法必须用指针接受者来更改</code>main<code>函数中声明的</code>Vertex` 的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Scale(f <span class="type">float64</span>) &#123;</span><br><span class="line">    v.X = v.X * f</span><br><span class="line">    v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    v.Scale(<span class="number">10</span>)</span><br><span class="line">    fmt.Println(v.Abs())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">50</span><br></pre></td></tr></table></figure><h2 id="指针与函数"><a class="markdownIt-Anchor" href="#指针与函数"></a> 指针与函数</h2><p>现在我们要把 <code>Abs</code> 和 <code>Scale</code> 方法重写为函数。</p><p>同样，我们先试着移除掉第 16 的 <code>*</code>。你能看出为什么程序的行为改变了吗？要怎样做才能让该示例顺利通过编译？</p><p>（若你不确定，继续往下看。）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Abs</span><span class="params">(v Vertex)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Scale</span><span class="params">(v *Vertex, f <span class="type">float64</span>)</span></span> &#123;</span><br><span class="line">    v.X = v.X * f</span><br><span class="line">    v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    Scale(&amp;v, <span class="number">10</span>)</span><br><span class="line">    fmt.Println(Abs(v))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法与指针重定向"><a class="markdownIt-Anchor" href="#方法与指针重定向"></a> 方法与指针重定向</h2><p>比较前两个程序，你大概会注意到带指针参数的函数必须接受一个指针：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v Vertex</span><br><span class="line">ScaleFunc(v, <span class="number">5</span>)  <span class="comment">// 编译错误！</span></span><br><span class="line">ScaleFunc(&amp;v, <span class="number">5</span>) <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>而以指针为接收者的方法被调用时，接收者既能为值又能为指针：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v Vertex</span><br><span class="line">v.Scale(<span class="number">5</span>)  <span class="comment">// OK</span></span><br><span class="line">p := &amp;v</span><br><span class="line">p.Scale(<span class="number">10</span>) <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>对于语句 <code>v.Scale(5)</code>，即便 <code>v</code> 是个值而非指针，带指针接收者的方法也能被直接调用。 也就是说，由于 <code>Scale</code> 方法有一个指针接收者，为方便起见，Go 会将语句 <code>v.Scale(5)</code> 解释为 <code>(&amp;v).Scale(5)</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Scale(f <span class="type">float64</span>) &#123;</span><br><span class="line">    v.X = v.X * f</span><br><span class="line">    v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScaleFunc</span><span class="params">(v *Vertex, f <span class="type">float64</span>)</span></span> &#123;</span><br><span class="line">    v.X = v.X * f</span><br><span class="line">    v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    v.Scale(<span class="number">2</span>)</span><br><span class="line">    ScaleFunc(&amp;v, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    p := &amp;Vertex&#123;<span class="number">4</span>, <span class="number">3</span>&#125;</span><br><span class="line">    p.Scale(<span class="number">3</span>)</span><br><span class="line">    ScaleFunc(p, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(v, p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;60 80&#125; &amp;&#123;96 72&#125;</span><br></pre></td></tr></table></figure><h2 id="方法与指针重定向续"><a class="markdownIt-Anchor" href="#方法与指针重定向续"></a> 方法与指针重定向（续）</h2><p>同样的事情也发生在相反的方向。</p><p>接受一个值作为参数的函数必须接受一个指定类型的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var v Vertex</span><br><span class="line">fmt.Println(AbsFunc(v))  // OK</span><br><span class="line">fmt.Println(AbsFunc(&amp;v)) // 编译错误！</span><br></pre></td></tr></table></figure><p>而以值为接收者的方法被调用时，接收者既能为值又能为指针：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var v Vertex</span><br><span class="line">fmt.Println(v.Abs()) // OK</span><br><span class="line">p := &amp;v</span><br><span class="line">fmt.Println(p.Abs()) // OK</span><br></pre></td></tr></table></figure><p>这种情况下，方法调用 <code>p.Abs()</code> 会被解释为 <code>(*p).Abs()</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AbsFunc</span><span class="params">(v Vertex)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    fmt.Println(v.Abs())</span><br><span class="line">    fmt.Println(AbsFunc(v))</span><br><span class="line"></span><br><span class="line">    p := &amp;Vertex&#123;<span class="number">4</span>, <span class="number">3</span>&#125;</span><br><span class="line">    fmt.Println(p.Abs())</span><br><span class="line">    fmt.Println(AbsFunc(*p))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="选择值或指针作为接收者"><a class="markdownIt-Anchor" href="#选择值或指针作为接收者"></a> 选择值或指针作为接收者</h2><p>使用指针接收者的原因有二：</p><p>首先，方法能够修改其接收者指向的值。</p><p>其次，这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样做会更加高效。</p><p>在本例中，<code>Scale</code> 和 <code>Abs</code> 接收者的类型为 <code>*Vertex</code>，即便 <code>Abs</code> 并不需要修改其接收者。</p><p>通常来说，所有给定类型的方法都应该有值或指针接收者，但并不应该二者混用。（我们会在接下来几页中明白为什么。）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Scale(f <span class="type">float64</span>) &#123;</span><br><span class="line">    v.X = v.X * f</span><br><span class="line">    v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v := &amp;Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Before scaling: %+v, Abs: %v\n&quot;</span>, v, v.Abs())</span><br><span class="line">    v.Scale(<span class="number">5</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;After scaling: %+v, Abs: %v\n&quot;</span>, v, v.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Before scaling: &amp;&#123;X:3 Y:4&#125;, Abs: 5</span><br><span class="line">After scaling: &amp;&#123;X:15 Y:20&#125;, Abs: 25</span><br></pre></td></tr></table></figure><h2 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h2><p><strong>接口类型</strong> 是由一组方法签名定义的集合。</p><p>接口类型的变量可以保存任何实现了这些方法的值。</p><p><strong>注意:</strong> 示例代码的 22 行存在一个错误。由于 <code>Abs</code> 方法只为 <code>*Vertex</code> （指针类型）定义，因此 <code>Vertex</code>（值类型）并未实现 <code>Abser</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Abser <span class="keyword">interface</span> &#123;</span><br><span class="line">    Abs() <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a Abser</span><br><span class="line">    f := MyFloat(-math.Sqrt2)</span><br><span class="line">    v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">    a = f  <span class="comment">// a MyFloat 实现了 Abser</span></span><br><span class="line">    a = &amp;v <span class="comment">// a *Vertex 实现了 Abser</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面一行，v 是一个 Vertex（而不是 *Vertex）</span></span><br><span class="line">    <span class="comment">// 所以没有实现 Abser。</span></span><br><span class="line">    a = v</span><br><span class="line"></span><br><span class="line">    fmt.Println(a.Abs())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyFloat <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">float64</span>(-f)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口与隐式实现"><a class="markdownIt-Anchor" href="#接口与隐式实现"></a> 接口与隐式实现</h2><p>类型通过实现一个接口的所有方法来实现该接口。既然无需专门显式声明，也就没有“implements”关键字。</p><p>隐式接口从接口的实现中解耦了定义，这样接口的实现可以出现在任何包中，无需提前准备。</p><p>因此，也就无需在每一个实现上增加新的接口名称，这样同时也鼓励了明确的接口定义。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">    M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    S <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此方法表示类型 T 实现了接口 I，但我们无需显式声明此事。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span></span> M() &#123;</span><br><span class="line">    fmt.Println(t.S)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i I = T&#123;<span class="string">&quot;hello&quot;</span>&#125;</span><br><span class="line">    i.M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="接口值"><a class="markdownIt-Anchor" href="#接口值"></a> 接口值</h2><p>接口也是值。它们可以像其它值一样传递。</p><p>接口值可以用作函数的参数或返回值。</p><p>在内部，接口值可以看做包含值和具体类型的元组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(value, type)</span><br></pre></td></tr></table></figure><p>接口值保存了一个具体底层类型的具体值。</p><p>接口值调用方法时会执行其底层类型的同名方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">    M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    S <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span></span> M() &#123;</span><br><span class="line">    fmt.Println(t.S)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> F <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f F)</span></span> M() &#123;</span><br><span class="line">    fmt.Println(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i I</span><br><span class="line"></span><br><span class="line">    i = &amp;T&#123;<span class="string">&quot;Hello&quot;</span>&#125;</span><br><span class="line">    describe(i)</span><br><span class="line">    i.M()</span><br><span class="line"></span><br><span class="line">    i = F(math.Pi)</span><br><span class="line">    describe(i)</span><br><span class="line">    i.M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">describe</span><span class="params">(i I)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;(%v, %T)\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&amp;&#123;Hello&#125;, *main.T)</span><br><span class="line">Hello</span><br><span class="line">(<span class="number">3.141592653589793</span>, main.F)</span><br><span class="line"><span class="number">3.141592653589793</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="底层值为-nil-的接口值"><a class="markdownIt-Anchor" href="#底层值为-nil-的接口值"></a> 底层值为 nil 的接口值</h2><p>即便接口内的具体值为 nil，方法仍然会被 nil 接收者调用。</p><p>在一些语言中，这会触发一个空指针异常，但在 Go 中通常会写一些方法来优雅地处理它（如本例中的 <code>M</code> 方法）。</p><p><strong>注意:</strong> 保存了 nil 具体值的接口其自身并不为 nil。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">    M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    S <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span></span> M() &#123;</span><br><span class="line">    <span class="keyword">if</span> t == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;&lt;nil&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(t.S)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i I</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> t *T</span><br><span class="line">    i = t</span><br><span class="line">    describe(i)</span><br><span class="line">    i.M()</span><br><span class="line"></span><br><span class="line">    i = &amp;T&#123;<span class="string">&quot;hello&quot;</span>&#125;</span><br><span class="line">    describe(i)</span><br><span class="line">    i.M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">describe</span><span class="params">(i I)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;(%v, %T)\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&lt;nil&gt;, *main.T)</span><br><span class="line">&lt;nil&gt;</span><br><span class="line">(&amp;&#123;hello&#125;, *main.T)</span><br><span class="line">hello</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="nil-接口值"><a class="markdownIt-Anchor" href="#nil-接口值"></a> nil 接口值</h2><p>nil 接口值既不保存值也不保存具体类型。</p><p>为 nil 接口调用方法会产生运行时错误，因为接口的元组内并未包含能够指明该调用哪个 <strong>具体</strong> 方法的类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">    M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i I</span><br><span class="line">    describe(i)</span><br><span class="line">    i.M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">describe</span><span class="params">(i I)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;(%v, %T)\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(&lt;nil&gt;, &lt;nil&gt;)</span><br><span class="line">panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x492e3f]</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">main.main()</span><br><span class="line">    /tmp/sandbox891365133/prog.go:12 +0x8f</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="空接口"><a class="markdownIt-Anchor" href="#空接口"></a> 空接口</h2><p>指定了零个方法的接口值被称为 <em>空接口：</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface&#123;&#125;</span><br></pre></td></tr></table></figure><p>空接口可保存任何类型的值。（因为每个类型都至少实现了零个方法。）</p><p>空接口被用来处理未知类型的值。例如，<code>fmt.Print</code> 可接受类型为 <code>interface&#123;&#125;</code> 的任意数量的参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    describe(i)</span><br><span class="line"></span><br><span class="line">    i = <span class="number">42</span></span><br><span class="line">    describe(i)</span><br><span class="line"></span><br><span class="line">    i = <span class="string">&quot;hello&quot;</span></span><br><span class="line">    describe(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">describe</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;(%v, %T)\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(&lt;nil&gt;, &lt;nil&gt;)</span><br><span class="line">(42, int)</span><br><span class="line">(hello, string)</span><br></pre></td></tr></table></figure><h2 id="类型断言"><a class="markdownIt-Anchor" href="#类型断言"></a> 类型断言</h2><p><strong>类型断言</strong> 提供了访问接口值底层具体值的方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t := i.(T)</span><br></pre></td></tr></table></figure><p>该语句断言接口值 <code>i</code> 保存了具体类型 <code>T</code>，并将其底层类型为 <code>T</code> 的值赋予变量 <code>t</code>。</p><p>若 <code>i</code> 并未保存 <code>T</code> 类型的值，该语句就会触发一个恐慌。</p><p>为了 <strong>判断</strong> 一个接口值是否保存了一个特定的类型，类型断言可返回两个值：其底层值以及一个报告断言是否成功的布尔值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t, ok := i.(T)</span><br></pre></td></tr></table></figure><p>若 <code>i</code> 保存了一个 <code>T</code>，那么 <code>t</code> 将会是其底层值，而 <code>ok</code> 为 <code>true</code>。</p><p>否则，<code>ok</code> 将为 <code>false</code> 而 <code>t</code> 将为 <code>T</code> 类型的零值，程序并不会产生恐慌。</p><p>请注意这种语法和读取一个映射时的相同之处。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line">    s := i.(<span class="type">string</span>)</span><br><span class="line">    fmt.Println(s)</span><br><span class="line"></span><br><span class="line">    s, ok := i.(<span class="type">string</span>)</span><br><span class="line">    fmt.Println(s, ok)</span><br><span class="line"></span><br><span class="line">    f, ok := i.(<span class="type">float64</span>)</span><br><span class="line">    fmt.Println(f, ok)</span><br><span class="line"></span><br><span class="line">    f = i.(<span class="type">float64</span>) <span class="comment">// 报错(panic)</span></span><br><span class="line">    fmt.Println(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">hello true</span><br><span class="line">0 false</span><br><span class="line">panic: interface conversion: interface &#123;&#125; is string, not float64</span><br></pre></td></tr></table></figure><h2 id="类型选择"><a class="markdownIt-Anchor" href="#类型选择"></a> 类型选择</h2><p><strong>类型选择</strong> 是一种按顺序从几个类型断言中选择分支的结构。</p><p>类型选择与一般的 switch 语句相似，不过类型选择中的 case 为类型（而非值）， 它们针对给定接口值所存储的值的类型进行比较。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">switch v := i.(type) &#123;</span><br><span class="line">case T:</span><br><span class="line">    // v 的类型为 T</span><br><span class="line">case S:</span><br><span class="line">    // v 的类型为 S</span><br><span class="line">default:</span><br><span class="line">    // 没有匹配，v 与 i 的类型相同</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型选择中的声明与类型断言 <code>i.(T)</code> 的语法相同，只是具体类型 <code>T</code> 被替换成了关键字 <code>type</code>。</p><p>此选择语句判断接口值 <code>i</code> 保存的值类型是 <code>T</code> 还是 <code>S</code>。在 <code>T</code> 或 <code>S</code> 的情况下，变量 <code>v</code> 会分别按 <code>T</code> 或 <code>S</code> 类型保存 <code>i</code> 拥有的值。在默认（即没有匹配）的情况下，变量 <code>v</code> 与 <code>i</code> 的接口类型和值相同。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Twice %v is %v\n&quot;</span>, v, v*<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%q is %v bytes long\n&quot;</span>, v, <span class="built_in">len</span>(v))</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;I don&#x27;t know about type %T!\n&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    do(<span class="number">21</span>)</span><br><span class="line">    do(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    do(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Twice 21 is 42</span><br><span class="line">&quot;hello&quot; is 5 bytes long</span><br><span class="line">I don&#x27;t know about type bool!</span><br></pre></td></tr></table></figure><h2 id="stringer"><a class="markdownIt-Anchor" href="#stringer"></a> Stringer</h2><p><a href="https://go-zh.org/pkg/fmt/"><code>fmt</code></a> 包中定义的 <a href="https://go-zh.org/pkg/fmt/#Stringer"><code>Stringer</code></a> 是最普遍的接口之一。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Stringer interface &#123;</span><br><span class="line">    String() string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Stringer</code> 是一个可以用字符串描述自己的类型。<code>fmt</code> 包（还有很多包）都通过此接口来打印值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%v (%v years)&quot;</span>, p.Name, p.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := Person&#123;<span class="string">&quot;Arthur Dent&quot;</span>, <span class="number">42</span>&#125;</span><br><span class="line">    z := Person&#123;<span class="string">&quot;Zaphod Beeblebrox&quot;</span>, <span class="number">9001</span>&#125;</span><br><span class="line">    fmt.Println(a, z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arthur Dent (42 years) Zaphod Beeblebrox (9001 years)</span><br></pre></td></tr></table></figure><h2 id="错误"><a class="markdownIt-Anchor" href="#错误"></a> 错误</h2><p>Go 程序使用 <code>error</code> 值来表示错误状态。</p><p>与 <code>fmt.Stringer</code> 类似，<code>error</code> 类型是一个内建接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type error interface &#123;</span><br><span class="line">    Error() string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（与 <code>fmt.Stringer</code> 类似，<code>fmt</code> 包在打印值时也会满足 <code>error</code>。）</p><p>通常函数会返回一个 <code>error</code> 值，调用的它的代码应当判断这个错误是否等于 <code>nil</code> 来进行错误处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i, err := strconv.Atoi(&quot;42&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">    fmt.Printf(&quot;couldn&#x27;t convert number: %v\n&quot;, err)</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;Converted integer:&quot;, i)</span><br></pre></td></tr></table></figure><p><code>error</code> 为 nil 时表示成功；非 nil 的 <code>error</code> 表示失败。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123;</span><br><span class="line">    When time.Time</span><br><span class="line">    What <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *MyError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;at %v, %s&quot;</span>,</span><br><span class="line">        e.When, e.What)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;MyError&#123;</span><br><span class="line">        time.Now(),</span><br><span class="line">        <span class="string">&quot;it didn&#x27;t work&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="reader"><a class="markdownIt-Anchor" href="#reader"></a> Reader</h2><p><code>io</code> 包指定了 <code>io.Reader</code> 接口，它表示从数据流的末尾进行读取。</p><p>Go 标准库包含了该接口的<a href="https://go-zh.org/search?q=Read#Global">许多实现</a>，包括文件、网络连接、压缩和加密等等。</p><p><code>io.Reader</code> 接口有一个 <code>Read</code> 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func (T) Read(b []byte) (n int, err error)</span><br></pre></td></tr></table></figure><p><code>Read</code> 用数据填充给定的字节切片并返回填充的字节数和错误值。在遇到数据流的结尾时，它会返回一个 <code>io.EOF</code> 错误。</p><p>示例代码创建了一个 <a href="https://go-zh.org/pkg/strings/#Reader"><code>strings.Reader</code></a> 并以每次 8 字节的速度读取它的输出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := strings.NewReader(<span class="string">&quot;Hello, Reader!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        n, err := r.Read(b)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;n = %v err = %v b = %v\n&quot;</span>, n, err, b)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;b[:n] = %q\n&quot;</span>, b[:n])</span><br><span class="line">        <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = 8 err = &lt;nil&gt; b = [72 101 108 108 111 44 32 82]</span><br><span class="line">b[:n] = &quot;Hello, R&quot;</span><br><span class="line">n = 6 err = &lt;nil&gt; b = [101 97 100 101 114 33 32 82]</span><br><span class="line">b[:n] = &quot;eader!&quot;</span><br><span class="line">n = 0 err = EOF b = [101 97 100 101 114 33 32 82]</span><br><span class="line">b[:n] = &quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> print*,&quot;hello world!!!&quot; </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超基础链表超完整代码实例大概</title>
      <link href="/posts/c5f13f7/"/>
      <url>/posts/c5f13f7/</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p>为了快速记忆，以及遗忘速查，也为了减少碎片化记忆（这是什么鬼？。该板块的代码样例为完整版，本着复制就能运行的态度，大概会持续更新吧</p></div><h3 id="创建链表"><a class="markdownIt-Anchor" href="#创建链表"></a> 创建链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span> *listnode;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    listnode next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">listnode <span class="title">create</span><span class="params">(<span class="type">int</span> a[])</span></span>&#123;</span><br><span class="line">    listnode p,pre,head;</span><br><span class="line">    head=<span class="keyword">new</span> node;</span><br><span class="line">    head-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">    pre=head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        p=<span class="keyword">new</span> node;</span><br><span class="line">        p-&gt;data=a[i];</span><br><span class="line">        p-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">        pre-&gt;next=p;</span><br><span class="line">        pre=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    listnode k=<span class="built_in">create</span>(a);</span><br><span class="line">    k=k-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(k!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        cout&lt;&lt;k-&gt;data;</span><br><span class="line">        k=k-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找元素"><a class="markdownIt-Anchor" href="#查找元素"></a> 查找元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(listnode head,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;<span class="comment">//计数器</span></span><br><span class="line">        listnode p=head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data==x)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入元素"><a class="markdownIt-Anchor" href="#插入元素"></a> 插入元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(listnode head, <span class="type">int</span> pos, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    listnode p=head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pos<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125; <span class="comment">//c插入到位置的前一个节点，就是pos-1哒</span></span><br><span class="line">    listnode q=<span class="keyword">new</span> node;</span><br><span class="line">    q-&gt;data=x;</span><br><span class="line">    q-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><a class="markdownIt-Anchor" href="#删除元素"></a> 删除元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(listnode head,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    listnode p=head-&gt;next;<span class="comment">//p从第一个节点开始枚举</span></span><br><span class="line">    listnode pre=head;<span class="comment">//pre始终保存前驱节点的指针</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data==x)&#123;</span><br><span class="line">            pre-&gt;next=p-&gt;next;</span><br><span class="line">            <span class="built_in">delete</span>(p);</span><br><span class="line">            p=pre-&gt;next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果不是x；吧pre和p都后移一位</span></span><br><span class="line">            pre=p;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/posts/a444b428/"/>
      <url>/posts/a444b428/</url>
      
        <content type="html"><![CDATA[<p>排序嘛之前也不是没写过，就在刚刚水了1000字的时候，我一个ctrl+z按过火了导致不小心没有保存的源文件付诸东流，太草率了，现在说起来心情就有点低落，罢了罢了，我的心情真的平复下来了。话说之前也草草的整理过两篇排序的文章，不过现在在看向曾经整理的东西，啊太幼稚了</p><h2 id="性能对比"><a class="markdownIt-Anchor" href="#性能对比"></a> 性能对比</h2><escape> <table >      <tr><th rowspan="2">类别</th><th rowspan="2">排序方法</th><th colspan="3">时间复杂度</th><th>空间复杂度</th><th rowspan="2">稳定性</th></tr>   <tr><td>最好情况</td><td>最坏情况</td><td>平均情况</td><td>辅助储存</td></tr>   <tr><td rowspan="2">插入排序</td><td>直接插入排序</td><td>O(n)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>希尔排序</td><td>O(n)</td><td>O(n^2)</td><td>~O(n^1.3)</td><td>O(1)</td><td>不稳定</td></tr><tr><td rowspan="2">交换排序</td><td>冒泡排序</td><td>O(n)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>快速排序</td><td>O(nlogn)</td><td>O(n^2)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>不稳定</td></tr><tr><td rowspan="2">选择排序</td><td>直接选择排序</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>堆排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n^2)</td><td>不稳定</td></tr><tr><td colspan="2">归并排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n)</td><td>不稳定</td></tr><tr><td colspan="2">基数排序K:代排元素的维数，m为基数个数</td><td>O(m+n)</td><td>O(k*(n+m))</td><td>O(k*(n+m))</td><td>O(m+n)</td><td>稳定</td></tr></table>   </escape> <p>pssss：makedown语法并没有合并单元格的功能，利用支持html语法的特性纯手撸，嗯看起来果然有点丑</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/laji.jpg" alt="" /></p><h2 id="排序有以下几类"><a class="markdownIt-Anchor" href="#排序有以下几类"></a> 排序有以下几类</h2><table><thead><tr><th>种类</th><th>方式1</th><th>方式2</th></tr></thead><tbody><tr><td>按储存介质分</td><td>内部排序</td><td>外部排序</td></tr><tr><td>按比较器个个数分</td><td>串行排序：单处理器</td><td>并行排序：多处理器</td></tr><tr><td>按主要操作分</td><td>比较排序</td><td>基数排序</td></tr><tr><td>按辅助空间分</td><td>原理排序</td><td>非原地排序</td></tr><tr><td>按稳定性分</td><td>稳定排序：eg插入排序</td><td>非稳定排序：eg选择排序</td></tr><tr><td>按自然性分</td><td>自然排序</td><td>非自然排序</td></tr></tbody></table><h2 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序"></a> 插入排序</h2><h3 id="直接插入排序"><a class="markdownIt-Anchor" href="#直接插入排序"></a> 直接插入排序</h3><p>插入排序是应该是最简单的排序算法之一了，不过排序算法也没几个。插入排序又N-1趟排序组成，对于P=1到P=N-1趟，插入排序利用了这样的事实；其实从0到位置P上的元素为以排序状态。插入排序利用了这样的事实。0到P-1的元素是已经排过序的。大致过程入下</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/insertsort.jpg" alt="" /></p><blockquote><p>不难知道，插入排序是将待插入元素一个个的插入到已有序的过程中，插入位置遵循了使用插入仍然保持有序的原则，具体做法是从后往前枚举已有的部分来确定插入位置。具体实现代码如下</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span>&amp;lt;bits/stdc++.h&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertsort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> temp=a[i];<span class="type">int</span> j=i;</span><br><span class="line">            <span class="keyword">while</span> (j&gt;<span class="number">0</span>&amp;&amp;temp&lt;a[j<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                a[j]=a[j<span class="number">-1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">           a[j]=temp; </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">insertsort</span>(a,<span class="number">9</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">    cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h2><h3 id="直接选择排序"><a class="markdownIt-Anchor" href="#直接选择排序"></a> 直接选择排序</h3><p>选择排序也算是最简单的排序算法之一了。没错又是之一（滑稽。甚至我用的这本教程已经自动省略了这个排序算法。这样大概就可以冠以最简单的排序算法之名了吧（雾。简单选择排序是指对于一个序列A[1]~A[n],令i从1到n枚举，进行n糖操作，每趟从待排序[i,n]中选择最小元素。令其与待排序部分的第一个元素A[i]进行交换，这样子的话元素A[i]就会与当前的有序区间[1,i-1]，形成新的有序区间[1,i]，于是在进行n趟排序后，元素就会是有序的。</p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/selectsort2.jpg"  /><p>实现代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> &amp;lt;bits/stdc++.h&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectsort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> k=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[k]&gt;a[j])</span><br><span class="line">            k=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(a[i],a[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="built_in">selectsort</span>(a,<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        cout &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>选择排序虽然很简单不错啦，但是由于时间复杂度为O(n<sup>2)的原因其实大部分情况都不能处理，大概只能处理10</sup>5这个范围只能的数据。所以在使用的时候要记住上限条件。</p></blockquote><p>kaguyasama哇哇哇哇哇哇哇！！！！！！！</p><p>我已经鸽了好久了！！jojo！！！我不写博客啦！！</p><h3 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序"></a> 堆排序</h3><p>大概简介上只有那么短短三句话，</p><ul><li>对所有记录建 <a href="https://oi-wiki.org/ds/heap/">堆</a> 。</li><li>依次取出堆顶元素，就可以得到排好序的序列。</li><li>时间复杂度为O(nlogn) 。</li></ul><p>堆即是一个可以看作为完全二叉树的数组。《算法导论》第三版这样定义：</p><blockquote><p>*The(binary) heap data structure is an array object that we can view<br />as a nearly completely binary tree.</p></blockquote><p>只要一个序列可以看作为一个完全二叉树，它又满足堆的性质，那么它就可以称<br />之为一个堆。——一个数组可以这样看成一个完全二叉树，将第一个数看作根结点，<br />第二和第三个数看作第一个数的左孩子和右孩子，…，将第<em>2n</em>和第<em>2n+1</em>数看作<br />是第n个数的两个孩子。</p><p>堆可以分为大堆和小堆，所谓堆属性是指结点应总是大于它的孩子，此为大堆属性。<br />对于小堆来讲则反之。也就是说堆的根结点总是存储着最大或最小的数，当一个完<br />全二叉树中所有的结点都满足堆属性时此完全二叉树就可以看作为一个堆。</p><p>总的来讲，堆排序的要诀在于堆的一个特性——堆的根结点总是存储着最大或最小的<br />数。假使我们能将一组数建堆，那么只需要不断的在取出根结点和维持堆属性这两<br />步中不断循环就可以完成排序了</p><blockquote><p>以下是c++实现代码</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapAdjust</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;list, <span class="type">int</span> parent, <span class="type">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = list[parent];                    <span class="comment">// temp保存当前父节点</span></span><br><span class="line">    <span class="type">int</span> child = <span class="number">2</span> * parent + <span class="number">1</span>;                    <span class="comment">// 先获得左孩子</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (child &lt; length)&#123;</span><br><span class="line">        <span class="comment">// 如果有右孩子结点，并且右孩子结点的值大于左孩子结点，则选取右孩子结点</span></span><br><span class="line">        <span class="keyword">if</span> (child + <span class="number">1</span> &lt; length &amp;&amp; list[child] &lt; list[child + <span class="number">1</span>])&#123;</span><br><span class="line">            child++;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 如果有右孩子结点，并且右孩子结点的值大于左孩子结点，则选取右孩子结点</span></span><br><span class="line">        <span class="keyword">if</span> (temp &gt;= list[child])&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 把孩子结点的值赋给父结点</span></span><br><span class="line">        list[parent] = list[child];</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 选取孩子结点的左孩子结点,继续向下筛选</span></span><br><span class="line">        parent = child;</span><br><span class="line">        child = <span class="number">2</span> * parent + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    list[parent] = temp;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">HeadSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> length = list.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 循环建立初始堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="built_in">HeapAdjust</span>(list, i, length);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 进行n-1次循环，完成排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="comment">// 最后一个元素和第一元素进行交换</span></span><br><span class="line">        <span class="type">int</span> temp = list[i];</span><br><span class="line">        list[i] = list[<span class="number">0</span>];</span><br><span class="line">        list[<span class="number">0</span>] = temp;</span><br><span class="line">        </span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 筛选 R[0] 结点，得到i-1个结点的堆</span></span><br><span class="line">        <span class="built_in">HeapAdjust</span>(list, <span class="number">0</span>, i);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; length - i &lt;&lt; <span class="string">&quot;趟排序:&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            cout &lt;&lt; list[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">test</span><span class="params">(arr, arr + <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序前:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; test.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        cout &lt;&lt; test[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">    result = <span class="built_in">HeadSort</span>(test);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序后:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; result.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        cout &lt;&lt; result[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交换排序"><a class="markdownIt-Anchor" href="#交换排序"></a> 交换排序</h2><h3 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h3><p>冒泡排序原理实现很简单，要想轻松简单的理解的理解冒泡排序，可以吧数组理解成一个垂直猪蹄，其中最小的元素在顶部，最大的元素在底部。数组从底部往上扫描。就像水的冒泡原理一样，气泡是从底部一点点的往上冒的。如果相邻的两个元素逆序。则交换两者的位置，</p><p><strong>首先</strong></p><p>比较<strong>data[n-1]<strong>和</strong>data[n-2]<strong>之间的大小，如果逆序则互换，接着比较</strong>data[n-2]<strong>和</strong>data[n-3]</strong>。有需要时就改变他们的顺序，就这样一直一直的比较到<strong>data[1]<strong>到</strong>data[0]</strong>；就这样最小的元素就移动到了顶部。</p><p>然而，这只是完成了第一步。我们需要再次对数组进行扫描，比较剩下来的数据项。当有需要的时候需要交换位置。然后就这样哈一直一直的比下去，最后一项比较的是<strong>data[1]<strong>和</strong>data[0]</strong>;由于<strong>data[0]<strong>在第一次一定完成后已经是最小的了。也就是位置</strong>0</strong>，然而第二次冒泡最小的元素会放在第二个位置上也就是<strong>1</strong>！！！！！然后第三次第四次依次按照同样的方法就行了。到最后一步只需要比较**data[n-1]<strong>和</strong>data[n-2]**之间的大小就好了。</p><p>下面写上伪代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bubblesort</span>(data[],n)</span><br><span class="line">    <span class="keyword">for</span> i到n<span class="number">-2</span></span><br><span class="line">        <span class="keyword">for</span> j=n<span class="number">-1</span>到i+<span class="number">1</span></span><br><span class="line">            如果两者逆序，交换j和j<span class="number">-1</span>位置的元素</span><br></pre></td></tr></table></figure><h4 id="具体实现"><a class="markdownIt-Anchor" href="#具体实现"></a> 具体实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubblesort</span><span class="params">(<span class="type">int</span> data[], <span class="type">int</span> n)</span><span class="comment">//代码就不解释啦八</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">1</span>; j &gt; i; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[j] &lt; data[j - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(data[j], data[j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> a[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bubblesort</span>(a, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h3><p>快速排序(quicksort)是在实践中中目前最快的已知算法，平均运行为O(nlogn)，该算法超级快，主要是由于非常精炼和高度优化的内部循环，虽然他最坏的情况能达到O(n^2)，但只要稍加努力就能避免这种情况。</p><p>其核心思想是分治：选择数组中某个数作为基数，通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数都比基数小，另外一部分的所有数都都比基数大，然后再按此方法对这两部分数据分别进行快速排序，循环递归，最终使整个数组变成有序。</p><p>大概可以总结为一下三个过程</p><ol><li>将数列划分为两部分（不是直接分，要求保证相对大小关系）</li><li>递归到两个子序列中分别进行快速排序</li><li>不用合并，因为此时数列已经完全有序</li></ol><p>和归并排序不同，第一步并不是直接分成前后两个序列，而是在分的过程中要保证相对大小关系。第三步中的序列已经分别有序且第一个序列中的数都小于第二个数，所以直接拼接起来就好了。具体来说，第一步要是要把数列分成两个部分，然后保证前一个子数列中的数都小于后一个子数列中的数。怎么操作呢？</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/zazima.jpg" alt="" /></p><p>为了保证平均时间复杂度，一般是随机选择一个数 m 来当做两个子数列的分界。之后，维护一前一后两个指针 p 和 q，依次考虑当前的数是否放在了应该放的位置（前还是后），当前位置放对了之后，再移动指针继续处理，直到两个指针相遇。如果当前的数没放对呢？比如说如果后面的指针 q 遇到了一个比 m 小的数，那么可以交换 p 和 q 位置上的数，再把 p 向后移一位。其实，快速排序没有指定应如何具体实现第一步，不论是选择 m 的过程还是划分的过程，都不是只有一种实现方法。</p><p>一般我们说的快速排序的时间复杂度是平均为 O(nlogn)，最坏是 O(n^2)，实践中几乎不可能达到最坏情况。且因为快速排序的内存访问遵循局部性原理，多数情况下快速排序的表现大幅优于堆排序等其他复杂度为O(nlogn) 的排序算法。</p><p>其实，在选择 m 的过程中使用 <a href="https://en.wikipedia.org/wiki/Median_of_medians">Median of Medians</a> 算法，就可以保证最坏时间复杂度为 O(nlogn)，但是由于其过于复杂，实践中一般不使用。</p><h3 id="具体实现-2"><a class="markdownIt-Anchor" href="#具体实现-2"></a> 具体实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=a[left];</span><br><span class="line">    <span class="keyword">while</span> (left&lt;right)</span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(left&lt;right&amp;&amp;a[right]&gt;temp)right--;</span><br><span class="line">    a[left]=a[right];</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right&amp;&amp;a[left]&lt;temp)left++;</span><br><span class="line">    a[right]=a[left];</span><br><span class="line">&#125;</span><br><span class="line">a[left]=temp;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">    <span class="type">int</span> post=<span class="built_in">partition</span>(a,left,right);</span><br><span class="line">    <span class="built_in">quicksort</span>(a,left,post<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">quicksort</span>(a,post+<span class="number">1</span>,right);</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="built_in">quicksort</span>(a,<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a class="markdownIt-Anchor" href="#希尔排序"></a> 希尔排序</h2><blockquote><p>选择排序也是一种插入排序</p></blockquote><p>说起希尔排序当然是和他的发明者希尔有关系啦（雾，该算法算是最早的一批冲破二次屏障的算法的前辈了。过了若干年后才证明了他的亚二次界，原理是通过比较相距一定间隔的元素来工作；各趟比较所用的距离随着算法的进行而减小，直到比较相邻元素的最后一趟排序为止，所以希尔排序有时也被叫做缩小增量排序(<code>diminishing increment sort</code>)</p><p>大概实现图解</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/xier.webp" alt="" /></p><h3 id="重点来啦"><a class="markdownIt-Anchor" href="#重点来啦"></a> <s>重点来啦！！！</s></h3><p>Shell 排序是以它的发明者命名的（废话，也称为缩小增量排序法。Shell 排序对不相邻的记录进行比较和移动：</p><ol><li>将待排序序列分为若干子序列（每个子序列的元素在原始数组中间距相同）</li><li>对这些子序列进行插入排序</li><li>减小每个子序列中元素之间的间距，重复上述过程直至间距减少为 1</li></ol><p>Shell 排序的复杂度和间距序列的选取（就是间距如何减小到 1）有关，比如“间距每次除以 3”的 Shell 排序的复杂度是 O(n^2/3)。</p><h3 id="具体实现-3"><a class="markdownIt-Anchor" href="#具体实现-3"></a> 具体实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span>&amp;lt;bits/stdc++.h&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellsort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,Increment;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(Increment=n/<span class="number">2</span>;Increment&gt;<span class="number">0</span>;Increment/=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=Increment;i&lt;n;i++)&#123;</span><br><span class="line">            temp=a[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i;j&gt;=Increment;j-=Increment)</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;a[j-Increment])</span><br><span class="line">            a[j]=a[j-Increment];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            a[j]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[]=&#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">shellsort</span>(a,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h2><p>归并排序是一种采用了 <a href="https://oi-wiki.org/basic/divide-and-conquer/">分治</a> 思想的排序算法。</p><p>归并排序分为三个过程：</p><ol><li>将数列划分为两部分（在均匀划分时时间复杂度为 O（nlogn）；</li><li>递归地分别对两个子序列进行归并排序；</li><li>合并两个子序列。</li></ol><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/MERGE-SORT.png" alt="" /></p><p>不难发现，归并排序的核心是如何合并两个子序列，前两步都很好实现。直接撂代码</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/bqb.jpg" alt="" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> L1, <span class="type">int</span> R1, <span class="type">int</span> L2, <span class="type">int</span> R2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = L1, j = L2;</span><br><span class="line">    <span class="type">int</span> temp[maxn], index = <span class="number">0</span>;<span class="comment">//temp临时储存变量</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= R1 &amp;&amp; j &lt;= R2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] &lt;= A[j])</span><br><span class="line">        &#123;</span><br><span class="line">            temp[index++] = A[i++];<span class="comment">//如果满足条件将A[i]加入temp</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp[index++] = A[j++];<span class="comment">//否则加入A[j]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= R1)</span><br><span class="line">        temp[index++] = A[i++];<span class="comment">//加入剩余元素</span></span><br><span class="line">    <span class="keyword">while</span> (j &lt;= R2)</span><br><span class="line">        temp[index++] = A[j++];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A[L1 + i] = temp[i];<span class="comment">//合并或的序列赋值回数组A</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">mergeSort</span>(A, left, mid);</span><br><span class="line">        <span class="built_in">mergeSort</span>(A, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="built_in">merge</span>(A,left,mid,mid+<span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> A[] = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">mergeSort</span>(A, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>啊，对了加上非递归实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> A[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> step = <span class="number">2</span>; step / <span class="number">2</span> &lt; n; step *= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i += step)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = i + step / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid + <span class="number">1</span> &lt;= n)</span><br><span class="line">                <span class="built_in">merge</span>(A, i, mid, mid + <span class="number">1</span>, <span class="built_in">min</span>(i + step - <span class="number">1</span>, n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果想观察每一次排序后的结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> step = <span class="number">2</span>; step / <span class="number">2</span> &lt; <span class="number">9</span>; step *= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i += step)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sort</span>(a + i, a + <span class="built_in">min</span>(i + step, <span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">            cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基数排序"><a class="markdownIt-Anchor" href="#基数排序"></a> 基数排序</h2><p>首先，我们要有十个桶，和一个大桶（桶里的数根据先到先出的顺序，是一个队列，下文不作说明了）</p><p>第一步，把数组里的数依次放到桶里；</p><p>第二步，把倒数第i位（i从1开始）为k的数放到第k个桶里；</p><p>第三步，从第一个桶开始，把所有数放到大桶里；</p><p>第四步，重复第二、三步，直到所有数中的最大数倒数第i位是0；</p><p>排序完成</p><p>例如对<code>&#123;41, 467, 334, 500, 169, 724, 478, 358, 962, 464&#125;</code>进行基数排序。</p><p>1、–&gt; <code>&#123;500&#125;, &#123;41&#125;, &#123;962&#125;, &#123;334, 464&#125;, &#123;467&#125;, &#123;478, 358&#125;, &#123;169&#125;</code></p><p>2、–&gt; <code>&#123;500, 41, 962, 334, 464, 467, 478, 358, 169&#125;</code></p><p>3、–&gt; <code>&#123;500&#125;, &#123;724&#125;, &#123;334&#125;, &#123;41&#125;, &#123;358&#125;, &#123;962, 467, 169&#125;, &#123;478&#125;</code></p><p>4、–&gt; <code>&#123;500, 724, 334, 41, 358, 962, 467, 169, 478&#125;</code></p><p>5、–&gt; <code>&#123;041&#125;, &#123;169&#125;, &#123;334, 358&#125;, &#123;464, 467, 478&#125;, &#123;500&#125;, &#123;724&#125;, &#123;962&#125;</code></p><p>6、–&gt; <code>&#123;041, 169, 334, 358, 464, 467, 478, 500, 724, 962&#125;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求出数组中最大数的位数的函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MaxBit</span><span class="params">(vector&lt;<span class="type">int</span>&gt; input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 数组最大值</span></span><br><span class="line">    <span class="type">int</span> max_data = input[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; input.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (input[i] &gt; max_data)</span><br><span class="line">        &#123;</span><br><span class="line">            max_data = input[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组最大值的位数</span></span><br><span class="line">    <span class="type">int</span> bits_num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (max_data)</span><br><span class="line">    &#123;</span><br><span class="line">        bits_num++;</span><br><span class="line">        max_data /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bits_num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取数xxx上的第d位数字</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">digit</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> pow = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (--d &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pow *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num / pow % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基数排序</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">RadixSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; input, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 临时数组，用来存放排序过程中的数据</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">bucket</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="comment">// 位记数器，从第0个元素到第9个元素依次用来记录当前比较位是0的有多少个...是9的有多少个数</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 从低位往高位循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> d = <span class="number">1</span>; d &lt;= <span class="built_in">MaxBit</span>(input); d++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计数器清0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            count[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计各个桶中的个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            count[<span class="built_in">digit</span>(input[i], d)]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 比如某次经过上面统计后结果为：[0, 2, 3, 3, 0, 0, 0, 0, 0, 0]则经过下面计算后 结果为： [0, 2,</span></span><br><span class="line"><span class="comment">        * 5, 8, 8, 8, 8, 8, 8, 8]但实质上只有如下[0, 2, 5, 8, 0, 0, 0, 0, 0, 0]中</span></span><br><span class="line"><span class="comment">        * 非零数才用到，因为其他位不存在，它们分别表示如下：2表示比较位为1的元素可以存放在索引为1、0的</span></span><br><span class="line"><span class="comment">        * 位置，5表示比较位为2的元素可以存放在4、3、2三个(5-2=3)位置，8表示比较位为3的元素可以存放在</span></span><br><span class="line"><span class="comment">        * 7、6、5三个(8-5=3)位置</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 注，这里只能从数组后往前循环，因为排序时还需保持以前的已排序好的顺序，不应该打</span></span><br><span class="line"><span class="comment">        * 乱原来已排好的序，如果从前往后处理，则会把原来在前面会摆到后面去，因为在处理某个</span></span><br><span class="line"><span class="comment">        * 元素的位置时，位记数器是从大到到小（count[digit(arr[i], d)]--）的方式来处</span></span><br><span class="line"><span class="comment">        * 理的，即先存放索引大的元素，再存放索引小的元素，所以需从最后一个元素开始处理。</span></span><br><span class="line"><span class="comment">        * 如有这样的一个序列[212,213,312]，如果按照从第一个元素开始循环的话，经过第一轮</span></span><br><span class="line"><span class="comment">        * 后（个位）排序后，得到这样一个序列[312,212,213]，第一次好像没什么问题，但问题会</span></span><br><span class="line"><span class="comment">        * 从第二轮开始出现，第二轮排序后，会得到[213,212,312]，这样个位为3的元素本应该</span></span><br><span class="line"><span class="comment">        * 放在最后，但经过第二轮后却排在了前面了，所以出现了问题</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k = <span class="built_in">digit</span>(input[i], d);</span><br><span class="line">            bucket[count[k] - <span class="number">1</span>] = input[i];</span><br><span class="line">            count[k]--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 临时数组复制到 input 中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            input[i] = bucket[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">50</span>, <span class="number">123</span>, <span class="number">543</span>, <span class="number">187</span>, <span class="number">49</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">100</span>&#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">test</span><span class="params">(arr, arr + <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序前:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; test.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; test[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; result = test;</span><br><span class="line">    result = <span class="built_in">RadixSort</span>(result, result.<span class="built_in">size</span>());</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序后:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; result.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; result[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传统艺能"><a class="markdownIt-Anchor" href="#传统艺能"></a> 传统艺能</h2><p>最后给你们整个绝活，咕咕咕咕咕咕，这篇排序前前后后鸽了快一个月才写完，也参考了几篇文章。之所以为什么要鸽一个月嘛…因为当鸽子是真的爽。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/jiaxinjiang3.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> print*,&quot;hello world!!!&quot; </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法啦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于#include与html的奇怪冲突</title>
      <link href="/posts/3c41776c/"/>
      <url>/posts/3c41776c/</url>
      
        <content type="html"><![CDATA[<p>我遇到了一个棘手的问题，在线等，很急！！！当今天也是慢慢悠悠的打开博客那一瞬间突然发现头文件#include后面的东西全都不见了？？？比如说懒人专用头文件<code>#include&lt; bit/stdc++.h&gt;</code>莫名的变成了<code>#include</code>，本来以为我只是粗心忘记打了。不对，我怎么会犯那么愚蠢的错误，打开源文件一看，发现完整版头文件好好的躺在那？？？？然后查看我之前的源代码发现也都是出现了同样的问题？？？？？</p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/疑惑.jpg" style="zoom:80%;" /><p>一番操作猛如虎之后【雾】，得知这个<code>#include&lt;&gt;</code>与html的’&gt;‘和’&lt;'冲突所致但是由于提交blog的时候会对&lt;和&gt;进行转义，有时候修改了几次就转不成了(blog引擎的bug)，结果就被当作了一个不可识别的标签。</p><h2 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h2><ul><li>在#include&lt;后面加上空格</li></ul><p>但是这样显示出来时也会带上空格，强迫症表示有失美学，而且直接复制下来运行时还需要将原有多余的空格去掉，为什么？？？因为会编译报错啊笨蛋！！！作为一名懒人主义至上的完美人士我绝对采用第二种方法。</p><ul><li>使用字符实体<code>&quot;&amp; lt&quot;</code>和<code>“&amp; gt&quot;</code></li></ul><p>这样就没问题了，就是需要费力的换成&amp;lt和&amp;gt了。很好符合完全懒人精神【×】</p>]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buggggg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hash表</title>
      <link href="/posts/a1205a06/"/>
      <url>/posts/a1205a06/</url>
      
        <content type="html"><![CDATA[<p>散列表（也叫 Hash 表）是一种应用较为广泛的数据结构，几乎所有的高级编程语言都内置了散列表这种数据结构。在现代的编程语言中，几乎都会有散列表的身影，故而难以忽视它为程序员所带来的种种便利性。散列跟数组是很相似的，较大的区别在于，数组直接通过特定的索引来访问特定位置的数据，而散列表则是先通过<em>散列函数</em>来获取对应的索引，然后再定位到对应的存储位置。这是比较底层的知识了，一般的散列表，在底层都是通过数组来进行存储，利用数组作为底层存储的数据结构最大的好处在于它的随机访问特性，不管数组有多长，访问该数组的时间复杂度都是<code>O(1)</code>。当然这是针对某些情况，在实际应用中它的时间复杂度不一定的O（1）；显而易见这是一种空间换时间的做法、</p><h2 id="散列表有多简单呢"><a class="markdownIt-Anchor" href="#散列表有多简单呢"></a> 散列表有多简单呢</h2><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/Hash.png" alt="" /></p><p>散列表在结构上真的是不能再简单了，它是一个包含关键字的具有固定数组的大小。每个关键字被映射到0~TableSize-1这个范围中的某个数，并且被放到适当的单元中，这个映射就叫做散列函数，当然映射的方式就是根据散列函数来制定的。最常见的就是这个关键字(Key)是几就映射到第几个单元，不过这样子的话空间利用率显然不让人感到满意。</p><p>当然要设计一个能用的散列表，在底层仅仅用普通的数组是不够的，毕竟我们需要存储的不仅仅是数值类型，还可能会存储字符串为键，字符串为值，或者以字符串为键，某个函数的指针为值 的键值对。在这类情况中，我们需要对底层的结点进行精心设计，才能够让散列表存储更多元化的数据。</p><p>无论以何种数据类型为键，我们始终都需要有把键转换成底层数组任意位置索引的能力，通过散列函数可以做到这一点。散列函数是个很考究的东西，设计得不好可能会导致频繁出现多个不同的键映射到同一个索引值的现象，这种现象称之为<strong>冲突</strong>。除此之外，每次为散列表所分配的空间是有限的，随着元素的插入，散列表会越来越满，这时，冲突的几率就越高。故而，我们需要定期对散列表进行扩张，并把已有的键值对重新映射到新的空间中去，让散列表中的键值对更加分散，降低冲突的几率。这个过程被称为 Resize。这个过程能够在一定程度上降低散列表的冲突几率，提高查找效率。</p><h2 id="为什么不用链表来储存键值"><a class="markdownIt-Anchor" href="#为什么不用链表来储存键值"></a> 为什么不用链表来储存键值</h2><p>对于链表虽然不会有所谓的冲突产生，但是对于链表来说不管是插入，查找还是删除都需要遍历整个链表，假设稍稍运气不好点最坏情况下时间复杂度可能都是<code>O(n)</code>，假设我们储存少量的键值。看起来是没什么问题，但是如果储存大量的键值所花费的时间成本可能真的是令人难以接受。然而对于散列来说只要保证没有冲突发生，它的时间时间复杂度都为O（1），当然这是非常理想的情况，在实际应用中复杂度往往是大于O(1)的。但是我们可以通过设计让它尽量接近O（1）或者达到O(1);</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/%E6%B2%A1%E6%83%B3%E5%88%B0%E5%90%A7.jpg" alt="" /></p><h2 id="那么如何提高hash表的查找效率呢"><a class="markdownIt-Anchor" href="#那么如何提高hash表的查找效率呢"></a> 那么如何提高Hash表的查找效率呢</h2><p>使用平均查找长度ASL来衡量查找效率，ASL取决于</p><ul><li>散列函数</li><li>处理冲突的方法</li><li>散列表的装填因子 a=表中填入的记录数/哈希表长度</li></ul><h2 id="接下来是一个超级简单的散列函数"><a class="markdownIt-Anchor" href="#接下来是一个超级简单的散列函数"></a> 接下来是一个超级简单的散列函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Index <span class="title">Hash</span><span class="params">(ElementType Key, <span class="type">int</span> TableSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Key % TableSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个就是前面提到的<code>Key</code>是几就映射到第几个位置，这个是最直观最简单的方法了，虽然是空间利用效率不怎么样，但“不也挺好的吗”。虽然空间利用率有些低，但同时也尽可能的避免了不同的键映射到相同的索引值。我觉得是利大于弊的。相比于冲突太多会降低影响效率这点来看，显然除留余数法做散列函数优于其他类型的散列函数。当然往往都是去TableSize的最大质数来避免冲突</p><h2 id="如何避免冲突"><a class="markdownIt-Anchor" href="#如何避免冲突"></a> 如何避免冲突</h2><p>前面所设计的散列函数真的超级十分简单，然而所分配的空间却最多只能够存储 TableSize 个键值对，这种情况下很快就会产生冲突。所谓冲突就是不同的键，经过散列函数处理之后得到相同的散列值。也就是说这个时候，它们都指向了数组的同一个位置。我们需要寻求一些手段来处理这种冲突，常见的有<strong>开放地址法</strong>以及<strong>链地址法</strong></p><h2 id="开放地址法"><a class="markdownIt-Anchor" href="#开放地址法"></a> 开放地址法</h2><p>是当冲突产生的时候通过某种探测手段来在原有的数组上寻找下一个存放键值对位置。如果下个位置也存有东西了则再用相同的探测算法去寻找下下个位置，直到能够找到合适的存储位置为止。常用的大概有下面这三种。</p><ul><li><p>线性探测法</p></li><li><p>平方探测法</p></li><li><p>伪随机探测法</p></li></ul><h3 id="线性探测法"><a class="markdownIt-Anchor" href="#线性探测法"></a> 线性探测法</h3><p>线性探测法其实就像线性函数一样，一个自变量对应一个因变量。这样就避免了冲突的产生。，计算公式为<code>hashNext = (hash(key) + i) mod size</code>。举个直观点的例子，目前散列表中索引为 5 的位置已经有数据了。当下一个键值对也想在这个位置存放数据的时候，冲突产生了。我们可以通过线性探测算法来计算下一个存储的位置，也就是<code>(5 + 1) % 7 = 6</code>。如果这个地方也已经有数据了，则再次运用公式<code>(5 + 2) % 7 = 0</code>，如果还有冲突，则继续<code>(5 + 3) % 7 = 1</code>以此类推，直到找到对应的存储位置为止。很明显的一个问题就是当数组越满的时候，冲突的几率越高，越难找到合适的位置。这里本人比较倾向平法探测法，所以这里具体的实现代码使用平法探测法。啊还有一点就是虽然平方探测法可以有效减少聚集，但是他也是避免不了聚集的，只是比线性探测法稍微好那么一点罢了。同样也会产生二次聚集问题。</p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/妮可妮可.jpg" style="zoom: 33%;" /><h3 id="give-me-your-code"><a class="markdownIt-Anchor" href="#give-me-your-code"></a> Give me your code！！！</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-------fatal.h-------</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; stdlib.h &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Error( Str )        FatalError( Str )</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FatalError( Str )   fprintf( stderr, <span class="string">&quot;%s\n&quot;</span>, Str ), exit( 1 )</span></span><br></pre></td></tr></table></figure><p>这里和下面链地址法是同一个fatal.h。专业强迫症人士表示必须要加上。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---------hashquad.h---------</span><br><span class="line"><span class="comment">/* Interface for quadratic probing hash table */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* START: fig5_14.txt */</span></span><br><span class="line">        <span class="meta">#<span class="keyword">ifndef</span> _HashQuad_H</span></span><br><span class="line">        <span class="meta">#<span class="keyword">define</span> _HashQuad_H</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> Index;</span><br><span class="line">        <span class="keyword">typedef</span> Index Position;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">HashTbl</span>;</span></span><br><span class="line">        <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashTbl</span> *<span class="title">HashTable</span>;</span></span><br><span class="line"></span><br><span class="line">        HashTable <span class="title function_">InitializeTable</span><span class="params">( <span class="type">int</span> TableSize )</span>;</span><br><span class="line">        <span class="type">void</span> <span class="title function_">DestroyTable</span><span class="params">( HashTable H )</span>;</span><br><span class="line">        Position <span class="title function_">Find</span><span class="params">( ElementType Key, HashTable H )</span>;</span><br><span class="line">        <span class="type">void</span> <span class="title function_">Insert</span><span class="params">( ElementType Key, HashTable H )</span>;</span><br><span class="line">        ElementType <span class="title function_">Retrieve</span><span class="params">( Position P, HashTable H )</span>;</span><br><span class="line">        HashTable <span class="title function_">Rehash</span><span class="params">( HashTable H )</span>;</span><br><span class="line">        <span class="comment">/* Routines such as Delete are MakeEmpty are omitted */</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span>  <span class="comment">/* _HashQuad_H */</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line">-------HashEntry----------</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;fatal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hashquad.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> &amp;lt;stdlib.h&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; bits/stdc++.h &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NumItems 400</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MinTableSize (10)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">KindOfEntry</span></span><br><span class="line">&#123;</span><br><span class="line">    Legitimate,</span><br><span class="line">    Empty,</span><br><span class="line">    Deleted</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashEntry</span></span><br><span class="line">&#123;</span><br><span class="line">    ElementType Element;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">KindOfEntry</span> Info;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">HashEntry</span> Cell;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Cell *TheCells will be an array of */</span></span><br><span class="line"><span class="comment">/* HashEntry cells, allocated later */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashTbl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> TableSize;</span><br><span class="line">    Cell *TheCells;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Return next prime; assume N &gt;= 10 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">NextPrime</span><span class="params">(<span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (N % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        N++;</span><br><span class="line">    <span class="keyword">for</span> (;; N += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">3</span>; i * i &lt;= N; i += <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> (N % i == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">goto</span> ContOuter; <span class="comment">/* Sorry about this! */</span></span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    ContOuter:;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Hash function for ints */</span></span><br><span class="line"><span class="function">Index <span class="title">Hash</span><span class="params">(ElementType Key, <span class="type">int</span> TableSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Key % TableSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">HashTable</span></span><br><span class="line"><span class="function"><span class="title">InitializeTable</span><span class="params">(<span class="type">int</span> TableSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HashTable H;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (TableSize &lt; MinTableSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Error</span>(<span class="string">&quot;Table size too small&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Allocate table */</span></span><br><span class="line">    H = <span class="keyword">new</span> HashTbl;</span><br><span class="line">    <span class="keyword">if</span> (H == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">FatalError</span>(<span class="string">&quot;Out of space!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    H-&gt;TableSize = <span class="built_in">NextPrime</span>(TableSize);</span><br><span class="line"></span><br><span class="line">    H-&gt;TheCells = (Cell *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Cell) * H-&gt;TableSize);</span><br><span class="line">    <span class="keyword">if</span> (H-&gt;TheCells == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">FatalError</span>(<span class="string">&quot;Out of space!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; H-&gt;TableSize; i++)</span><br><span class="line">        H-&gt;TheCells[i].Info = Empty; <span class="comment">//初始化为1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Position</span></span><br><span class="line"><span class="function"><span class="title">Find</span><span class="params">(ElementType Key, HashTable H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position CurrentPos;</span><br><span class="line">    <span class="type">int</span> CollisionNum;</span><br><span class="line"></span><br><span class="line">    CollisionNum = <span class="number">0</span>;</span><br><span class="line">    CurrentPos = <span class="built_in">Hash</span>(Key, H-&gt;TableSize);</span><br><span class="line">    cout&lt;&lt;H-&gt;TableSize&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (H-&gt;TheCells[CurrentPos].Info != Empty &amp;&amp;</span><br><span class="line">           H-&gt;TheCells[CurrentPos].Element != Key)</span><br><span class="line">    <span class="comment">/* Probably need strcmp!! */</span></span><br><span class="line">    &#123;</span><br><span class="line">        CurrentPos += <span class="number">2</span> * ++CollisionNum - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (CurrentPos &gt;= H-&gt;TableSize)</span><br><span class="line">            CurrentPos -= H-&gt;TableSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> CurrentPos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(ElementType Key, HashTable H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position Pos;</span><br><span class="line"></span><br><span class="line">    Pos = <span class="built_in">Find</span>(Key, H);</span><br><span class="line">    <span class="keyword">if</span> (H-&gt;TheCells[Pos].Info != Legitimate)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* OK to insert here */</span></span><br><span class="line">        H-&gt;TheCells[Pos].Info = Legitimate;</span><br><span class="line">        H-&gt;TheCells[Pos].Element = Key;</span><br><span class="line">        <span class="comment">/* Probably need strcpy! */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">HashTable</span></span><br><span class="line"><span class="function"><span class="title">Rehash</span><span class="params">(HashTable H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, OldSize;</span><br><span class="line">    Cell *OldCells;</span><br><span class="line"></span><br><span class="line">    OldCells = H-&gt;TheCells;</span><br><span class="line">    OldSize = H-&gt;TableSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Get a new, empty table */</span></span><br><span class="line">    H = <span class="built_in">InitializeTable</span>(<span class="number">2</span> * OldSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Scan through old table, reinserting into new */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; OldSize; i++)</span><br><span class="line">        <span class="keyword">if</span> (OldCells[i].Info == Legitimate)</span><br><span class="line">            <span class="built_in">Insert</span>(OldCells[i].Element, H);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(OldCells);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElementType</span></span><br><span class="line"><span class="function"><span class="title">Retrieve</span><span class="params">(Position P, HashTable H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> H-&gt;TheCells[P].Element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestroyTable</span><span class="params">(HashTable H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(H-&gt;TheCells);</span><br><span class="line">    <span class="built_in">free</span>(H);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HashTable H;</span><br><span class="line">    Position P;</span><br><span class="line">    <span class="type">int</span> i, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> CurrentSize;</span><br><span class="line">    H = <span class="built_in">InitializeTable</span>(CurrentSize = <span class="number">17</span>);</span><br><span class="line">    <span class="built_in">Insert</span>(<span class="number">9</span>, H);</span><br><span class="line">    <span class="built_in">Insert</span>(<span class="number">13</span>, H);</span><br><span class="line">    <span class="built_in">Insert</span>(<span class="number">6</span>, H);</span><br><span class="line">    <span class="built_in">Insert</span>(<span class="number">2</span>, H);</span><br><span class="line">    <span class="type">int</span> m=<span class="number">14</span>;</span><br><span class="line">    P=<span class="built_in">Find</span>(m,H);</span><br><span class="line">    cout&lt;&lt;P;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Retrieve</span>(P,H)==m)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Find！&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Not Find!&quot;</span>;</span><br><span class="line">     H=<span class="built_in">Rehash</span>(H);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里加上的测试代码。同时兼顾了平方探测法的特点，加上了Resize函数，具体实现为Rehash函数。</p><h2 id="链地址法"><a class="markdownIt-Anchor" href="#链地址法"></a> 链地址法</h2><p>链地址法跟开放地址法的线性探测十分相似，最大的不同在于线性探测法中的下一个节点是在当前的数组上去寻找，而链地址法则是通过链表的方式去追加结点。实际上所分配数组的每一个位置都可以称之为桶，总的来说，开放地址法产生冲突的时候，会去寻找一个新的桶来存放键值对，而链地址法则是依然使用当前的桶，但是会追加新结点增加桶的<strong>深度</strong>。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/%E9%93%BE%E5%9C%B0%E5%9D%80%E6%B3%95.png" alt="" /></p><h3 id="give-me-your-code-2"><a class="markdownIt-Anchor" href="#give-me-your-code-2"></a> Give me your code！！！</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">----------fatal.h------------</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; stdio.h &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; stdlib.h &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Error( Str )        FatalError( Str )</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FatalError( Str )   fprintf( stderr, <span class="string">&quot;%s\n&quot;</span>, Str ), exit( 1 )    </span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-------hashsep.h---------</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> Index;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _HashSep_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HashSep_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HashTbl</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashTbl</span> *<span class="title">HashTable</span>;</span></span><br><span class="line"></span><br><span class="line">HashTable <span class="title function_">InitializeTable</span><span class="params">(<span class="type">int</span> TableSize)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DestroyTable</span><span class="params">(HashTable H)</span>;</span><br><span class="line">Position <span class="title function_">Find</span><span class="params">(ElementType Key, HashTable H)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(ElementType Key, HashTable H)</span>;</span><br><span class="line">ElementType <span class="title function_">Retrieve</span><span class="params">(Position P)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;fatal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hashsep.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; stdlib.h &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NumItems 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MinTableSize (10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span></span><br><span class="line">&#123;</span><br><span class="line">    ElementType Element;</span><br><span class="line">    Position Next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Position List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* List *TheList will be an array of lists, allocated later */</span></span><br><span class="line"><span class="comment">/* The lists use headers (for simplicity), */</span></span><br><span class="line"><span class="comment">/* though this wastes space */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashTbl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> TableSize;</span><br><span class="line">    List *TheLists;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Return next prime; assume N &gt;= 10 */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">NextPrime</span><span class="params">(<span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (N % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        N++;</span><br><span class="line">    <span class="keyword">for</span> (;; N += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">3</span>; i * i &lt;= N; i += <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> (N % i == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">goto</span> ContOuter; <span class="comment">/* Sorry about this! */</span></span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    ContOuter:;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Index <span class="title">Hash</span><span class="params">(ElementType Key, <span class="type">int</span> TableSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Key % TableSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">HashTable</span></span><br><span class="line"><span class="function"><span class="title">InitializeTable</span><span class="params">(<span class="type">int</span> TableSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HashTable H;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (TableSize &lt; MinTableSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Error</span>(<span class="string">&quot;Table size too small&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Allocate table */</span></span><br><span class="line">    H=<span class="keyword">new</span> HashTbl;</span><br><span class="line">    <span class="keyword">if</span> (H == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">FatalError</span>(<span class="string">&quot;Out of space!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    H-&gt;TableSize = <span class="built_in">NextPrime</span>(TableSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Allocate array of lists */</span></span><br><span class="line">    H-&gt;TheLists = (List*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(List) * H-&gt;TableSize);</span><br><span class="line">    <span class="keyword">if</span> (H-&gt;TheLists == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">FatalError</span>(<span class="string">&quot;Out of space!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Allocate list headers */</span><span class="comment">/*实现表头*/</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; H-&gt;TableSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        H-&gt;TheLists[i] = <span class="keyword">new</span> ListNode;</span><br><span class="line">        <span class="keyword">if</span> (H-&gt;TheLists[i] == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">FatalError</span>(<span class="string">&quot;Out of space!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            H-&gt;TheLists[i]-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Position</span></span><br><span class="line"><span class="function"><span class="title">Find</span><span class="params">(ElementType Key, HashTable H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position P;</span><br><span class="line">    List L;</span><br><span class="line"></span><br><span class="line">    L = H-&gt;TheLists[<span class="built_in">Hash</span>(Key, H-&gt;TableSize)];</span><br><span class="line">    P = L-&gt;Next;</span><br><span class="line">    <span class="keyword">while</span> (P != <span class="literal">NULL</span> &amp;&amp; P-&gt;Element != Key)</span><br><span class="line">        <span class="comment">/* Probably need strcmp!! */</span></span><br><span class="line">        P = P-&gt;Next;</span><br><span class="line">    <span class="keyword">return</span> P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(ElementType Key, HashTable H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position Pos, NewCell;</span><br><span class="line">    List L;</span><br><span class="line"></span><br><span class="line">    Pos = <span class="built_in">Find</span>(Key, H);</span><br><span class="line">    <span class="keyword">if</span> (Pos == <span class="literal">NULL</span>) <span class="comment">/* Key is not found */</span></span><br><span class="line">    &#123;</span><br><span class="line">        NewCell = <span class="keyword">new</span> ListNode;</span><br><span class="line">        <span class="keyword">if</span> (NewCell == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">FatalError</span>(<span class="string">&quot;Out of space!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            L = H-&gt;TheLists[<span class="built_in">Hash</span>(Key, H-&gt;TableSize)];</span><br><span class="line">            NewCell-&gt;Next = L-&gt;Next;</span><br><span class="line">            NewCell-&gt;Element = Key; <span class="comment">/* Probably need strcpy! */</span></span><br><span class="line">            L-&gt;Next = NewCell;S</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElementType</span></span><br><span class="line"><span class="function"><span class="title">Retrieve</span><span class="params">(Position P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> P-&gt;Element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestroyTable</span><span class="params">(HashTable H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; H-&gt;TableSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Position P = H-&gt;TheLists[i];</span><br><span class="line">        Position Tmp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (P != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Tmp = P-&gt;Next;</span><br><span class="line">            <span class="built_in">free</span>(P);</span><br><span class="line">            P = Tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(H-&gt;TheLists);</span><br><span class="line">    <span class="built_in">free</span>(H);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HashTable H;</span><br><span class="line">    Position P;</span><br><span class="line">    <span class="type">int</span> i, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">     <span class="type">int</span> CurrentSize;</span><br><span class="line">    H = <span class="built_in">InitializeTable</span>(CurrentSize = <span class="number">13</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; NumItems<span class="number">-3</span>; i++, j += <span class="number">71</span>)</span><br><span class="line">        <span class="built_in">Insert</span>(j, H);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; NumItems; i++, j += <span class="number">71</span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>( ( P = <span class="built_in">Find</span>( j, H ) ) == <span class="literal">NULL</span> || <span class="built_in">Retrieve</span>( P ) != j )</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error at %d\n&quot;</span>, j);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">DestroyTable</span>(H);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;End of program.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码经测试没有问题</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/%E6%B2%A1%E6%83%B3%E5%88%B0%E5%90%A7.jpg" alt="" /></p><p>除了原来的数据字段之外，还需要维护一个指向下一个冲突结点的指针，实际上就是的链表的方式。这种处理方式有个好处就是，产生冲突的时候，不再需要为了寻找合适的位置而进行大量的探测，只要通过散列函数找到对应桶的位置，然后遍历桶中的链表即可。此外，利用这种方式删除节点也是比较容易的。即便是采用了链地址法，到了一定时候还是要对散列表进行 Resize 的，不然等桶太深的时候，依旧不利于查找。</p><p>总体而言，采用开放地址法所需要的内存空间比较少，实现起来也相对简单一些，当冲突产生的时候它是通过探测函数来查找下一个存放的位置。但是删除结点的时候需要另外维护一个状态，才不至于查找链的中断。链地址法则是通过链表来存储冲突数据，这为数据操作带来不少便利性。然而，无论采用哪种方式，都需要在恰当的时候进行 Resize，才能够让时间复杂度保持在<code>O(1)</code>左右。</p><h2 id="至于伪随机探测法"><a class="markdownIt-Anchor" href="#至于伪随机探测法"></a> 至于伪随机探测法</h2><p>经过多方参考大概是这个样子【雾】</p><p>上面两个算法最大的特点在于，对于相同的地址输入，总会按照一个固定的路线去寻找合适的位置，这样以后要再从散列表中查找对应的键值对就有迹可循了。其实伪随机数也有这种特性，只要随机的种子数据是相同的，那么每次得到的随机序列都是一定的。可以利用下面的程序观察伪随机数的行为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; stdio.h &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; stdlib.h &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> seed = <span class="number">100</span>;</span><br><span class="line">    srand(seed);</span><br><span class="line">    <span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        value =rand();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;value is %d\n&quot;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伪随机种子是<code>seed = 100</code>，这个程序无论运行多少次打印的结果总是一致的，在我的计算机上会打印以下数值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">value is <span class="number">365</span></span><br><span class="line">value is <span class="number">1216</span></span><br><span class="line">value is <span class="number">5415</span></span><br><span class="line">value is <span class="number">16704</span></span><br><span class="line">value is <span class="number">24504</span></span><br></pre></td></tr></table></figure><p>利用这个特性，我们就能够以伪随机的机制来实现伪随机探测函数<code>randomProbing</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">randomProbing</span><span class="params">(Hash *hash, <span class="type">int</span> address, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">  srand(address);</span><br><span class="line">  <span class="keyword">while</span> (!hash[address].isNull) &#123;</span><br><span class="line">    address = rand() % size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论采用哪种方式，只要有相同的 address 输入，都会得到相同的查找路线。总体而言，用开放地址法来解决地址冲突问题，在不考虑哈希表 Resize 的情况下，实现起来还是比较简单的。不过不难想到，它较大问题在于当散列表满到一定程度的时候，冲突的几率会比较大，这种情况下为了找到合适的位置必须要进行多次计算。另外还有个问题，就是删除键值对的时候，我们不能把键值对的数据简单地 “删除” 掉，并把当前位置设置成空。因为如果直接删除并设置为空的话会出现查找链中断的情况，任何依赖于当前位置所做的搜索都会作废，可以考虑另外维护一个状态来标识当前位置是 “空闲” 的，表明它曾经有过数据，现在也接受新数据的插入。</p><p>PSSSSS: 在这个例子中，我们可以只利用<code>isNull</code>字段来标识不同状态。用数值 0 来标识当前结点已经有数据了，用 1 来标识当前结点是空的，采用 2 来标识当前结点曾经有过数据，目前处于空闲状态，并且接受新数据的插入。这样就不会出现查找链中断的情况了。不过需要对上面的探测函数稍微做一些调整，这里不展开说</p><h2 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h2><ol><li>通过散列函数计算出键所对应的散列值。</li><li>根据散列值从数组中找到相对应的索引位置。</li><li>如果这个位置是 “空闲” 的，则插入数据。如果该键值对已经存在了，则替换掉原来的数据。4</li><li>如果这个位置已经有别的数据了，表明冲突已经产生。</li><li>通过特定的探测法，计算下一个可以存放的位置。</li><li>返回第三步。</li></ol><h2 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h2><ol><li>通过散列函数计算出键所对应的散列值。</li><li>根据散列值从数组中找到相对应的索引位置。</li><li>如果这个位置为空的话则直接返回说找不到数据。</li><li>如果这个位置能够匹配当前查找的键，则返回需要查找的数据。</li><li>如果这个位置已经有别的数据，或者状态显示曾经有过别的数据，表明有冲突产生。</li><li>通过特定的探测法，计算下一个位置。</li><li>返回第三步。</li></ol><p>链地址法其实也类似的，可以看上面的具体实现代码。区别在于插入键值对的时候如果识别到冲突，链地址法并不会通过一定的探测法来查找下一个存放数据的位置，而是顺着链表往下搜索，增添新的结点，或者更新已有的结点。查找的时候则是沿着链表往下查找，找到目标数据则直接把结果返回。假设穷尽链表都无法找到对应的数据，表明数据不存在。</p><h2 id="双散列"><a class="markdownIt-Anchor" href="#双散列"></a> 双散列</h2><p>为了<strong>避免聚集</strong>，在探测时选择跳跃式的探测，即再使用一个散列函数，用来计算探测的位置。假设前面的散列函数为hash1(X)，用于探测的散列函数为hash2(X)，那么一种流行的选择是F(i) = i * hash2(X)，即第一次冲突时探测hash1(X)+hash2(X)的位置，第二次探测hash1(X)+2hash2(X)的位置。模拟表明，双散列的探测几乎和随机冲突解决方法情景相同，这使得双散列在理论上很有吸引力。不过对于平方探测就没有必要使用第二个散列函数了。这个就不在具体说了。</p><h2 id="再散列"><a class="markdownIt-Anchor" href="#再散列"></a> 再散列</h2><p>这个具体的实现方法在前面的开放定址法就已经实现过了，对于平法探测法，如果表的元素填的太满，实际操作估计也就比50%多一点吧。不仅运行时间较长，效率也会变慢。Insert操作也可能失败，所以一种方法是建立另一个大约两倍大的表，扫描整个原始散列表，计算每个未删除的新散列值并将其插入到新表中。具体实现可参考前面实现的源代码。</p><h2 id="可扩散列"><a class="markdownIt-Anchor" href="#可扩散列"></a> 可扩散列</h2><p>如果数据量太大而无法装进内存，就需要考虑检索数据所需的磁盘存取次数。前面的两种散列法在发生冲突时可能引起多个区块的读取。</p><p>可扩散列允许用两次磁盘访问执行一次查找，插入操作也只需很少的磁盘访问。它可以看作由B-树变化而来，增加 <em>M</em> ，使B-树的深度为1。根保存在内存中，用 <em>D</em> 代表根使用的位数， <em>D</em> 也称为目录，则目录中的项数为 2<em>D</em> 。树叶的元素个数最多为 <em>M</em> ， <em>d**L</em> 为树叶 <em>L</em> 所有元素共有的最高位的位数， <em>d**L</em>≤<em>D</em> 。下图是可扩散列的一个例子。</p><blockquote><p>插入100</p></blockquote><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/%E5%86%8D%E6%95%A3%E5%88%972.jpg" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/sanlie.jpg" alt="" /></p><blockquote><p>插入000000</p></blockquote><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/%E5%86%8D%E6%95%A3%E5%88%973.jpg" alt="" /></p><p>可扩散列插入时，如果树叶已经满了，则增加目录大小，分裂树叶，未分裂的树叶由相邻的目录项共同指向。可以看到尽管目录被重写，但其他树叶未被访问。需要注意的是，有可能一个树叶的元素有多于 <em>D</em>+1 个前导位相同时需要多次目录分裂，如上图 <em>D</em>=2 时，插入 <code>111010</code> 、 <code>111011</code> 后再插入 <code>111100</code> ；另一个问题是如果允许重复关键字，若存在超过 <em>M</em> 个重复关键字，则算法无效。</p><p>可扩散列提供了对大型数据库插入和查找操作的快速存取。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li>散列表可以以常数时间实现Insert和Find操作，使用散列表是，注意加装填因这样的细节子也是非常重要的，否则时间界不在有效，当关键字不是短串或者整数时，需要仔细选择散列函数也是非常重要的。</li><li>对于链地址法，装填因子不是很大时性能并不会明显降低，但装填因子黑兽应该接近于1，对于开放定址算法，除非玩去哪不可以避免，否则装填因子不应该超过0.5，如果使用线性探测，那么性能会随着接近于1急速下降。可以通过在散列的扩充来实现。保持合理的装填因子，对于空间紧缺并且不可能声明巨大散列表的情况是很重要的。</li><li>二叉树也可以用来实现Insert和Find运算，虽然平均时间界为O（log N)。但是显然二叉查找树更强大，散列不可能找出最小元素。除非准确的知道一个字符串。否则对于散列表来说是不可能有效的找到它的，二叉查找树可以在一定范围内迅速查找，而且单单从时间界来看O（log N)也不必O（1）大多少，这是因为使查找树不需要多余的乘法和除法。</li><li>散列表的应用非常广泛，编译器使用散列表跟踪源代码中的声明变量，这种数据结构叫做符号表。还有用是在为游戏编制的程序中，当程序搜索游戏的不同行时，它要跟踪通过计算基于位置的散列函数而看到的一些位置，如果同样的位置在出现时通常经过简单的移动变换来避免昂贵的重复计算，游戏程序的这种特点一般叫做交换表。</li></ul><h3 id="至于可扩散列的具体实现"><a class="markdownIt-Anchor" href="#至于可扩散列的具体实现"></a> 至于可扩散列的具体实现</h3><p>写是不可能写的,只能偶尔划划水这样子,才能勉强维持的了水博客这样子。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/images5.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github被攻击之小蒟蒻瑟瑟发抖</title>
      <link href="/posts/fd7e80ac/"/>
      <url>/posts/fd7e80ac/</url>
      
        <content type="html"><![CDATA[<p>事情发生在3月26日，我一边在修改博客的css样式，一边在不停的提交查看效果，然而前一秒还能安然这刷新的博客，当我下一秒在此刷新是，谷歌竟然发出了证书无效的警告！！！！？</p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/3135067790645782.jpg" style="zoom:33%;" /><p>在这万分危急的时刻，我第一反应是网络劫持【雾】，转念一想加一寻思不对啊，静态网站也有人攻击？？？于是这个想法在不到0.1秒的时间内被我丢弃，然后开始怀疑我github证书是不是过签了，按说提前一个月就应该自动续签的？？？一番操作猛如虎。确定了没问题之后，我开始怀疑是ip解析出了问题，然后我ping了一下现有ip。也ping的通啊。我现有中国地区解析ip是185.199.111.153.我把官方提供的110，109，108，试了个遍。在搜索引擎内内输入ip地址仍然不能打开，仍然是谷歌的证书无效的警告。怎么肥事???我慌了，小蒟蒻感觉很慌。我觉的现在非常有可能是github pages受到了攻击，当然github还能打开。当然作为一个小蒟蒻这个时候就应该去求助大佬了。</p><ul><li>啥？？？</li><li>打不开？？？？</li><li>你确定？？？</li></ul><p>大佬疑问三连，纳尼！！还真打不开，一顿操作猛如虎。我们发现了网站证书变为一张通过私人QQ邮箱自签名的证书。生成时间为2019年9月26。我本来以为这是攻击者为了生成CA证书，随便填的邮箱…然后看网上的消息这个QQ号好像就是攻击者本人？？？？不是吧，真的留了QQ号？？？emmmmmm牛啊！！！！！嘛，事到如今也只能等平台恢复了。在攻击事件过了几十个小时后github和github pages恢复了正常的访问。其实这已经不是github在国内遭受的第一次中间人攻击了。2013年也曾发生过过。</p><h2 id="中间人攻击"><a class="markdownIt-Anchor" href="#中间人攻击"></a> 中间人攻击</h2><p>中间人攻击（英语：Man-in-the-middle attack，缩写：MITM）在密码学和计算机安全领域中是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。在中间人攻击中，攻击者可以拦截通讯双方的通话并插入新的内容。在许多情况下这是很简单的（例如，在一个未加密的Wi-Fi 无线接入点的接受范围内的中间人攻击者，可以将自己作为一个中间人插入这个网络）。</p><p>一个中间人攻击能成功的前提条件是攻击者能将自己伪装成每一个参与会话的终端，并且不被其他终端识破。中间人攻击是一个（缺乏）相互认证的攻击。大多数的加密协议都专门加入了一些特殊的认证方法以阻止中间人攻击。例如，SSL协议可以验证参与通讯的一方或双方使用的证书是否是由权威的受信任的数字证书认证机构颁发，并且能执行双向身份认证。</p><p>简单点来说，所谓的中间人攻击就是通过拦截正常的网络通信数据，并进行数据篡改和嗅探，而通信的双方却毫不知情。所以说建立安全的HTTPS通信非常重要！!！！【溜】</p><h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3><ul><li><a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/1739730?fr=aladdin">“Man-in-the-MiddleAttack”百度百科</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>是B树不是B-树</title>
      <link href="/posts/c7537434/"/>
      <url>/posts/c7537434/</url>
      
        <content type="html"><![CDATA[<h1 id="是b树不是b-树"><a class="markdownIt-Anchor" href="#是b树不是b-树"></a> 是B树不是B-树</h1><p>学之前找了一下网上的资料。B树，B-树是两种树？？？然后才发现B-树就是B树，因为B-tree然后国内大多数直译为B-tree，不得不说这真是一种非常糟糕的翻译。然后就是我这本国外教材上的B树内容真的是非常的枯燥。然后之前在网上看到了一篇非常有意思的介绍B树的漫画然后我就将他转载来了。不得不说这又是一次成功的<s>剽窃。</s></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/huima.png" alt="" /></p><div class="note success flat"><p>以下文章来源于转载**<a href="https://www.jianshu.com/p/8b653423c586">转载链接</a>**</p></div><p>本文提到的「B-树」，就是「B树」，都是 B-tree 的翻译，里面不是减号-，是连接符-。因为有人把 B-tree 翻成 「B-树」，让人以为「B树」和「B-树」是两种树，实际上两者就是同一种树。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/111.png" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/222.png" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/333.png" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/444.png" alt="" /></p><p>————————————</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/555.png" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/666.png" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/777.png" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/888.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/999.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/10.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/14.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/12.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/13.webp" alt="" /></p><p>————————————</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/15.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/16.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/17.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/18.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/19.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/20.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/21.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/22.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/23.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/24.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/25.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/26.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/27.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/28.webp" alt="" /></p><p><strong>二叉查找树的结构：</strong></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/29.webp" alt="" /></p><p><strong>第1次磁盘IO：</strong></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/30.webp" alt="" /></p><p><strong>第2次磁盘IO：</strong></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/31.webp" alt="" /></p><p><strong>第3次磁盘IO：</strong></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/32.webp" alt="" /></p><p><strong>第4次磁盘IO：</strong></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/33.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/34.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/35.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/36.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/37.webp" alt="" /></p><p><strong>下面来具体介绍一下B-树（Balance Tree），一个m阶的B树具有如下几个特征：</strong></p><p>1.根结点至少有两个子女。</p><p>2.每个中间节点都包含k-1个元素和k个孩子，其中 m/2 &lt;= k &lt;= m</p><p>3.每一个叶子节点都包含k-1个元素，其中 m/2 &lt;= k &lt;= m</p><p>4.所有的叶子结点都位于同一层。</p><p>5.每个节点中的元素从小到大排列，节点当中k-1个元素正好是k个孩子包含的元素的值域分划。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/38.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/39.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/40.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/41.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/42.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/43.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/44.webp" alt="" /></p><p><strong>第1次磁盘IO：</strong></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/45.webp" alt="" /></p><p><strong>在内存中定位（和9比较）：</strong></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/46.webp" alt="" /></p><p><strong>第2次磁盘IO：</strong></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/47.webp" alt="" /></p><p><strong>在内存中定位（和2，6比较）：</strong></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/48.webp" alt="" /></p><p>第3次磁盘IO：</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/49.webp" alt="" /></p><p><strong>在内存中定位（和3，5比较）：</strong></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/50.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/51.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/52.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/53.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/54.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/55.webp" alt="" /></p><p>自顶向下查找4的节点位置，发现4应当插入到节点元素3，5之间。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/56.webp" alt="" /></p><p>节点3，5已经是两元素节点，无法再增加。父亲节点 2， 6 也是两元素节点，也无法再增加。根节点9是单元素节点，可以升级为两元素节点。于是<strong>拆分</strong>节点3，5与节点2，6，让根节点9升级为两元素节点4，9。节点6独立为根节点的第二个孩子。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/57.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/58.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/59.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/60.webp" alt="" /></p><p>自顶向下查找元素11的节点位置。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/61.webp" alt="" /></p><p>删除11后，节点12只有一个孩子，不符合B树规范。因此找出12,13,15三个节点的中位数13，取代节点12，而节点12自身下移成为第一个孩子。（这个过程称为<strong>左旋</strong>）</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/62.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/63.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/64.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/65.webp" alt="" /></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img1/66.webp" alt="" /></p><p>就这样小灰再也没有收到那个面试官的电话【雾】</p>]]></content>
      
      
      <categories>
          
          <category> print*,&quot;hello world!!!&quot; </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的遍历</title>
      <link href="/posts/332b8f17/"/>
      <url>/posts/332b8f17/</url>
      
        <content type="html"><![CDATA[<h1 id="树的遍历"><a class="markdownIt-Anchor" href="#树的遍历"></a> 树的遍历</h1><p>这是一篇水文【理直气壮】</p><p>废话不多说先上代码</p><h2 id="先序遍历"><a class="markdownIt-Anchor" href="#先序遍历"></a> 先序遍历</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreorderTravel</span><span class="params">(AVLTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, T-&gt;Element);</span><br><span class="line">        <span class="built_in">PreorderTravel</span>(T-&gt;Left);</span><br><span class="line">        <span class="built_in">PreorderTravel</span>(T-&gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>节点在其儿子的节点前进行处理，这种遍历可以用来利用节点深度来标记每一个节点</p><h2 id="中序遍历"><a class="markdownIt-Anchor" href="#中序遍历"></a> 中序遍历</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InorderTravel</span><span class="params">(AVLTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">InorderTravel</span>(T-&gt;Left);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, T-&gt;Element);</span><br><span class="line">        <span class="built_in">InorderTravel</span>(T-&gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序遍历的一般策略是首先遍历左子树，然后是当前节点，最后遍历右子树，这个算法有趣的部分除他简单的特性外，还在于总运行时间为O（N）。这是因为在树的每一个节点除进行的工作都是常数时间的，每一个节点访问一次，而在每一个节点进行的工作是检测是否为NULL，建立两个过程调用并执行输出函数，由于每个节点的工作发费时间以及总共有N个节点，因此运行时间为O（N）；</p><h2 id="后序遍历"><a class="markdownIt-Anchor" href="#后序遍历"></a> 后序遍历</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostorderTravel</span><span class="params">(AVLTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">PostorderTravel</span>(T-&gt;Left);</span><br><span class="line">        <span class="built_in">PostorderTravel</span>(T-&gt;Right);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, T-&gt;Element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当有时我们需要处理两个子树然后才能处理当前节点。例如，为了计算一个节点的高度，我们需要知道他两棵子树的高度，由于检查一些特殊情况总是有益的，特别是啊在我们使用递归的情况下。因此我们需要注意这个声明中的树叶的高度，运行时间和上面同出一辙也是O（N）；</p><h2 id="新的更新加上了层序遍历"><a class="markdownIt-Anchor" href="#新的更新加上了层序遍历"></a> 新的更新加上了层序遍历</h2><p>层序遍历和bfs很像，从上到下一层一层的进行遍历</p><ul><li>根节点root加入队列</li><li>取出队首节点访问它</li><li>如果该节点有左孩子，将左孩子入队</li><li>如果该节点有右孩子，将右孩子入队</li><li>返回第二步，直到队列为空。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LayerOrder</span><span class="params">(T root)</span></span>&#123;</span><br><span class="line">    queue&lt;T&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        T now=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cout&lt;&lt;now-&gt;data;</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;Left!=<span class="literal">nullptr</span>)</span><br><span class="line">        q.<span class="built_in">push</span>(now-&gt;Left);</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;Right!=<span class="literal">nullptr</span>)</span><br><span class="line">        q.<span class="built_in">push</span>(now-&gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="今天的我果然也没有鸽呢"><a class="markdownIt-Anchor" href="#今天的我果然也没有鸽呢"></a> <s>今天的我果然也没有鸽呢</s></h3><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/gouma2.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVL树</title>
      <link href="/posts/973716ad/"/>
      <url>/posts/973716ad/</url>
      
        <content type="html"><![CDATA[<h1 id="avl树"><a class="markdownIt-Anchor" href="#avl树"></a> AVL树</h1><p>我就鸽了一天哦！！！【雾】</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/90506769129638.jpg" alt="" /></p><p>AVL树，是一种平衡(balanced)的二叉搜索树(binary search tree, 简称为BST)；AVL树是带有平衡条件的二叉查找树。由于各种算法教材上对 AVL 的介绍十分冗长，造成了很多人对 AVL 树复杂、不实用的印象。但实际上，AVL 树的原理简单，实现也并不复杂。好像的确是这样啊【雾】…相对来说这个平衡条件必须要容易保持，而且他须保证书的深度是O（log N)最简单的想法是要求左右树相同的高度。它有以下两个性质：</p><ul><li>任意一个结点的key，比它的左孩子key大，比它的右孩子key小；</li><li>任意结点的孩子结点之间高度差距最大为1；</li><li>空二叉树是一个 AVL 树</li><li>如果 T 是一棵 AVL 树，那么其左右子树也是 AVL 树。</li><li>树高为 O（log N）；</li><li>空树的高度定为-1</li></ul><blockquote><p>平衡因子：右子树高度 - 左子树高度</p></blockquote><p>另一种平衡条件是要求每个节点都必须要有相同的左子树和右子树。如果空子树的高度定义为-1，那么只有具有2^K-1个节点的理想平衡树满足这个条件，因此虽然这个平衡树保证了树的深度小，但是它太严格了，难以使用。前面我们说了要想满足AVL树的条件，左子树和右子树的高度必须&lt;=1</p><blockquote><p>一棵树最少节点数满足斐波那契数列，且S(h)=S(h-1)+S(h-2)+1,对于h=0;S(1)=1;h1=1,S(h)=2;h代表AVL树中的高。</p></blockquote><p>这部分的验证代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt; bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">f</span>(n<span class="number">-1</span>)+<span class="built_in">f</span>(n<span class="number">-2</span>)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;<span class="built_in">f</span>(n<span class="number">-1</span>)+<span class="built_in">f</span>(n<span class="number">-2</span>)+<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="当进行插入操作时"><a class="markdownIt-Anchor" href="#当进行插入操作时"></a> 当进行插入操作时</h2><p>我们需要更新通向根节点路径那些节点的所有平衡信息，而进行插入操作时，我们需要更新通向根节点路径上的那些节点的所有平衡信息，而插入操作可能存在的困难在于，插入一个根节点可能破坏AVL树的特性，如果发生了这种情况，那么要把性质恢复以后才认为这一步插入完成，事实上，这总可以通过对树的简单修正来做到，当然了这个我们称作旋转。</p><p>当然了在插入以后，只有那些从插入点到根节点的路径上的节点间的平衡可能被改变，因为只有这些节点的子树可能发生变化，当我们沿着这条路径更新平衡信息时，我们可以找到一个节点，他的新平衡破坏了AVL的平衡条件，所以我们需要找出这样一个节点并重新平衡这棵树，并证明，这一平衡保证满足AVL特性。</p><p>如果把必须重新平衡的节点叫做a好了由于任意节点最多有两个孩子，因此当高度不平衡时，a点的两棵子树高度差为2.很容易看出不平衡可能存在以下几种情况</p><ul><li>对a的左儿子的左子树进行一次插入</li></ul><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/121.png" alt="" /></p><blockquote><p>失衡结点&quot; 的左子树比右子树高 2，左孩子（即 x）下的左子树比右子树高 1。我们只需对 “以 y 为根的子树” 进行 “左左旋转 (ll_rotate)” 即可。一次旋转后，恢复平衡。</p></blockquote><ul><li>对a的左儿子的右子树进行一次插入</li></ul><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/11321.png" alt="" /></p><blockquote><p>所谓的左右，即 “失衡结点” 的左子树比右子树高 2，左孩子（即 x）下的右子树比左子树高 1。观察发现，若先对 “以 x 为根的子树” 进行 “右右旋转 (rr_rotate)”，此时 “以 y 为根的子树” 恰好符合 “左左失衡”，所以再进行一次 “左左旋转 (ll_rotate)”。两次旋转后，恢复平衡。</p></blockquote><ul><li>对a的右儿子的左子树进行一次插入</li></ul><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/youzuo.png" alt="" /></p><blockquote><p>所谓的右左，即 “失衡结点” 的右子树比左子树高 2，右孩子（即 x）下的左子树比右子树高 1。观察发现，若先对 “以 x 为根的子树” 进行 “左左旋转 (ll_rotate)”，此时 “以 y 为根的子树” 恰好符合 “右右失衡”，所以再进行一次 “右右旋转 (rr_rotate)”。两次旋转后，恢复平衡。</p></blockquote><ul><li>对a的右儿子的右子树进行一次插入</li></ul><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/jiek.png" alt="" /></p><blockquote><p>所谓的右右，即 “失衡结点” 的右子树比左子树高 2，右孩子（即 x）下的右子树比左子树高 1。我们只需对 “以 y 为根的子树” 进行 “右右旋转 (rr_rotate)” 即可。一次旋转后，恢复平衡。</p></blockquote><h3 id="单旋转"><a class="markdownIt-Anchor" href="#单旋转"></a> 单旋转</h3><p>单旋转顾名思义就是通过一次旋转来达到AVL树平衡的目的，前面的左左平衡和右右平衡是但旋转，刚好是镜像对称</p><h3 id="双旋转"><a class="markdownIt-Anchor" href="#双旋转"></a> 双旋转</h3><p>顾名思义通过两次旋转来达到平衡的目的左右和右左平衡是双旋转，也刚好是镜面对称。但深度依旧没办法降低，一次旋转无法降低它的深度就需要双旋转了。</p><p>多说无益！！！那就直接扔代码了</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/109317159038348.jpg" alt="" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt; bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">AVLnode</span> *Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">AVLnode</span> *AVLTree;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AVLnode</span></span><br><span class="line">&#123;</span><br><span class="line">    ElementType Element;</span><br><span class="line">    AVLTree Left;</span><br><span class="line">    AVLTree Right;</span><br><span class="line">    <span class="type">int</span> Height;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">Height</span><span class="params">(Position P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (P == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> P-&gt;Height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> Position <span class="title">singleRotateWithRight</span><span class="params">(Position k2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position k1;</span><br><span class="line">    k1 = k2-&gt;Right;</span><br><span class="line">    k2-&gt;Right = k1-&gt;Left;</span><br><span class="line">    k1-&gt;Left = k2;</span><br><span class="line">    k2-&gt;Height = <span class="built_in">max</span>(<span class="built_in">Height</span>(k2-&gt;Left), <span class="built_in">Height</span>(k2-&gt;Right)) + <span class="number">1</span>;</span><br><span class="line">    k1-&gt;Height = <span class="built_in">max</span>(<span class="built_in">Height</span>(k1-&gt;Right), <span class="built_in">Height</span>(k2-&gt;Left)) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> k1; <span class="comment">//返回新的根节点，后面也是一样哒</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> Position <span class="title">singleRotateWithLeft</span><span class="params">(Position k2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position k1;</span><br><span class="line">    k1 = k2-&gt;Left;</span><br><span class="line">    k2-&gt;Left = k1-&gt;Right;</span><br><span class="line">    k1-&gt;Right = k2;</span><br><span class="line">    k2-&gt;Height = <span class="built_in">max</span>(<span class="built_in">Height</span>(k2-&gt;Left), <span class="built_in">Height</span>(k2-&gt;Right)) + <span class="number">1</span>;</span><br><span class="line">    k1-&gt;Height = <span class="built_in">max</span>(<span class="built_in">Height</span>(k1-&gt;Left), <span class="built_in">Height</span>(k2-&gt;Right)) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> k1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> Position <span class="title">DoubleRotateWithRight</span><span class="params">(Position k3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    k3-&gt;Right = <span class="built_in">singleRotateWithLeft</span>(k3-&gt;Right);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">singleRotateWithRight</span>(k3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> Position <span class="title">DoubleRotateWithLeft</span><span class="params">(Position k3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    k3-&gt;Left = <span class="built_in">singleRotateWithRight</span>(k3-&gt;Left);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">singleRotateWithLeft</span>(k3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">AVLTree <span class="title">Insert</span><span class="params">(ElementType X, AVLTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        T = <span class="keyword">new</span> AVLnode;</span><br><span class="line">        <span class="keyword">if</span> (T == <span class="literal">nullptr</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;Element = X;</span><br><span class="line">            T-&gt;Height = <span class="number">0</span>;</span><br><span class="line">            T-&gt;Left = T-&gt;Right = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &lt; T-&gt;Element)</span><br><span class="line">    &#123;</span><br><span class="line">        T-&gt;Left = <span class="built_in">Insert</span>(X, T-&gt;Left);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Height</span>(T-&gt;Left) - <span class="built_in">Height</span>(T-&gt;Right) == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> (X &lt; T-&gt;Left-&gt;Element)</span><br><span class="line">                T = <span class="built_in">singleRotateWithLeft</span>(T);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                T = <span class="built_in">DoubleRotateWithLeft</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; T-&gt;Element)</span><br><span class="line">    &#123;</span><br><span class="line">        T-&gt;Right = <span class="built_in">Insert</span>(X, T-&gt;Right);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Height</span>(T-&gt;Right) - <span class="built_in">Height</span>(T-&gt;Left) == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> (X &gt; T-&gt;Right-&gt;Element)</span><br><span class="line">                T = <span class="built_in">singleRotateWithRight</span>(T);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                T = <span class="built_in">DoubleRotateWithRight</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">    T-&gt;Height = <span class="built_in">max</span>(<span class="built_in">Height</span>(T-&gt;Left), <span class="built_in">Height</span>(T-&gt;Right)) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AVLTree T;</span><br><span class="line">    T = <span class="literal">nullptr</span>;</span><br><span class="line">    T = <span class="built_in">Insert</span>(<span class="number">1</span>, T);</span><br><span class="line">    T = <span class="built_in">Insert</span>(<span class="number">15</span>, T);</span><br><span class="line">    T = <span class="built_in">Insert</span>(<span class="number">3</span>, T);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Root: %d\n&quot;</span>, T-&gt;Element);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反正大概我知道的就那么多了【逃】</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/2702547989199889.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树同学是个好同志</title>
      <link href="/posts/fd6da870/"/>
      <url>/posts/fd6da870/</url>
      
        <content type="html"><![CDATA[<h1 id="树同学她是个好同志"><a class="markdownIt-Anchor" href="#树同学她是个好同志"></a> 树同学她是个好同志</h1><p>思前想后我决定递归先鸽了，相比于我们的递归同学。我觉得树同学才是我的真爱！！！当然我只是选择先爱我们的树同学，递归同学您就往后稍稍得嘞。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/dama1.jpg" alt="" /></p><h2 id="树"><a class="markdownIt-Anchor" href="#树"></a> 树</h2><p>对于少量的数据我们可以用链表快速高效的访问，但对于大量的输入数据，链表就显得完全力不从心了，因为链表的线性访问，实在是太慢了。虽然链表可以提供比数组更大的灵活性，但很难使用他们对组织分层表示。栈和队列虽然也反映了某些层次，但他们是一维的。基于总总，<s>终于万众期待的转学生树</s>…于是我们创建了一个新的数据类型，称为树。</p><ul><li><p>定义树的一种自然的方法是递归，一棵树是一些节点的集合</p></li><li><p>这个集合可以是空集</p></li><li><p>若非空，则一棵树有称作<code>根(root)</code>的节点r以及0个或者多个非空的子树T1，T2，T3…组成</p></li><li><p>这些子树中每一课都被来自根r的一条有向的边（eage）所连接</p></li><li><p>每一棵子树的根叫做根r的儿子<code>(child)</code>，而r是每一棵子树的父亲<code>(parent)</code></p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/zishu1.png" alt="" /></p><blockquote><p>}树大部分操作的运行时间都在O(log N)</p></blockquote></li></ul><h2 id="树的种类"><a class="markdownIt-Anchor" href="#树的种类"></a> 树的种类</h2><p>我们可能已经听过很多树的名词，例如，红黑树，霍夫曼树，B树，B+树，平衡二叉树等等，而本文将要介绍二叉查找树，很多其他树都是它的变种，不像链表的线性访问，二叉查找树的大部分操作时间复杂度都为O(logN)。</p><h2 id="关于父亲儿子外祖父兄弟孙子之类的"><a class="markdownIt-Anchor" href="#关于父亲儿子外祖父兄弟孙子之类的"></a> 关于父亲儿子外祖父兄弟孙子之类的</h2><p>我觉得这就没有必要讲的吧，各位不懂的…<s>代入啊代入</s></p><h2 id="树的实现"><a class="markdownIt-Anchor" href="#树的实现"></a> 树的实现</h2><p>实现树的一种最常见的方法就是在<code>每一个节点除数据</code>外还需要一些<code>指针</code>，使得该节点每一个son都有一个指针指向它。树并没有规定子节点数量，所以子节点数可以变化很大而且事先不知道。因此没办法建立到各个子节点之间的链接，因为这样太浪费空间了。但是其实解法也很简单：`我们可以将每个节点的所有儿子都放在树节点的链表中。</p><p><strong>我们简单声明一个树的节点</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TreeNode</span> *PtrToNode;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    ElementType Element;</span><br><span class="line">    PtrToNode firstchild;<span class="comment">//第一个儿子</span></span><br><span class="line">    PtrToNode nextSibling;<span class="comment">//下一个兄弟</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>emmmmmm看起来很简单对吧</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/3135067848242761.jpg" alt="" /></p><h2 id="树的遍历及应用"><a class="markdownIt-Anchor" href="#树的遍历及应用"></a> 树的遍历及应用</h2><p>树有很多应用，比如Unix，dos在内的许多操作系统中的目录结构大多数反映分层结构的都是使用树来完成的。树的遍历有这难以比拟的优势。对于一个链表来说如果我们要查找他的一个元素，最坏的情况要从第一个遍历到最后一个，假如说有10000个元素我们就需要遍历到9999个元素才能找到。那么假如是我们是定义在树中即使要定义到最远的那个位置，测试次数也会大大减少。不同节点的树可能也有不同的算法。事实上，人们也已经开发出了这种算法。这里我们重点讨论二叉树。</p><h2 id="二叉树"><a class="markdownIt-Anchor" href="#二叉树"></a> 二叉树</h2><p>~~二叉树顾名思义就是很二。~~一个节点要分为<strong>左节点</strong>和<strong>右节点</strong>。</p><blockquote><p>节点层次:就是从根到该节点所有的弧加一,所以根节点的层次是0,非空节点最低就是2了</p></blockquote><p>以此类推</p><ul><li><p>第一层有1=2^0【由于mathjax的奇怪报错，我放弃使用渲染了，凑合看吧】</p></li><li><p>第二层有2=2^1</p></li><li><p>第三层有4=2^2</p></li><li><p>第四层…</p></li><li><p>第五层…</p></li><li><p>第六层…</p></li></ul><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/%E5%87%BA%E8%AD%A6.jpg" alt="" /></p><p>咦？你们铐我干什么？？什么！！！我没有水博客啊你们相信我啊！！！！</p><blockquote><p>满足该条件被称为完全二叉树</p></blockquote><p>不难看出所有的非终端节点都有两个节点，所有叶节点都在同一节点上，第<code>i+1</code>层有2^i个节点。</p><blockquote><p>对于非空二叉树来说，若其所有的非终端节点都有两个子节点，则叶节点的数目m大于非终端节点数目k，且m=k+1</p></blockquote><p>对于一般二叉树来说她的深度要比n小得多，这个平均深度为O（<math xmlns="http://www.w3.org/1998/Math/MathML"><br /><msqrt><br /><mrow class="MJX-TeXAtom-ORD"><br /><mi mathvariant="double-struck">N</mi><br /></mrow><br /></msqrt><br /></math>）【这里出现的是根号n，这里用的是mathml，如果出现其他奇怪的符号那就没办法了，火狐上测试是可以正常显示的】对于二叉查找树也被称为有序二叉树 其平均深度是O(log N)，但是呢我们有可能会遇到最糟糕的情况，没错就是完完全全笔笔直直一条直线这种情况深度就大到了N-1；</p><h2 id="二叉树的实现"><a class="markdownIt-Anchor" href="#二叉树的实现"></a> 二叉树的实现</h2><p>不出意外的来说一个二叉树最多有两个儿子【废话】，我们可以用指针直接指向他们，树节点在声明上和双链表很像。</p><p>在声明中，一个节点就是由key加上两个指向其他节点的指针<code>（Left and Right)</code>组成的结构。链表上的很多东西放在树上也同样适用，当进行一次插入操作时调用<code>malloc</code>创建节点【俺一般都用new，毕竟懒】节点调用后可以调用free删除后被释放。树一般华城圆圈并用一些直线连接起来。二叉树本身就是图。当然涉及到树时我们也没有必要画出<code>Null</code>指针，因为N个节点的一颗二叉树就需要N+1NULL指针；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">PtrToNode</span> Tree;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TreeNode</span> *PtrToNode;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    ElementType Element;</span><br><span class="line">    PtrToNode Left;</span><br><span class="line">    PtrToNode Right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="表达式树"><a class="markdownIt-Anchor" href="#表达式树"></a> 表达式树</h2><p>声明一点表达式树的树叶就是操作数。比如是常数或者变量，而其他的节点为操作符，由于这里的所有操作都是二元的，因此棵特定的树为二叉树。</p><p>大致过程为</p><ul><li>如果符号是操作数，那么我们就建立一个单节点树并将一个指向它的指针推入栈中</li><li>如果符号是操作数，则从栈中弹出两棵树T1和T2（先弹出T1），并形成一颗以操作符为根的树，其中T1为右儿子，T2为左儿子；</li><li>然后将新的树压入栈中，继续上述过程。</li></ul><p>来看一个栗子吧假如说输入为<code>a b + c d e + * *</code></p><p>（1）依次读入操作数a 和 b，并压入栈中</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/1.png" alt="" /></p><p>（2）紧接着“+”被读入，因此指向这两科树的指针被弹出，一颗新的树形成了，而指向该树的指针被压入栈中</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/2.png" alt="" /></p><p>（3）然后c，d，e被读入，在每个单节点被创建后，指向对应的树的指针被压入到栈中。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/3.png" alt="" /></p><p>接下来读入“+”号，因此两棵树合并。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/4.png" alt="" /></p><p>再次读入“+”号，因此，我们弹出两个树指针并形成一个新的树，“ * ”是它的根。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/52.png" alt="" /></p><p>读入最后一个符号，两棵树合并，而指向最后的树的指针留在栈中。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/5.png" alt="" /></p><h2 id="查找树adt-二叉查找树"><a class="markdownIt-Anchor" href="#查找树adt-二叉查找树"></a> 查找树ADT-------二叉查找树</h2><p>二叉树一个非常非常非常重要的应用应该就是查找了吧！！！如果要使一个二叉树变成二叉查找树的性质是，对于每个节点X，他的左子树的<code>所有</code>关键字值小于X的关键字值，而他的右子树中的<code>所有</code>关键字值大于X关键字值。这意味着该树所有的元素都可以使用某一种统一的方式排序,这点非常重要。</p><h2 id="初始化makeempty"><a class="markdownIt-Anchor" href="#初始化makeempty"></a> 初始化MakeEmpty</h2><p>这个操作主要用于初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SearchTree <span class="title">makeEmpty</span><span class="params">(SearchTree Tree)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="built_in">makeEmpty</span>(Tree-&gt;Left);</span><br><span class="line">        <span class="built_in">makeEmpty</span>(Tree-&gt;Right);</span><br><span class="line">        <span class="built_in">free</span>(Tree);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般的写法是初始化为单节点树，比如<code>TreeNode *tree = nullptr;</code>但是这里用了树的递归定义建立了一棵空树。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/%E5%9B%9B%E5%AD%A3/2883781127774921.png" alt="" /></p><h2 id="find"><a class="markdownIt-Anchor" href="#find"></a> Find</h2><p>这个操作一般需要返回指向树T中具有关键字X节点的指针，如果这种节点不存在就返回NULL；如果T是NULL我们就返回NULL，如果存储在T中的关键字是X，我们就可以返回T；然后还需要注意测试顺序：</p><ul><li>判断是否为空树，否则就要一直在NULL兜圈子了</li><li>最不可能的情况应该放在最后进行</li><li>尾递归尽量用赋值+goto解决，否则可能导致栈空间被用尽，但这里使用时合理的，因为栈空间的量不过才O（log N)而已</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Posttion <span class="title">Find</span><span class="params">(ElementType X, SearchTree Tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Tree == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (X &lt; Tree-&gt;Element)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Find</span>(X, Tree-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; Tree-&gt;Element)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Find</span>(X, Tree-&gt;Right);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> Tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嘛。这里吧goto代替尾递归的也给加上吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Posttion <span class="title">Find</span><span class="params">(ElementType X, SearchTree Tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">next:</span><br><span class="line">    <span class="keyword">if</span> (Tree == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (X &lt; Tree-&gt;Element)</span><br><span class="line">        Tree = Tree-&gt;Left;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; Tree-&gt;Element)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree = Tree-&gt;Right;</span><br><span class="line">        <span class="keyword">goto</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> Tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="findmin和findmax"><a class="markdownIt-Anchor" href="#findmin和findmax"></a> FindMin和FindMax</h2><p>返回树中的最大元和最小元的位置</p><ul><li><p>对于FindMin从根开始只要有左儿子就向左进行，终止点是最小元素。</p></li><li><p>至于FindMax当然是反过来啊！！</p></li></ul><div class="note info flat"><p>递归是如此的简单以至于很多程序猿都不厌其烦的使用它。这里我偏不。</p></div><h3 id="findmin的递归实现"><a class="markdownIt-Anchor" href="#findmin的递归实现"></a> FindMIn的递归实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Posttion <span class="title">FindMin</span><span class="params">(SearchTree Tree)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree==<span class="literal">nullptr</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(Tree-&gt;Left==<span class="literal">nullptr</span>)</span><br><span class="line">     <span class="keyword">return</span> Tree;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">FindMin</span>(Tree-&gt;Left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="findmax的非递归实现"><a class="markdownIt-Anchor" href="#findmax的非递归实现"></a> FindMax的非递归实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Posttion <span class="title">FindMax</span><span class="params">(SearchTree Tree)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree!=<span class="literal">nullptr</span>)</span><br><span class="line">    <span class="keyword">while</span>(Tree-&gt;Right!=<span class="literal">nullptr</span>)</span><br><span class="line">    Tree=Tree-&gt;Right;</span><br><span class="line">    <span class="keyword">return</span> Tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要小心处理空树这种情况，小心原地兜圈圈</p></blockquote><h2 id="insert"><a class="markdownIt-Anchor" href="#insert"></a> Insert</h2><p>插入的操作是相对简单的啊！将X插入到树T中这件事，可以用Find那样沿着树来查找。如果找到X可以做一些更新啊，否则将X插入到遍历路径的最后一点上。必如说我们要入5，先找到关键字4的节点出，我们需要向右行进，但是右边不存在子树，所以5不在这棵树上。因此我们需要插入5。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/2988714247500569.jpg" alt="" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SearchTree <span class="title">insert</span><span class="params">(ElementType X, SearchTree Tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Tree == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree = <span class="keyword">new</span> TreeNode;</span><br><span class="line">        <span class="keyword">if</span> (Tree == <span class="literal">nullptr</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Tree-&gt;Element = X;</span><br><span class="line">            Tree-&gt;Left = Tree-&gt;Right = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &lt; Tree-&gt;Element)</span><br><span class="line">        Tree-&gt;Left = <span class="built_in">insert</span>(X, Tree-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; Tree-&gt;Element)</span><br><span class="line">        Tree-&gt;Right = <span class="built_in">insert</span>(X, Tree-&gt;Right);</span><br><span class="line">    <span class="keyword">return</span> Tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>初始的T指向该树的根，根在插入时变化，因此Insert被写成一个指向新树根的指针，所以的两次递归把X插到适当的子树中</li></ul><h2 id="delete"><a class="markdownIt-Anchor" href="#delete"></a> Delete</h2><p>删除算是比较难的操作了，一旦发现要删除的节点我们需要考虑以下几种情况</p><ul><li>节点只有一片树叶，可以立刻被删除</li><li>如果节点有一个儿子，那该节点可以在其父节点调整指针绕过该节点后被删除</li><li><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/shunaotu.png" alt="" /></li></ul><h3 id="比较复杂的情况"><a class="markdownIt-Anchor" href="#比较复杂的情况"></a> 比较复杂的情况</h3><p>相对来说比较复杂的情况是处理具有两个儿子的节点，比较常用的策略是用其右子树的最小数据代替该节点的数据并递归删除那个节点（现在它是空的），因为右子树的最小节点不可能有左儿子，所以第二次删除相对容易。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/ergezishu1.png" alt="" /></p><blockquote><p>抱歉啊一不留神做完图发现2没换？？？第二个图的2应该换成3</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SearchTree <span class="title">Delete</span><span class="params">(ElementType X, SearchTree Tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Posttion TemCell;</span><br><span class="line">    <span class="keyword">if</span> (Tree == <span class="literal">nullptr</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Element not found&quot;</span></span><br><span class="line">             &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &lt; Tree-&gt;Element)</span><br><span class="line">        Tree-&gt;Left = <span class="built_in">Delete</span>(X, Tree-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; Tree-&gt;Element)</span><br><span class="line">        Tree-&gt;Right = <span class="built_in">Delete</span>(X, Tree-&gt;Right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Tree-&gt;Left &amp;&amp; Tree-&gt;Right)</span><br><span class="line">    &#123;</span><br><span class="line">        TemCell = <span class="built_in">FindMin</span>(Tree-&gt;Right);</span><br><span class="line">        Tree-&gt;Element = TemCell-&gt;Element;</span><br><span class="line">        Tree-&gt;Right = <span class="built_in">Delete</span>(Tree-&gt;Element, Tree-&gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        TemCell = Tree;</span><br><span class="line">        <span class="keyword">if</span> (Tree-&gt;Left == <span class="literal">nullptr</span>)</span><br><span class="line">            Tree = Tree-&gt;Right;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Tree-&gt;Right = <span class="literal">nullptr</span>)</span><br><span class="line">            Tree=Tree-&gt;Left;</span><br><span class="line">        <span class="built_in">free</span>(TemCell);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个程序的效率并不高，因为它沿该树进行两趟搜索一查找和删除右子树中最小的节点。</p><h2 id="平均情况"><a class="markdownIt-Anchor" href="#平均情况"></a> 平均情况</h2><p>在之前，出了MakeEmpty之外我们所有的操作都花费了O（log N）因为我们用常数时间在树中降低了一层，这样对树的操作大概降低了一半左右。出了前面提到的MakeEmpty其他都是O（d），其中d表示所访问的关键字深度。</p><p>一棵树所有的节点深度的和被称为<code>内部路径长</code>,如果我们现在要计算二叉查找树的平均内部路径长，其中的平均是对向二叉查找树中所有的可能的插入序列进行的。</p><h4 id="dn是n个节点的内部路径长"><a class="markdownIt-Anchor" href="#dn是n个节点的内部路径长"></a> D（N）是N个节点的内部路径长</h4><table><thead><tr><th style="text-align:center">D(1)</th><th style="text-align:center">0</th></tr></thead><tbody><tr><td style="text-align:center">具有i节点的左子树</td><td style="text-align:center">D(i)</td></tr><tr><td style="text-align:center">右子树</td><td style="text-align:center">D(N-i-1)</td></tr><tr><td style="text-align:center">D(N)</td><td style="text-align:center">D(i)+D(n-i-1)+N-1</td></tr><tr><td style="text-align:center">D(N)=2/N{(j=0-&gt;N-1)D(j)}+N-1</td><td style="text-align:center">D(N)=O(N log N)</td></tr></tbody></table><blockquote><p>在原树中所有节点要加深1度</p></blockquote><p>这个看起来让人感觉非常愉悦，但是仅凭这个我们是无法保证这个O（log N）是完全正确的，原因在于去删除操作，我们并不清楚是否所有二叉查找树都是等可能出现的，在删除的时候我们选择该元素的最小右子树代替，这种算法有利于左子树比右子树深，当我们进行大量的删除之后高达几十万次就可以明显的看待两边显著的差别。左子树明显会比右子树要深。为了保证所有的节点不得过深所以就搞来了所谓的AVL树。这是一种超老的平衡查找树。</p><p>溜了溜了【猝不及防】</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/img1583054611615.jpeg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再探队列</title>
      <link href="/posts/ffe3b3b2/"/>
      <url>/posts/ffe3b3b2/</url>
      
        <content type="html"><![CDATA[<h1 id="再探队列"><a class="markdownIt-Anchor" href="#再探队列"></a> 再探队列</h1><p>我为什么要说再？？？？？打算明天在总结的想想不能再鸽了啊。因为菜鸡越鸽越菜！为了防止我成为弱弱弱弱的菜鸡所以很有必要好好好好学习。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/2702548124037077.jpg" alt="" /></p><h2 id="什么是队列"><a class="markdownIt-Anchor" href="#什么是队列"></a> 什么是队列</h2><p>队列是一个简单的等待数列。尾部加入元素，头部删除元素，和栈不同的是它是可以两端都是用的一种结构：一端用来加入元素，一端用来删除元素。因此最后一个元素只能等排在他之前的元素全部删除之后才可以操作。操作和栈都差不多</p><ul><li>clean()----清空队列</li><li>isEmpty()----判断队列是否为空</li><li>enqueue(a)-----在尾部加入元素a</li><li>dequeue()------取出队列的第一个元素</li><li>FristEI()-------返回队列第一个元素但不删除</li></ul><p>那么接下来就先写一个超级简单模板库队列【毕竟我是辣鸡嘛】</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/2702548072633587.jpg" alt="" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q1;</span><br><span class="line">queue&lt;<span class="type">int</span>,list&lt;<span class="type">int</span>&gt;&gt;q2;</span><br><span class="line">q1.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">q1.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">q1.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">q1.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line">q2.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">q2.<span class="built_in">push</span>(<span class="number">6</span>);</span><br><span class="line">q2.<span class="built_in">push</span>(<span class="number">7</span>);</span><br><span class="line">q2.<span class="built_in">push</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">q1.<span class="built_in">push</span>(q2.<span class="built_in">back</span>());</span><br><span class="line"><span class="keyword">while</span>(!q1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">  cout&lt;&lt;q1.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">  q1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!q2.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;q2.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">  q2.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是标准模板库中的队列，自己写模板什么的…毕竟我是辣鸡嘛</p><h4 id="顺序队列"><a class="markdownIt-Anchor" href="#顺序队列"></a> 顺序队列</h4><p>不理想的设计【雾】：<br />1 . 若使用顺序表的尾端插入实现<code>enqueue</code>操作，根据队列性质，出队操作应该在表的首端进行。为了维护顺序表的完整性（表元素在表前端连续存放），出队操作取出当时的首元素后，就需要把表中其余元素全部前移，这样就会是一个 <code>O(n)</code> 时间的操作。<br />2 . 反过来：从尾端出队是 <code>O(1)</code> 操作，但从首端入队就是 <code>O(n)</code> 时间操作，这种设计也不理想。<br />3 . 另一种是在队首元素出队后表中的元素不前移，但记住新队头位置。如果队列中没有空闲了，只需要在入队时，再集中触发一次数据的搬移操作。</p><p>顺序队列也被称为队列的数组是实现，我写的我感觉完全看不出来错误，但是编译器他就是一直报错，啊，我是辣鸡！！！说以为了保证严谨性就完完全全拿了网上一片大大的文章</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/%E5%9B%9B%E5%AD%A3/2883781113174557.jpg" alt="" /></p><div class="note success flat"><h4 id="源代码地址"><a class="markdownIt-Anchor" href="#源代码地址"></a> 源代码地址</h4><p><strong><a href="https://blog.csdn.net/FreeeLinux/article/details/52075018">请摁我！</a></strong></p></div><p>一：队列的数组实现【来了来了模板他来了】</p><p>我们用 first 和 last 存储队列首元素和尾元素的下标。<br />*当队列为空时，习惯上设置 first 和 last 的值为-1。当数据入队时, 必须先++相应的下标，然后再存入数据。</p><p>*判断队列是否为空：这时只需要看 first 就可以，如果 first == -1 ， 队列即为空。</p><p>*判断队列是否已满：队列满队，有两种情况：<br />1.当队列首次按顺序存满数据时，它的 first 等于0，指向storge数组第一个元素位置storge[0]，而它的last 等于size-1，指向storge数组最后一个元素storge[size-1]，此时队列已满。<br />2.另外一种情况就是，但我们首次队列满时，将一些元素出队，由于队列是FIFO结构，从头部开始出队，这样在队列元素未全部出队的情况下，first 指向后移。当我们再次将一些数据入队时，last 从storge[size-1] 再次回到 storge[0]，然后按照队列顺序入队，当last = first -1 时，队列再次满队。</p><p>*入队操作：<br />1.首先入队操作首先判断队列是否已满，队列已满则不入队。<br />2.其次，我们要注意到特殊情况，当队列由空队开始存入第一个数据时，以及last 等于 size-1 时，我们下一个数据入队会被存储在storge[0]的位置，此时需要令 last = 0，不要忘了如果 first 等于-1，同时要令 first = 0;<br />3.其他情况++last，然后入队即可。</p><p>*出队操作：<br />1.首先判断队列是否空，若为空，则不能出队。<br />2.重点：当 first等于last 时，说明队列中只有一个元素，此时出队后队列为空，切记将 first ，last值 赋为-1，表示队列空。<br />3.特殊情况：当 first 等于size-1 时，它处于storge数组尾部，事实上由于它是队列此状态下的首元素，队列的第二个元素是storge数组storge[0]，所以此时进行出队操作后，须将 first 的值设置为0。<br />4.其他情况 直接出队，++first即可。</p><p>队列数组实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _ARRAY_QUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _ARRAY_QUEUE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="type">int</span> size = <span class="number">0</span>&gt;</span><br><span class="line"><span class="keyword">class</span> Queue&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Queue</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_empty</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_full</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">enqueue</span><span class="params">(<span class="type">const</span> T&amp;)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T storge[size];</span><br><span class="line">    <span class="type">int</span> first;</span><br><span class="line">    <span class="type">int</span> last;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="type">int</span> size&gt;</span><br><span class="line">Queue&lt;T, size&gt;::<span class="built_in">Queue</span>()</span><br><span class="line">&#123;</span><br><span class="line">    first = last = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="type">int</span> size&gt;</span><br><span class="line"><span class="type">bool</span> Queue&lt;T, size&gt;::<span class="built_in">is_empty</span>()<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> first == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="type">int</span> size&gt;</span><br><span class="line"><span class="type">bool</span> Queue&lt;T, size&gt;::<span class="built_in">is_full</span>()<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> first == <span class="number">0</span> &amp;&amp; last == size - <span class="number">1</span> || last == first - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="type">int</span> size&gt;</span><br><span class="line"><span class="type">void</span> Queue&lt;T, size&gt;::<span class="built_in">enqueue</span>(<span class="type">const</span> T&amp; elem)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">is_full</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(last == <span class="number">-1</span> || last == size <span class="number">-1</span>)&#123;</span><br><span class="line">            storge[<span class="number">0</span>] = elem;</span><br><span class="line">            last = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(first == <span class="number">-1</span>)</span><br><span class="line">                first = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> storge[++last] = elem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Queue full.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="type">int</span> size&gt;</span><br><span class="line">T Queue&lt;T, size&gt;::<span class="built_in">dequeue</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">is_empty</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Queue empty.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T tmp;</span><br><span class="line">     </span><br><span class="line">    tmp = storge[first];</span><br><span class="line">    <span class="keyword">if</span>(first == last)</span><br><span class="line">        last = first = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(first == size - <span class="number">1</span>)</span><br><span class="line">        first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> ++first;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="type">int</span> size&gt;</span><br><span class="line"><span class="type">void</span> Queue&lt;T, size&gt;::<span class="built_in">traverse</span>()<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i=first; i&lt;=last; ++i)</span><br><span class="line">        cout &lt;&lt; storge[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>下面是测试程序实测完全OK</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;array_queue.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Queue&lt;<span class="type">int</span>, <span class="number">3</span>&gt; queue;</span><br><span class="line">    </span><br><span class="line">    queue.<span class="built_in">enqueue</span>(<span class="number">10</span>);</span><br><span class="line">    queue.<span class="built_in">enqueue</span>(<span class="number">10</span>);</span><br><span class="line">+/-    queue.<span class="built_in">enqueue</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; queue.<span class="built_in">is_full</span>() &lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    queue.<span class="built_in">traverse</span>();</span><br><span class="line">    </span><br><span class="line">    queue.<span class="built_in">dequeue</span>();</span><br><span class="line">    queue.<span class="built_in">dequeue</span>();</span><br><span class="line">    queue.<span class="built_in">dequeue</span>();</span><br><span class="line">    </span><br><span class="line">    queue.<span class="built_in">is_empty</span>();</span><br><span class="line">    queue.<span class="built_in">traverse</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而c版的实现是这样的哒</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="comment">//===============循环队列=====================</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXQSIZE 6    <span class="comment">//最大队列长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> QElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    QElemType *base; <span class="comment">//初始化的动态分配存储分配空间</span></span><br><span class="line">    <span class="type">int</span> front;<span class="comment">//头指针，若队列不空，指向队头元素</span></span><br><span class="line">    <span class="type">int</span> rear;<span class="comment">//尾指针，若队列不空，指向队尾元素的下一个位置</span></span><br><span class="line">&#125;SqQueue;</span><br><span class="line"><span class="comment">//================队列初始化==========</span></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue *Q)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造一个空队列Q</span></span><br><span class="line">    Q-&gt;base = <span class="keyword">new</span> QElemType[MAXQSIZE];</span><br><span class="line">    <span class="keyword">if</span> (!Q-&gt;base) <span class="built_in">exit</span>(OVERFLOW);<span class="comment">//存储分配失败</span></span><br><span class="line">    Q-&gt;front = Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//================入队================================</span></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(SqQueue *Q,QElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//插入元素e为Q的新的队尾元素</span></span><br><span class="line">    <span class="keyword">if</span> ((Q-&gt;rear + <span class="number">1</span>) % MAXQSIZE == Q-&gt;front)<span class="keyword">return</span> ERROR;<span class="comment">//队列满</span></span><br><span class="line">    Q-&gt;base[Q-&gt;rear] = e;</span><br><span class="line">    Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % MAXQSIZE;<span class="comment">//重新设置队尾指针</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===============出队=================================</span></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(SqQueue *Q, QElemType *e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//若队列不空，则删除Q的对头元素，用e返回其值</span></span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear)<span class="keyword">return</span> ERROR;<span class="comment">//队空</span></span><br><span class="line">    *e = Q-&gt;base[Q-&gt;front];</span><br><span class="line">    Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqQueue Q;</span><br><span class="line">    QElemType e;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">5</span>, j = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">InitQueue</span>(&amp;Q);</span><br><span class="line">    <span class="keyword">for</span> (i; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">EnQueue</span>(&amp;Q, i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;入队元素为%d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(&amp;Q, &amp;e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;出队元素为%d\n&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链式队列"><a class="markdownIt-Anchor" href="#链式队列"></a> 链式队列</h4><p>最简单的单链表只支持首端 <code>O(1)</code> 的操作，在另一端操作需要 <code>O(n)</code> 时间。不适合作为队列的实现基础。<br />考虑<code>带表尾指针</code>的单链表，它支持 <code>O(1)</code> 时间的尾端插入操作；再加上表首端的高效访问和删除，基于单链表实现队列就很容易。</p><div class="note warning flat"><h4 id="辣鸡本鸡"><a class="markdownIt-Anchor" href="#辣鸡本鸡"></a> 辣鸡本鸡</h4><p><strong>依然是大大的</strong> <a href="https://blog.csdn.net/FreeeLinux/article/details/52075018">代码</a></p></div><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/2702547972708483.jpg" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _LIST_QUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _LIST_QUEUE_H</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>::std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Queue</span>() = <span class="keyword">default</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_empty</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    <span class="function">T&amp; <span class="title">front</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">enqueue</span><span class="params">(<span class="type">const</span> T&amp;)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    list&lt;T&gt; lst;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">bool</span> Queue&lt;T&gt;::<span class="built_in">is_empty</span>()<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lst.<span class="built_in">is_empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; Queue&lt;T&gt;::<span class="built_in">front</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lst.<span class="built_in">front</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T Queue&lt;T&gt;::<span class="built_in">dequeue</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!lst.<span class="built_in">size</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Queue empty.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    T tmp = lst.<span class="built_in">front</span>();</span><br><span class="line">    lst.<span class="built_in">pop_front</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> Queue&lt;T&gt;::<span class="built_in">enqueue</span>(<span class="type">const</span> T&amp; elem)</span><br><span class="line">&#123;</span><br><span class="line">    lst.<span class="built_in">push_back</span>(elem);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> Queue&lt;T&gt;::<span class="built_in">clear</span>()</span><br><span class="line">&#123;</span><br><span class="line">    lst.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">size_t</span> Queue&lt;T&gt;::<span class="built_in">size</span>()<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lst.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><blockquote><p>这里说明一下。链表的实现采用了标准模板库中的list</p></blockquote><h2 id="那再来说两种队列吧"><a class="markdownIt-Anchor" href="#那再来说两种队列吧"></a> 那再来说两种队列吧</h2><h3 id="阻塞队列"><a class="markdownIt-Anchor" href="#阻塞队列"></a> 阻塞队列</h3><p>阻塞队列其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从队头取数据会被阻塞。因为此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后再插入数据，然后再返回。</p><blockquote><p>注：可以用阻塞队列实现一个“生产者-消费者模型”。基于阻塞队列，可以通过协调“生产者”和“消费者”的个数，来提高数据的处理效率。</p></blockquote><h3 id="并发队列"><a class="markdownIt-Anchor" href="#并发队列"></a> 并发队列</h3><p>在多线程情况下，会有多个线程同时操作队列，这个时候就会存在线程安全问题。<br />要实现一个线程安全的队列就需要<code>并发队列</code>。<br />最简单直接的实现方式是直接在 <code>enqueue()</code>、<code>dequeue()</code> 方法上加锁，但是锁粒度大并发度会比较低，同一时刻仅允许一个存或者取操作。</p><h2 id="优先队列"><a class="markdownIt-Anchor" href="#优先队列"></a> 优先队列</h2><p>啥玩意是优先队列 啊，小朋友，你是否有很多问题，在很多情况下，简单的队列结构是远远不够的，我们需要更复杂的方法来应付这些复杂的场景。加入是一个残疾人去银行排队，职员应该首先给他服务而不是排在他前面的那些人。公路收费亭也应该优先于警车和消防车优先通过。说以休闲队列的关键在于，如何更加快速高效的进行出队列和如对列的操作。元素会随机到达队列，说以并不能保证排在前面的元素先出列排在后面的元素后出列。在不同的引用场景下我们可以采用不同的优先规则。这里主要说明标准模板库中的优先对列。</p><ul><li><p>priority_queue容器默认vector容器x实现</p></li><li><p>deque容器也是可以的</p></li><li><p>list是不行哒</p><h2 id="stl优先队列的使用"><a class="markdownIt-Anchor" href="#stl优先队列的使用"></a> STL优先队列的使用</h2><hr /><h3 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;Type,Container=vector&lt;Type&gt;,cmp=greater&lt;Type&gt;&gt;que;</span><br></pre></td></tr></table></figure><p>其中，第一个参数为数据类型，第二个参数为容器（默认为vector），第三个参数为比较函数（默认大值优先）。</p></li></ul><h3 id="比较函数的写法"><a class="markdownIt-Anchor" href="#比较函数的写法"></a> 比较函数的写法</h3><ul><li>使用C++自带的库函数</li><li>自定义优先级1</li><li>自定义优先级2</li><li>自定义优先级3</li></ul><p>方法一：使用C++自带的库函数</p><p>首先在头文件中引用include库函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br></pre></td></tr></table></figure><p>functional 中提供了如下的基于模板的比较函数对象。</p><ul><li>equal_to: 等于</li><li>not_equal_to: 不等于</li><li>greater: 大于</li><li>greater_equal: 大于等于</li><li>less: 小于</li><li>less_equal: 小于等于</li></ul><p>创建方法：<code>priority_queue,less&gt;que;</code></p><p>方法二：自定义优先级1，队列元素为数值型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp1</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&lt;b;<span class="comment">//最大值优先</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;b;<span class="comment">//最小值优先</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>创建方法：<code>priority_queue,cmp1&gt;que;</code></p><p>方法三：自定义优先级2，队列元素为结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node1</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node1 &amp;a) <span class="type">const</span> &#123;<span class="comment">//只能重载&lt;</span></span><br><span class="line">        retrun x&lt;a.x;<span class="comment">//最大值优先</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node2</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node2 &amp;a) <span class="type">const</span> &#123;</span><br><span class="line">        retrun x&gt;a.x;<span class="comment">//最小值优先</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>创建方法：<code>priority_queueque;</code></p><p>方法四：自定义优先级3，队列元素为结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;；</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node &amp;a,<span class="type">const</span> node &amp;b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;按成员x最大值优先</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*bool operator &lt; (const node &amp;a,const node &amp;b)&#123;//由于都是重载&lt;,所以两种比较形式只能同时存在一种</span></span><br><span class="line"><span class="comment">    return a.y&gt;b.y;按成员y最小值优先</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><p>创建方法：<code>priority_queueque;</code></p><div class="note success flat"><p>当然实际中俺就使过第一种嘻嘻嘻</p></div><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/2702548040340098.jpg" alt="" /></p><p>那那那这里就来具体实现一下标准模板库中的优先对列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt;q1;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt;&gt;q2;</span><br><span class="line">    q1.<span class="built_in">push</span>(<span class="number">1</span>);q1.<span class="built_in">push</span>(<span class="number">2</span>);q1.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">    q2.<span class="built_in">push</span>(<span class="number">3</span>);q2.<span class="built_in">push</span>(<span class="number">2</span>);q2.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,less&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">q3</span>(a,a+<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">while</span> (!q1.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;q1.<span class="built_in">top</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        q1.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q2.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;q2.<span class="built_in">top</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        q2.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q3.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;q3.<span class="built_in">top</span>();</span><br><span class="line">        q3.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你以为完了吗还有呐</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/%E5%9B%9B%E5%AD%A3/2926936155513511.jpg" alt="" /></p><h2 id="双端队列"><a class="markdownIt-Anchor" href="#双端队列"></a> 双端队列</h2><p>先说方法STL提供的方法贼多</p><p>构造：</p><ul><li><p>deque<Elem> c 创建一个空的deque</p></li><li><p>deque<Elem> c1(c2) 复制一个deque。</p></li><li><p>deque<Elem> c(n) 创建一个deque，含有n个数据，数据均已缺省构造产生。</p></li><li><p>deque<Elem> c(n, elem) 创建一个含有n个elem拷贝的deque</p></li><li><p>deque<Elem> c(beg,end) 创建一个以[beg;end)区间的deque</p></li><li><p>c.~deque<Elem>() 销毁所有数据，释放内存</p></li></ul><p>方法：</p><ul><li><p>c.assign(beg,end) 将[beg; end)区间中的数据赋值给c。</p></li><li><p>c.assign(n,elem) 将n个elem的拷贝赋值给c。</p></li><li><p>c. at(idx) 传回索引idx所指的数据，如果idx越界，抛出out_of_range。</p></li><li><p>c.back() 传回最后一个数据，不检查这个数据是否存在。</p></li><li><p>c.begin() 传回迭代器中的第一个数据。</p></li><li><p>c.clear() 移除容器中所有数据。</p></li><li><p>c.empty() 判断容器是否为空。</p></li><li><p>c.end() 指向迭代器中的最后一个数据地址。</p></li><li><p>c.erase(pos) 删除pos位置的数据，传回下一个数据的位置。</p></li><li><p>c.erase(beg,end) 删除[beg,end)区间的数据，传回下一个数据的位置。</p></li><li><p>c.front() 传回第一个数据。</p></li><li><p>get_allocator 使用构造函数返回一个拷贝。</p></li><li><p>c.insert(pos,elem) 在pos位置插入一个elem拷贝，传回新数据位置</p></li><li><p>c.insert(pos,n,elem) 在pos位置插入&gt;n个elem数据。无返回值</p></li><li><p>c.insert(pos,beg,end) 在pos位置插入在[beg,end)区间的数据。无返回值</p></li><li><p>c.max_size() 返回容器中最大数据的数量。</p></li><li><p>c.pop_back() 删除最后一个数据。</p></li><li><p>c.pop_front() 删除头部数据。</p></li><li><p>c.push_back(elem) 在尾部加入一个数据。</p></li><li><p>c.push_front(elem) 在头部插入一个数据。</p></li><li><p>c.rbegin() 传回一个逆向队列的第一个数据。</p></li><li><p>c.rend() 传回一个逆向队列的最后一个数据的下一个位置。</p></li><li><p>c.resize(num) 重新指定队列的长度。</p></li><li><p>c.size() 返回容器中实际数据的个数。</p></li><li><p>我决对不是在水博客你们相信我啊！！！！！！</p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/四季/2926936099679448.jpg" style="zoom:50%;" /></li></ul><p>标准模板库中的双端队列[double-ended queue]是允许在两端访问的线性表，因此双端队列可以用双向链表实现。在STL中的容器list已经添加了双向链表，在STL在双端队列中添加了很多额外的功能，可以随机访问双端队列的``任意位置`。如同 数组一样。不说了直接开始水一段代码！【雾】胜利的法则已经确定！！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt;q1;</span><br><span class="line">    q1.<span class="built_in">push_front</span>(<span class="number">1</span>);</span><br><span class="line">    q1.<span class="built_in">push_front</span>(<span class="number">2</span>);</span><br><span class="line">    q1.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    q1.<span class="built_in">push_back</span>(<span class="number">4</span>);<span class="comment">//现在序列应该是2134;</span></span><br><span class="line">    deque&lt;<span class="type">int</span>&gt;<span class="built_in">q2</span>(q1.<span class="built_in">begin</span>()+<span class="number">1</span>,q1.<span class="built_in">begin</span>()<span class="number">-1</span>);<span class="comment">//13</span></span><br><span class="line">    q1[<span class="number">1</span>]=<span class="number">5</span>;<span class="comment">//现在是2534,我说过了完全可以当数组使</span></span><br><span class="line">    q1.<span class="built_in">erase</span>(q1.<span class="built_in">begin</span>());<span class="comment">//534</span></span><br><span class="line">    q1.<span class="built_in">insert</span>(q1.<span class="built_in">end</span>()<span class="number">-1</span>,<span class="number">2</span>,<span class="number">6</span>);<span class="comment">//53664</span></span><br><span class="line">    <span class="built_in">sort</span>(q1.<span class="built_in">begin</span>(),q1.<span class="built_in">end</span>());<span class="comment">//34566</span></span><br><span class="line">    deque&lt;<span class="type">int</span>&gt;q3;</span><br><span class="line">    q3.<span class="built_in">resize</span>(q1.<span class="built_in">size</span>()+q2.<span class="built_in">size</span>());<span class="comment">//q3=&#123;0,0,0,0,0,0,0&#125;</span></span><br><span class="line">    <span class="built_in">merge</span>(q1.<span class="built_in">begin</span>(),q1.<span class="built_in">end</span>(),q2.<span class="built_in">begin</span>(),q2.<span class="built_in">end</span>(),q3.<span class="built_in">begin</span>());<span class="comment">//1334566</span></span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然有点突然但大概就那么多吧 。好了大概就那么多吧，emmmmm我想想还有什么要说的吗emmmmmm估计没了，在写下去水博客就实锤了！！！！还有我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客我没有水博客</p><p>你们相信我啊！！！！</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/%E5%8D%8E%E4%B8%BD%E7%9A%84%E5%8F%9B%E9%80%86.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念1</title>
      <link href="/posts/c19d3793/"/>
      <url>/posts/c19d3793/</url>
      
        <content type="html"><![CDATA[<h1 id="碎碎念1"><a class="markdownIt-Anchor" href="#碎碎念1"></a> 碎碎念1</h1><p>​                                                                                                                                                                                                                                                                                                                                                                                    有时候我的个人 情绪算是蛮难控制的，但是我却隐藏的很好。我明白有些事情只是徒增烦恼，但是人就是奇怪的生物，总是喜欢在一些毫无意义的事情上做无谓的挣扎结果也许必然也是毫无意义的吧。时常陷入奇怪的情绪，我不认为这些情绪是消极的，但显然也不积极。年纪大了【雾】人是思想就像芦苇越长越深。有的时候因为无所谓的琐事陷入烦恼，有的时候也因为一些小事而眉飞色舞。有的时候为了掩饰自己的迷茫，必须坚持下去。嗯！！！我已经长大了，我这样说着这样坚持着，殊不知在很多时候我依旧想当个孩子。可是我也明白我早就不是那个无忧无虑的孩子了。在没有变化的日子里我开始烦恼，生气，不知所措。若什么都做不到，就伪装自己吧，假装没事一样，可当我再次回头，已经没有一丝痕迹留下，已经找不到来时的路。只能摸索着继续向前。这是我所期望的吗，恐怕连我都不清楚。但是除此之外已经没有其他选择了。当逐渐长大并且成熟 我唯一能做的就是告诉自己：保持自我，别逃避。【以上纯属胡说八道！！！！！！！】</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/%E5%9B%9B%E5%AD%A3/huoche.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
            <tag> 不知道在讲啥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念2</title>
      <link href="/posts/58946629/"/>
      <url>/posts/58946629/</url>
      
        <content type="html"><![CDATA[<h1 id="碎碎念2"><a class="markdownIt-Anchor" href="#碎碎念2"></a> 碎碎念2</h1><p>现在的时间是22：12了，现在的时间是22点多了</p><p>每到这个点都感觉有点疲惫</p><p>虽然有些累</p><p>但是却完完全全没有获得应有的满足感</p><p>反而有些焦躁的情绪</p><p>很多时候努力很回报完完全全是不对的等的</p><p>回报这种东西甚至很多时候都显得那么不真实</p><p>到头来赤裸裸的现实大概可能会狠狠嘲笑这种家伙</p><p>看清楚了吗，这种极度扭曲不平衡的东西就是你唯一的选择</p><p>是的</p><p>人一旦饿了就会不停的抱怨这种毫无意义的狗屁废话</p><p>因为肚子将不满情绪传给大脑了</p><p>低效率的学习</p><p>和循环往复的不停踩坑真的有些累了</p><p>很多时候都在怀疑自己到底在什么，我也明白很多事情急不来但是我可能是真的饿了才会在这思考这种白痴问题吧【滑稽】</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/2702547923250827.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
            <tag> 不知道在讲啥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈学不会咋办嘛</title>
      <link href="/posts/834bc38f/"/>
      <url>/posts/834bc38f/</url>
      
        <content type="html"><![CDATA[<h1 id="栈学不会咋办嘛"><a class="markdownIt-Anchor" href="#栈学不会咋办嘛"></a> 栈学不会咋办嘛</h1><p>写篇博客之前我已经鸽了好久，因为只几天一直在折腾github和一些插件，正规的学习也鸽了好久，今天又温习了一下链表感觉也有好多坑要填，暂时就先不填了，感觉需要填好多，所以暂时就先鸽了吧。这次写博客我老老实实的加上了date标签，因为昨天晚上用github action自动部署的时候之前的更新记录全给我推平了，所以这篇博客以前的更新时间全是昨天晚上。还有想要吐槽的地方是用ssh验证的时候一直都部署失败，折腾了几个小时耐心到达极点的情况下果断选择了token。token大法好。还有之前为了破解腾讯的防盗链也花了不少时间。这真是一个非常折磨人的过程。腾讯抠到连蹭个外链都不行了吗。</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/2702548106487285.jpg" alt="" /></p><h2 id="什么是栈"><a class="markdownIt-Anchor" href="#什么是栈"></a> 什么是栈</h2><p><code>栈是一种线性数据结构</code>,存储以及查找数据时只能访问栈的一端。形象点来说栈类似于自助餐厅中的一叠盘子，新盘子呢在最上面，去的时候也是从上面取。最后放上去的盘子是最先被取走的盘子，因此栈被称为后进先出<code>(LIFO,last in/first out)</code>结构。栈必须有一个盘子的时候才能取出盘子，只有空间还够的时候（比如说盘子我还能加，不要停下来啊），才能加上一个盘子。因此`可以改变栈的状态和检测栈的状态来操作定义栈，这些操作包括：</p><ul><li>clean()-------清空栈</li><li>isEmpty()------判断栈是否为空</li><li>push(el)------将le元素放到栈的顶部</li><li>pop()-------弹出栈顶元素</li><li>topEI-------获取栈顶部元素，但不删除该元素</li></ul><h2 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h2><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/chrome-capt.gif" alt="" /></p><h2 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h2><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/chrome-ca.gif" alt="" /></p><p>这些都是比较简单的实现，对于栈来说可操作的地方只有栈顶，当然栈的应用比较常见的一个就是程序中匹配分隔符，当然我们常用的浏览器的前进和后退也是用栈实现的。</p><h2 id="关于括号匹配"><a class="markdownIt-Anchor" href="#关于括号匹配"></a> 关于括号匹配</h2><p>很久之前写过一篇，容许我献上我拙劣的源代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string str;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">    <span class="type">int</span> len=str.<span class="built_in">size</span>();</span><br><span class="line">    stack &lt;<span class="type">char</span>&gt; ss;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;len ; ++i)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        ch=str[i];</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            sum++;</span><br><span class="line">            ss.<span class="built_in">push</span>(ch);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ch==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (ss.<span class="built_in">empty</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ss.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ss.<span class="built_in">empty</span>()&amp;&amp;sum!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;YES&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总体来看实现还是非常简单的</p><p>那么现在我们来看看具体的实现是什么样子的</p><p>栈既可以用数组实现，也可以用链表来实现。用数组实现的栈，叫作顺序栈，用链表实现的栈，叫作链栈。这里我们用py实现一下，ps:py半吊子出家的某人</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/2702547826743327.gif" alt="" /></p><ul><li><p>示例：顺序栈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>():</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,size</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化&quot;&quot;&quot;</span></span><br><span class="line">        self.size = size</span><br><span class="line">        self.num = <span class="number">0</span></span><br><span class="line">        self.stack = []</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getSize</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取栈的长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.num</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_all</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;输出栈元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> self.stack:</span><br><span class="line">            <span class="built_in">print</span> s</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append_stack</span>(<span class="params">self,value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;入栈&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.num &gt;= self.size:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;the stack is full&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.stack.append(value)</span><br><span class="line">            self.num += <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop_stack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 出栈&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;the stack is empty&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.stack.remove(self.stack[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li></ul><h3 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h3><h4 id="空间复杂度"><a class="markdownIt-Anchor" href="#空间复杂度"></a> 空间复杂度</h4><p>无论是顺序栈还是链栈，存储数据只需要一个大小为n的数组。在入栈和出栈过程中，只需要一两个临时变量存储空间，所以空间复杂度为<code>O(1)</code>。</p><blockquote><p>注：存储数据需要一个大小为n的数组，并不是指空间复杂度就为O(n)。因为，这 n 个空间是必须的，无法省掉。<br />我们说空间复杂度的时候，是指除了原本的数据存储空间外，算法运行还需要的额外的存储空间。</p></blockquote><h4 id="时间复杂度"><a class="markdownIt-Anchor" href="#时间复杂度"></a> 时间复杂度</h4><p>不管顺序栈还是链栈，入栈、出栈只涉及栈顶个别数据的操作，所以复杂度为<code>O(1)</code>。</p><h4 id="支持动态扩容的顺序栈的入栈-出栈时间复杂度分析"><a class="markdownIt-Anchor" href="#支持动态扩容的顺序栈的入栈-出栈时间复杂度分析"></a> 支持动态扩容的顺序栈的入栈、出栈时间复杂度分析</h4><p>对于出栈操作来说，不会涉及内存的重新申请和数据的搬移，所以出栈的时间复杂度仍然是 <code>O(1)</code>。但是，对于入栈操作来说，情况就不一样了。当栈中有空闲空间时，入栈操作的时间复杂度为 <code>O(1)</code>。但当空间不够时，就需要重新申请内存和数据搬移，所以时间复杂度就变成了 <code>O(n)</code>。</p><p>也就是说，对于入栈操作来说，最好情况时间复杂度是 <code>O(1)</code>，最坏情况时间复杂度是 <code>O(n)</code>。而平均时间复杂度，由摊还分析法分析可知为 <code>O(1)</code>。</p><h2 id="啊突然想起来栈还有一个应用"><a class="markdownIt-Anchor" href="#啊突然想起来栈还有一个应用"></a> 啊突然想起来栈还有一个应用</h2><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/2702547856525567.jpg" alt="" /></p><p>如果两个数非常非常大，甚至超过了long long，或者是超级超级大的数【雾】。我们可以用高精度算法或者你熟悉java的BigInteger。那么问题来了，高精度好难，java完全不熟悉咋办。没毛病老铁，高精度俺也不会写。不熟悉java？咱还有解！！！！如果说整型变量完全放不下。我们可以用栈来解决</p><ul><li>把非常大的变量看成一串数字</li><li>分别放到两个栈中</li><li>然后重栈中弹出数，进行加法操作</li><li>解决</li></ul><p>给出伪代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">addingLargeNumber（）</span><br><span class="line">读第一个数字，并将这个数对应的数存放到一个栈中</span><br><span class="line">读第二个数字，并将这个数对应的数存放到另一个栈中</span><br><span class="line">Carry=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(至少一个栈不为空)</span><br><span class="line">    从每个非空的栈中弹出一个数，并将这个数字与Carry相加</span><br><span class="line">    讲个位数的结果放入栈中;</span><br><span class="line">    将进位放进Carry中;</span><br><span class="line">如果进位不为<span class="number">0</span>；将其放入结果栈中;</span><br><span class="line">从结果栈中弹出结果并显示;</span><br></pre></td></tr></table></figure><p>私下画画流程图就很容易懂了</p><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/img1583054611615.jpeg" alt="" /></p><p>栈的内容大概就那摩一点点【雾】。具体代码实现就容许我先鸽了吧！！！嗯！就酱。</p>]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针学不会咋办</title>
      <link href="/posts/a23bcc6c/"/>
      <url>/posts/a23bcc6c/</url>
      
        <content type="html"><![CDATA[<h1 id="指针"><a class="markdownIt-Anchor" href="#指针"></a> 指针</h1><p>今天想复习指针并不是突然的新鞋来潮，主要是TM的链表太难，完全一脸懵逼的状态，搞的我只能被迫偷偷学一下指针啊，我太难了，指针真的对我来说就是降智打击！！！！</p><p><code>指针学不会还学啥玩意c语言and c++啊  - - -夹击妹抖</code></p><p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55e0mGVMcgeULTf0Z*5tkl4b907WaKM4zWHeva6DFQs.h*53Qu961lZiS8ctmCr0EIW34uf1MYYjTljS7tt7oOlg!/b&amp;bo=zQIAA80CAAMRCT4!&amp;rf=viewer_4" alt="" /></p><h2 id="数据-指令和内存"><a class="markdownIt-Anchor" href="#数据-指令和内存"></a> 数据、指令和内存</h2><p>在冯诺依曼体系中，程序的数据和指令，是存放在同一空间中的。在 Linux 中，它们存放在进程的虚拟内存空间中.因此，对于进程来说，数据和指令其实没有本质的差别；其区别仅在于如何理解和使用虚存空间中的内容——如果读取虚存空间某个位置的值来使用，这块内容就是数据，如果执行虚存空间某个位置的代码，这块内容就是指令。决定如何理解和使用虚存空间中的内容的因素，是类型。具体到 C 和 C++ 语言来说，对应数据的那部分内存，当中存储的自然就是数据；对应函数的那部分内存，当中存储的就是指令。</p><p>因此，对于虚存空间中的内容来说，有两个关键要素：</p><ul><li>它在哪里（内存地址是多少）；</li><li>它具有哪些属性、能做哪些事情（它的类型是什么）。</li><li>所以这一点来说指针有两种属性内容和位置</li></ul><h2 id="指针是对内存区域的抽象"><a class="markdownIt-Anchor" href="#指针是对内存区域的抽象"></a> 指针是对内存区域的抽象</h2><p>C 和 C++ 中的指针，是一种特殊的复合类型。指针变量中存放着目标对象的内存地址，而与指针相复合的类型，则说明了相应内存区域中的内容具有哪些属性，以及能做什么事情。也就是说，在内存空间某块区域中的内容，原本可以是不可解读的；但是，如果有一个描述这块内存区域的指针存在，我们就能找到它（地址的作用），并且<strong>合理地</strong>使用它（类型的作用）。因此，我们说：<strong>指针是对内存区域的抽象</strong>。这样解释我感觉应该不抽象了。</p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55YzPbP1X2ozNIs7OPbbuc28kvCBmNsWmWrutuOIVYZtCvx8FDdYWK1pNuLJrWZCTLVHzu0*zirJ3m1tX2Z3CoM4!/b&amp;bo=HAIcAhwCHAICGT0!&amp;rf=viewer_4" style="zoom:50%;" /><h2 id="定义和使用指针"><a class="markdownIt-Anchor" href="#定义和使用指针"></a> 定义和使用指针</h2><h3 id="指针的定义"><a class="markdownIt-Anchor" href="#指针的定义"></a> 指针的定义</h3><p>在 C 和 C++ 中定义指针变量是很简单的，和定义普通的变量基本是一样的。所有的区别，仅在于我们需要在变量名称前使用<strong>解引用符号 *</strong> 来标记这是一个指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *ip1, *ip2;         <span class="comment">// ip1 和 ip2 都是指向 int 类型变量的指针变量</span></span><br><span class="line"><span class="type">double</span> d, *dp;          <span class="comment">// d 是 double 类型变量，dp 是指向 double 类型变量的指针变量</span></span><br></pre></td></tr></table></figure><p>在上述定义中，我们看到，<code>ip1</code>, <code>ip2</code>, <code>dp</code> 是三个指针——因为在它们之前用 <code>*</code> 号标记处他们是指针；没错这样就变成了指针！！而 <code>d</code> 是一个普通的 <code>double</code> 类型变量。同时，我们注意到，<code>ip1</code> 和 <code>ip2</code> 在定义之时，就确定了他们是指向 <code>int</code> 类型的变量。这意味着，被 <code>ip1</code> 和 <code>ip2</code> 指向的内存，<strong>在使用 ip1 和 ip2 进行访问的时候</strong>，将被当做是 <code>int</code> 类型的对象来对待。同理，<code>dp</code> 指向的内存，<strong>在使用 dp 进行访问的时候</strong>，将被当做是 <code>double</code> 类型的对象来对待。</p><p><code>所以是确定是什么类型的指针非常重要</code>[括弧]</p><p>回顾一下，我们在几十秒前说道到，内存空间中的内容有两个关键要素：地址和类型。在上述定义过程中，我们通过类型与解引用符号 <code>*</code> 相结合，已经确定了类型。如果要正确使用指针，我们还应该让指针记录一个地址。【再次括弧】</p><h3 id="获取对象的地址"><a class="markdownIt-Anchor" href="#获取对象的地址"></a> 获取对象的地址</h3><p>上面说到，我们应该在定义指针之后，记录一个地址。在 C 和 C++ 中，我们需要使用<strong>取地址符号 &amp;</strong> 来获取对象的地址。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> val = <span class="number">42</span>;<span class="type">int</span> *p  = &amp;val;     <span class="comment">// &amp;val 返回变量 val 的地址，记录在指向 int 类型变量的指针里</span></span><br></pre></td></tr></table></figure><p>（绝大多数情况下，当然那剩下的绝小部分就是故意而为之了）指针的类型和对象的类型需要严格匹配。例如，你不能用一个指向 <code>int</code> 类型的指针变量，保存一个 <code>double</code> 类型的对象的地址。应该不会有人犯这样的错误吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> dval = <span class="number">0.0</span>;<span class="type">double</span> *pd1 = &amp;dval;    <span class="comment">// 正确：pd1 保存 double 类型变量 dval 的地址</span></span><br><span class="line"><span class="type">double</span> *pd2 = pd1;      <span class="comment">// 正确：pd1 是 double 类型的指针，可以赋值初始化同样类型的 pd2</span></span><br><span class="line"><span class="type">int</span> *pi1 = &amp;dval;       <span class="comment">// 错误：不能用指向 int 类型变量的指针保存 double 类型变量的地址</span></span><br><span class="line"><span class="type">int</span> *pi2 = pd1;         <span class="comment">// 错误：pd1 是 double 类型的指针，不能将其赋值给 int 类型的指针</span></span><br></pre></td></tr></table></figure><h3 id="访问指针指向的对象"><a class="markdownIt-Anchor" href="#访问指针指向的对象"></a> 访问指针指向的对象</h3><p>指针 <code>p</code> 记录了变量 <code>val</code> 的地址。因此，我们可以通过解引用指针 <code>p</code> 来访问变量 <code>val</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> val = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p  = &amp;val;         <span class="comment">// &amp;val 返回变量 val 的地址，记录在指向 int 类型变量的指针里</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;     <span class="comment">// 通过指针 p 访问变量 val，输出 val 的值：42</span></span><br><span class="line">*p = <span class="number">360</span>;               <span class="comment">// 通过指针 p 改变变量 val 的值，</span></span><br><span class="line">out &lt;&lt; *p &lt;&lt; endl;     <span class="comment">// 通过指针 p 访问变量 val，输出 val 的值：360</span></span><br><span class="line">cout &lt;&lt; val &lt;&lt; endl;    <span class="comment">// 输出 val 的值：360</span></span><br></pre></td></tr></table></figure><p>所以说指针烦就烦在太戏了，很容易把人绕进去，如果你忘了之前指针访问过val；那这里你就绝对要出错了耶！</p><h3 id="空指针和空类型的指针"><a class="markdownIt-Anchor" href="#空指针和空类型的指针"></a> 空指针和空类型的指针</h3><p>空指针是不指向任何对象的指针，在实际编程中，通常使用空指针作为指针变量有效性的判断标准。</p><p>C 语言和老版本 C++ 的空指针字面值是 <code>NULL</code>，它定义在 <code>stdlib</code> 当中；新版本(也只是c<ins>11而已)的 C</ins> 使用 <code>nullptr</code> 作为空指针字面值。话说我还一直在使用NULL,是的信息落后不爱学习的老爷爷昨天晚上还在用。C++ 还支持用字面值常量 <code>0</code> 初始化指针变量，被这样初始化的指针变量会是一个空指针。（这个我几乎都不怎么用）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p1 = <span class="literal">NULL</span>;         <span class="comment">// C 风格的空指针初始化</span></span><br><span class="line"><span class="type">int</span> *p2 = <span class="literal">nullptr</span>;      <span class="comment">// C++ 风格的空指针初始化</span></span><br><span class="line"><span class="type">int</span> *p3 = <span class="number">0</span>;            <span class="comment">// 使用字面值常量 0 初始化空指针</span></span><br></pre></td></tr></table></figure><p><code>注意nullptr和NULL以及0在作为条件判断时值都为false，它们两两之间进行等于（==）判断时值为true。</code></p><p>空类型的指针，指的是形如 <code>void *pv</code> 的指针。这是一类特殊的指针；这里的空类型，不是说没有类型，而是说空类型的指针，可以用于存储任意类型对象的地址。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">void</span> *pv = &amp;pi;     <span class="comment">// 使用 void * 存放了一个 double 类型对象的地址</span></span><br><span class="line"><span class="type">double</span> *pd = &amp;pi;</span><br><span class="line">pd = pv;            <span class="comment">// 错误：不能将空类型的指针赋值给其他类型的指针</span></span><br><span class="line">pv = pd;            <span class="comment">// 正确：空类型的指针可以接受任意类型的指针赋值</span></span><br><span class="line">pd = (<span class="type">double</span> *)pv;  <span class="comment">// 正确：C 风格的强制类型转换</span></span><br><span class="line">pd = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">double</span> *&gt;(pv); <span class="comment">// 正确：C++ 风格的强制类型转换</span></span><br></pre></td></tr></table></figure><p>让我们回顾一下指针的两个要素：<strong>地址和类型。</strong>：<strong>地址和类型。</strong>：<strong>地址和类型。</strong>：<strong>地址和类型。</strong>：**地址和类型。**重要的事情说三遍。由于空类型的指针可以接受任意类型对象的地址，所以，当编译器拿到一个空类型的指针的时候，它无法知道应该按照何种方式解释和使用指针中记录地址中的内容。因此，空类型指针能够做的事情非常有限：做指针之间的比较、作为函数的输入或输出、赋值给另外一个空类型指针。</p><p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55eb*is7HaJ0gxBRO.L8sFL3uALb8LIG2CcHSbp0Mna2RtEjmBK0rtMmQnWiOF6MdG4okNrC0.bFawSf5BNSIgHU!/b&amp;bo=9AH0AfQB9AECCS0!&amp;rf=viewer_4" alt="" /></p><h2 id="理解指针的定义"><a class="markdownIt-Anchor" href="#理解指针的定义"></a> 理解指针的定义</h2><h3 id="再探探探变量声明"><a class="markdownIt-Anchor" href="#再探探探变量声明"></a> 再探探探变量声明</h3><p>在 C 和 C++ 中，变量的声明包括一个基本数据类型（或者类类型），以及一组声明符。定义指针使用的解引用符号 <code>*</code> 是类型修饰符，它是声明符的一部分。因此，在下列语句中，<code>int</code> 是基本数据类型，<code>*p</code> 是声明符，<code>*</code> 是类型修饰符作为声明符的一部分存在。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p;</span><br></pre></td></tr></table></figure><p>在同一个变量定义语句中，基本数据类型只能有一个，但是可以有多个形式相同或不同的声明符。这也就是说，同一个语句可以定义出不同类型的变量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pi 是指向 int 型变量的指针；val 是 int 型变量</span></span><br><span class="line"><span class="type">int</span> *pi = <span class="literal">nullptr</span>,    val = <span class="number">1024</span>;</span><br></pre></td></tr></table></figure><p><code>就像这样</code></p><h3 id="理解稍微复杂的指针定义"><a class="markdownIt-Anchor" href="#理解稍微复杂的指针定义"></a> 理解稍微复杂的指针定义</h3><p>因为指针本身也是变量，所以它当然也是存储在虚存空间里的。因此，我们当然也可以定义一个指向这一指针的指针。比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> val  = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> *p   = &amp;val;</span><br><span class="line"><span class="type">int</span> **pp = &amp;p;</span><br></pre></td></tr></table></figure><p><code>**pp这里是不是看不懂</code>看不懂就对啦！！！！！</p><p>我们需要仔细理解一下 <code>pp</code> 的定义。理解这类稍微复杂的定义语句，一个基本的办法就是：从最靠近变量名字的地方开始，一层一层剖析变量的类型。就酱</p><ul><li>距离 <code>pp</code> 最近的是一个解引用符 <code>*</code>，这预示着 <code>pp</code> 是一个指针，它指向 <code>int *</code> 类型的变量；</li><li>再来看 <code>int *</code>，距离 <code>*pp</code> 最近的，依然是一个解引用符，这意味着 <code>*pp</code> 也是一个指针，它指向 <code>int</code> 类型的变量；</li><li>因此 <code>pp</code> 是一个<strong>指向指向 int 类型变量的指针的指针</strong>。</li></ul><blockquote><p>晕没晕！！！晕没晕！！！晕了就对啦！！你可以反复晕几遍</p></blockquote><p><img src="http://r.photo.store.qq.com/psc?/V13PUOHK44wDVX/U3..NSiujzLMR7a*2QgXbQGLAfSemDLGYIR1qg5jvSHhriXLm3RdEARtaRjvz*dKPJVKKVwre7AzLC9VgbVwDg!!/r&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=xgDGAMYAxgARGS4!&amp;tl=3&amp;vuin=2080702939&amp;tm=1582970400&amp;sce=60-0-0&amp;rf=viewer_4" alt="" /></p><h2 id="const-与指针"><a class="markdownIt-Anchor" href="#const-与指针"></a> <code>const</code> 与指针</h2><p>常量的值在生存期内不允许改变。这一特性经常是有用的：可以定义一个常量，然后在多个地方使用；当认为这个常量的值不合适的时候，修改它的定义，即可在所有使用到它的地方生效（而无需依次手工修改）；此外，还可以防止程序意外修改这个值。定义常量，只需要在基本类型前，加上 <code>const</code> 关键字即可；它是 constant 的缩写，意为常量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="number">3.141592653580793</span>;</span><br></pre></td></tr></table></figure><p>当 <code>const</code> 与指针牵扯到一起，就有些难搞了。至少有以下几种情况：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> val = <span class="number">0</span>;                <span class="comment">// int 型变量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> cnst = <span class="number">1</span>;         <span class="comment">// int 型常量</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *pi = &amp;val;                <span class="comment">// pi 本身是变量，通过 pi 访问的也是变量 </span></span><br><span class="line">                              <span class="comment">// 正确：将变量地址赋值给变量的指针                         </span></span><br><span class="line">pi = &amp;cnst;                  <span class="comment">// 错误：不允许将常量的地址赋值给变量的指针</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *pci = &amp;cnst;     <span class="comment">// pci 本身是变量，通过 pci 访问的是常量 (point to const)                                              // 正确：将常量地址赋值给常量的指针</span></span><br><span class="line">pci = &amp;val;               <span class="comment">// 正确：允许将变量地址赋值给常量的指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> cpi = &amp;val;      <span class="comment">// cpi 本身是常量，通过 cpi 访问的是变量</span></span><br><span class="line">                           <span class="comment">// 正确：允许将变量地址赋值给变量的指针</span></span><br><span class="line"><span class="type">int</span> fake = <span class="number">2</span>;             <span class="comment">// int 型变量</span></span><br><span class="line">cpi = &amp;fake;             <span class="comment">// 错误：cpi 本身是常量，不能在定义之外赋值</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> cpci = &amp;val;         <span class="comment">// cpci 本身是常量，通过 cpci 访问的也是常量                                                             // 正确：允许将变量地址赋值给常量的指针</span></span><br><span class="line">cpci = &amp;fake;                        <span class="comment">// 错误：cpci 本身是常量，不能在定义之外赋值</span></span><br><span class="line">cpci = &amp;cnst;                       <span class="comment">// 错误：cpci 本身是常量，不能在定义之外赋值，哪怕是常量的地址</span></span><br></pre></td></tr></table></figure><p>因为变量可以是常量，而指针本身也可以是常量。因此在变量和指针两个维度，都可以选择是否为常量。这样一来，就像上面代码展示的那样，当 <code>const</code> 与指针牵扯在一起的时候，就有 4 中可能性。为了区分这两个维度，我们引入<strong>顶层 const</strong> 和<strong>底层 const</strong> 的概念（具体可参考C++primer）：</p><ul><li>顶层 <code>const</code>：指针本身是常量。此时，指针在定义初始化之外，不能被赋值修改。称指针为指针常量。</li><li>底层 <code>const</code>：指针指向的变量是常量。此时，不能通过解引用指针的方式，修改变量的值。称指针为常量的指针。</li></ul><h2 id="喜闻乐见的指针与数组"><a class="markdownIt-Anchor" href="#喜闻乐见的指针与数组"></a> 喜闻乐见的指针与数组</h2><h3 id="数组的名字被当做指针使用"><a class="markdownIt-Anchor" href="#数组的名字被当做指针使用"></a> 数组的名字被当做指针使用</h3><p>在 C 和 C++ 中，指针与数组有非常紧密的联系。实际上，使用数组的时候，编译器通常都是在操作指针。这里我们从两个角度说明数组名在很多时候被当做是一个指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> nums[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p = &amp;(nums[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> (p == nums) </span><br><span class="line">&#123;   </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;true!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i != <span class="number">3</span>; ++i)</span><br><span class="line">&#123;    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你执行这一小段代码，那么，不出意外的话，程序会在终端上打印 <code>true!</code>，以及 <code>nums</code> 中的三个数字。这预示着，指针变量 <code>p</code> 保存的内容（也就是 <code>nums[0]</code> 的地址）和 <code>nums</code> 保存的内容是完全一样哒；同时，编译器以相同的方式去解释 <code>p</code> 和 <code>nums</code>。显然 <code>p</code> 是一个指向 <code>int</code> 型变量的指针，那么 <code>nums</code> 也就是一个指针了。emmmm这样说我觉得很清晰了。对吧！！！</p><p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55fhd8EOvA6Hp7AZUtVVxL.MeVm2PUtb09ODthfawaWIc3ug6UxzQaHbMS6z36WrxlccQJQ6YrpxC1sPoC*588OI!/b&amp;bo=LQHWAC0B1gACCS0!&amp;rf=viewer_4" alt="" /></p><p>C++11 标准引入了 <code>auto</code> 关键字，它能够在定义变量时，探测初始值的类型，并为新定义的变量设置合适的类型。我们看看 <code>auto</code> 关键字作用于数组名字的时候，会发生什么。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> nums[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> what = nums;</span><br><span class="line"><span class="type">int</span> val = <span class="number">42</span>;</span><br><span class="line">what = &amp;val;</span><br></pre></td></tr></table></figure><p>这份代码在 C++11 标准中，可以顺利通过。这说明 <code>what</code> 的类型，经由 <code>auto</code> 检测，是 <code>int *</code>。</p><p>以上，足以说明：当数组名字被当做是一个值来使用的时候，它就相当于是一个指针。</p><h3 id="但是但是也不是全部时候"><a class="markdownIt-Anchor" href="#但是但是也不是全部时候"></a> 但是！！但是！！也不是全部时候</h3><p>当然，也不是全部时候，数组名字都被当做是简单的指针。比如，在数组名字被传入 <code>sizeof()</code> 运算符的时候，它会被当做是一个真实的数组来看待。</p><h3 id="数组指针可以自增哒"><a class="markdownIt-Anchor" href="#数组指针可以自增哒"></a> 数组指针可以自增哒</h3><p>数组的指针，可以像 C++ 中 <code>std::vector</code> 的迭代器那样进行自增操作。这句话不是太严谨，因为，实际上是先有数组的指针，再有 <code>std::vector</code> 的迭代器；迭代器实际上是仿造数组的指针设计的功能。</p><p>之前提到，数组的指针，实际上是一个指向数组元素类型的对象的指针。数组的指针进行自增、自减运算，实际是将指针所指的位置，沿着数组向后或者向前移动一个元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> nums[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">size_t</span> len = <span class="built_in">sizeof</span>(nums) / <span class="built_in">sizeof</span>(nums[<span class="number">0</span>]);</span><br><span class="line"><span class="type">int</span> *iter;<span class="type">int</span> *end = nums + len;     <span class="comment">// end 是尾后指针</span></span><br><span class="line"><span class="keyword">for</span> (iter = nums; iter != end; ++iter) &#123;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *iter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这样的用法，就和 <code>std::vector</code> 的迭代器几乎没有差别了。</p><h3 id="数组指针可以进行加减运算"><a class="markdownIt-Anchor" href="#数组指针可以进行加减运算"></a> 数组指针可以进行加减运算</h3><p>数组的指针还可以进行加减运算。比如，在上述例子中 <code>iter += 2</code>，就是将 <code>iter</code> 指针沿着数组向后移动 2 个元素。这个我觉得大多数人都应该很清楚</p><p>两个指针如果指向同一个数组中的元素，那么它们可以做差。做差得到的结果是两个指针之间的距离，这个结果可以是负数（实际类型是 <code>ptrdiff_t</code>）。例如，在上述例子中在循环体末尾处，如果进行 <code>end - iter</code> 计算，则其结果表示当前尚未打印的元素的数量。学到了！！！</p><h3 id="数组下标与指针加减"><a class="markdownIt-Anchor" href="#数组下标与指针加减"></a> 数组下标与指针加减</h3><p>上面提到，数组指针可以进行加减运算：数组指针与整数的加减，实际是将指针沿着数组进行移动，得到的结果还是一个指针。既然结果是指针，那么就可以解引用，访问数组中的元素。因此有</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> nums[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">size_t</span> len = <span class="built_in">sizeof</span>(nums) / <span class="built_in">sizeof</span>(nums[<span class="number">0</span>]);</span><br><span class="line"><span class="type">int</span> *p = nums;</span><br><span class="line"><span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i != len; ++i)</span><br><span class="line">&#123;    </span><br><span class="line"><span class="keyword">if</span> (nums[i] == *(p + i))</span><br><span class="line">&#123;     </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;true!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不出意外的话，估计也没有意外这一小段代码会连续打印五行 <code>true!</code>。这提供了另一种访问数组内元素的方法；而事实上，在使用下标访问数组元素的时候，编译器都会转换成类似 <code>*(nums + i)</code> 的形式。也就是说，通过指针运算和解引用来访问数组元素，其实是更加本质的方式。</p><h2 id="函数与指针"><a class="markdownIt-Anchor" href="#函数与指针"></a> 函数与指针</h2><p>函数与指针，基本上是指针相关的话题中，最复杂的一个了。那没办法呢！！！不会就是不会，完全没商量了【雾】？？那咋办啊，我好方啊谁来帮帮我啊！</p><h3 id="让函数返回一个数组的指针"><a class="markdownIt-Anchor" href="#让函数返回一个数组的指针"></a> 让函数返回一个数组的指针</h3><p>我们知道，函数在返回的过程中，会对返回值进行拷贝。因此，一个无法拷贝的对象，是无法被函数返回的。数组是不能被拷贝的，所以函数无法直接返回数组。为了达到返回数组的目的，我们只能寄希望于让函数返回数组的指针（在 C++ 中还可以返回数组的引用）。</p><p>为此，我们需要了解，如何定义一个返回数组指针的函数。</p><p>首先，我们看一组数组的定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>];        <span class="comment">// arr 是一个数组，长度是 10，元素类型是 int 型</span></span><br><span class="line"><span class="type">int</span> *parr[<span class="number">10</span>];      <span class="comment">// parr 是一个数组，长度是 10，元素类型是 int *，也就是数组中存的是指针</span></span><br><span class="line"><span class="built_in">int</span> (*p)[<span class="number">10</span>] = &amp;arr; </span><br><span class="line">                    <span class="comment">// p 是一个指针，它指向一个长度是 10 元素类型是 int 型的数组</span></span><br></pre></td></tr></table></figure><p>okk这样一来，就不难构造返回数组的指针的函数定义了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *(<span class="built_in">func</span>(param_list))[<span class="number">10</span>];                    </span><br><span class="line">                           <span class="comment">// 错误：func 是一个函数，param_list 是它的参数                    </span></span><br><span class="line">                           <span class="comment">// 它尝试返回一个长度为 10，元素类型为 int * 的数组                    </span></span><br><span class="line">                           <span class="comment">// 而数组是无法返回的</span></span><br><span class="line"><span class="built_in">int</span> (*<span class="built_in">func</span>(param_list))[<span class="number">10</span>];                  </span><br><span class="line">                           <span class="comment">// 正确：func 是一个函数，param_list 是它的参数                  </span></span><br><span class="line">                           <span class="comment">// 它返回的是一个指针                    </span></span><br><span class="line">                           <span class="comment">// 这个指针指向了一个长度为 10 元素类型是 int 型的数组</span></span><br></pre></td></tr></table></figure><p>于是，我们得到了此类函数定义的一般形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">element_type</span> (*<span class="built_in">func</span>(param_list))[dimension]</span><br></pre></td></tr></table></figure><p><code>写到这迷迷糊糊的这里对于我来说比较吃力，至于我能不能懂这就是个概率事件了</code></p><p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55ez8*4iZ96YnEaoAxIAGJWvt.Q6tVx5.gTFCOpHI.opDFHAH1XjkLh7zGXKVdxVdB.KtmWiAZ9yi41uD*l*u0io!/b&amp;bo=BgMWBAYDFgQRCT4!&amp;rf=viewer_4" alt="" /></p><h3 id="函数的指针"><a class="markdownIt-Anchor" href="#函数的指针"></a> 函数的指针</h3><blockquote><p>终于水到这了</p></blockquote><p>之前提到，无论是数据（变量）还是指令（函数），都是存放在虚存空间的。因此，既然有变量的指针，那么也一定会有函数的指针。这就是我们这一小节需要讨论的函数指针；这会逐渐引出本文最复杂的话题。【害怕.jpg】</p><p>一个函数的类型，取决于它的输入和输出。这也就是说，一个函数的类型，应当包含它的返回值类型和参数列表。比如下面定义的函数，用于比较两个 <code>int</code> 型数据是否相等（这是一个仅用于示例而没有实际用处的函数）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEqual</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>对于一个函数来说，如果你能拿到它的定义，就很容易能取得它的类型：只需要去掉函数名字就可以了。因此，定义一个指向该类型的函数指针，并不困难。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bool isEqual(int, int);</span><br><span class="line">bool (*pfunc)(int, int) = &amp;isEqual;     // 定义了一个函数指针，指向 isEqual</span><br><span class="line">bool (*pfunc)(int, int) = isEqual;      // 一个等价定义</span><br></pre></td></tr></table></figure><p>在这里，<code>pfunc</code> 就是一个函数指针，它指向一个 <code>bool (int, int)</code> 类型的函数。也就是说，这类函数接收两个 <code>int</code> 型的参数，并返回一个 <code>bool</code> 类型的值。</p><p>值得一提的是，当函数名字作为值使用时，它会自动地转换成指针（有点像数组名字，不是吗）。因此，在函数指针的初始化或者复制的过程中，取值运算符是可选的。于是，上述两个定义语句是等价的。另一方面，函数指针作为函数调用使用时，它会自动转换成函数名（有点像数组指针，不是吗）。因此，这种情况下，解引用运算符是可选的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEqual</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="built_in">bool</span> (*pfunc)(<span class="type">int</span>, <span class="type">int</span>) = isEqual;</span><br><span class="line"><span class="type">bool</span> res1 = <span class="built_in">isEqual</span>(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">// 通过原函数名调用</span></span><br><span class="line"><span class="type">bool</span> res2 = (*pfunc)(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 一个等价调用：通过函数指针，解引用调用</span></span><br><span class="line"><span class="type">bool</span> res3 = <span class="built_in">pfunc</span>(<span class="number">1</span>, <span class="number">2</span>);    <span class="comment">// 另一个等价调用：函数指针自动转换成函数名</span></span><br></pre></td></tr></table></figure><p>值得一提的是，不同类型的函数的指针之间，不存在任何的类型转换：你不能期待一个接受两个 <code>int</code> 型参数并返回 <code>bool</code> 值的函数的指针，经过类型转换，就能接受三个 <code>int</code> 型的参数。因此，对于重载的同名函数，他们的函数类型是不一样的，因此函数指针也不能是同一个。</p><h3 id="将函数指针作为参数传入另一个函数"><a class="markdownIt-Anchor" href="#将函数指针作为参数传入另一个函数"></a> 将函数指针作为参数传入另一个函数</h3><p>在传参的过程中（除了 C++ 的传引用），也是伴随着拷贝的过程。因此，一个对象如果不能拷贝，那么它就不能作为参数传入函数。无疑，函数是不能拷贝的，因此你无法将函数作为参数直接传给另一个函数。但是，指针是可以拷贝的，因此，你可以将函数指针作为参数，传给另一个函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addIfEqual</span><span class="params">(<span class="type">int</span> lhs, <span class="type">int</span> rhs, <span class="type">bool</span> pfunc(<span class="type">int</span>, <span class="type">int</span>))</span></span>; </span><br><span class="line">                                  <span class="comment">// addIfEqual 的第三个参数是一个函数定义                           </span></span><br><span class="line">                                  <span class="comment">// 它会自动地转换成一个函数指针的参数</span></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">addIfEqual</span><span class="params">(<span class="type">int</span> lhs, <span class="type">int</span> rhs, <span class="type">bool</span> (*pfunc)(<span class="type">int</span>, <span class="type">int</span>))</span></span>;                           </span><br><span class="line">                                 <span class="comment">// 一个等价定义：显式地注明第三个参数是函数指针</span></span><br></pre></td></tr></table></figure><p>于是，你可以这样使用这个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">addIfEqual</span>(<span class="number">1</span>, <span class="number">1</span>, isEqual);</span><br></pre></td></tr></table></figure><p>此时，函数名 <code>isEqual</code> 作为引数被传入，它起到的是「值」的作用。因此，<code>isEqual</code> 被自动地转换成指向该函数的指针。</p><h3 id="让函数返回一个函数的指针"><a class="markdownIt-Anchor" href="#让函数返回一个函数的指针"></a> 让函数返回一个函数的指针</h3><p>同样地，与数组类似，虽然我们无法返回一个函数，但是我们可以返回一个函数指针。我们回到 <code>isEqual</code> 的函数指针的定义上来：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> (*pfunc)(<span class="type">int</span>, <span class="type">int</span>) = isEqual;</span><br></pre></td></tr></table></figure><p>在这里，<code>pfunc</code> 是一个指针，它指向了一个函数；该函数接收两个 <code>int</code> 型参数，并返回一个 <code>bool</code> 值。因此，仿造之前「返回数组指针的函数的定义形式」，我们不难得出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">outer_return_type</span> (*<span class="built_in">func</span>(param_list))(outer_param_list)</span><br></pre></td></tr></table></figure><p>这里，<code>func(param_list)</code> 是当前需要定义的函数；<code>outer_return_type</code> 和 <code>outer_param_list</code> 分别是当前定义的函数返回的函数指针对应函数的返回值类型和参数列表。</p><p><code>很难对吧，我也是这样感觉的</code></p><p><strong>别急还没完</strong></p><h2 id="登峰造极的-void0"><a class="markdownIt-Anchor" href="#登峰造极的-void0"></a> 登峰造极的 <code>(*(void(*)())0)();</code></h2><p>这恐怕是一个会令所有 C/C++ 程序员战栗不已的函数调用语句。因此，在解释这个语句之前，我愿意先给出它的含义，安抚各位战栗的心灵。它表示：<strong>访问内存地址 0，将它作为一个参数列表和返回类型均为空的函数，并执行函数调用</strong>。（这是一个特殊场景下的函数调用，不用纠结为什么会调用 <code>0</code> 位置上的函数）</p><h3 id="类型定义与-c-风格的类型强制转换符"><a class="markdownIt-Anchor" href="#类型定义与-c-风格的类型强制转换符"></a> 类型定义与 C 风格的类型强制转换符</h3><p>C 风格的类型强制转换符应该不是个稀罕玩意儿。比如 <code>(double)a</code> 就能将变量 <code>a</code> 强制转换为 <code>double</code> 类型。在这个简单的例子里，我们希望能够找到一些朴素的规律，破解这一登峰造极而又令人战栗的函数调用语句。</p><p>同样以 <code>double</code> 类型及相关指针类型为例，我们首先看下面的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> a;       <span class="comment">// 定义了一个 double 型的变量</span></span><br><span class="line"><span class="type">double</span> *b;      <span class="comment">// 定义了一个 double * 型的变量（double 型的指针）</span></span><br><span class="line">(<span class="type">double</span>) c;     <span class="comment">// 将变量 c 强制转换为 double 类型</span></span><br><span class="line">(<span class="type">double</span> *) d;   <span class="comment">// 将变量 d 强制转换为 double * 类型</span></span><br></pre></td></tr></table></figure><p>我们不难发现，类型转换和对应类型的变量定义，有着千丝万缕的联系：首先去掉变量定义语句末尾的分号，然后去掉变量定义语句中的变量名，最后给剩余的部分加上括号——一个 C 风格的类型强制转换符，就得到了。</p><h3 id="真相只有一个"><a class="markdownIt-Anchor" href="#真相只有一个"></a> 真相只有一个</h3><p>我们知道 <code>void(*pfunc)();</code> 定义了一个函数指针 <code>pfunc</code>，它指向的函数参数列表为空、返回值类型也为空。因此，<code>(void(*)())</code> 就是一个 C 风格的类型转换符。</p><p>因此，<code>(void(*)())0</code> 会将 <code>0</code> 转换成一个函数指针，然后交给 <code>*</code> 解引用，最后传入参数（空的参数列表 <code>()</code>），执行函数调用。</p><blockquote><p>在 C++ 中，这个函数调用应该写作</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*<span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">void</span>(*)()&gt;(<span class="number">0</span>))();</span><br></pre></td></tr></table></figure><blockquote><p>听说这个写法，相较 C 风格的类型强制转换符，要清晰明朗得多。因此，请不要再吐槽 C++ 风格的强制转换是「语法盐」了。[明明是语法炸弹]</p></blockquote><h1 id="好难啊好难"><a class="markdownIt-Anchor" href="#好难啊好难"></a> 好难啊好难</h1><p>虽然很难，但是没办法游戏难度是固定的，指针这块对于一些基础不到位的人士来说【比如我】是世纪性难题，就好比你刚刚熟悉基础操作，上来就直接勇闯魔王窟了。还是需要大量的练习和更加深刻的理解。</p><p>哎，还是应了著名人士xxx的那句话</p><p><em><strong>speak is simple,give me your code.</strong></em></p><p>所以说我家飞鸟她不香吗？？？？？？还写啥子代码哟</p><p>我好了！！！！</p><p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55amsiJHK8si1qdm9hjNeLdXumRifU0rSfIw3Lb5yWmsQBoMhswbe33T*KhF57iqg88vrc.7u3gibZ4IedyucCUM!/b&amp;bo=7ADCAOwAwgACaU0!&amp;rf=viewer_4" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法复杂度分析</title>
      <link href="/posts/f3215fef/"/>
      <url>/posts/f3215fef/</url>
      
        <content type="html"><![CDATA[<h1 id="算法复杂度分析"><a class="markdownIt-Anchor" href="#算法复杂度分析"></a> 算法复杂度分析</h1><p>之前写过一篇文章“不要陷入技术的魔咒”，然而最近又迷上了写拓展，我TM！！！管不住自己，之前我哥推荐了很好的git管理工具，很多东西都用那个托管了，真的很少在写博客了，直话直说我c++这还是学的非常差的，当然后面也没有好好学过，自从开始写一些脚本开始，我更加意识到了自己的软肋，虽然我浑身都是软肋，陈sir，每次气的每次都说我该回炉重造。的确我非常有必要回炉重造了，客观来看我底子的确是弱得很，以后尽量希望明确学习方向，不在对一些<code>应用场景少</code>、<code>难以产生效益</code>、<code>无法应用到实际项目</code>、<code>瞎折腾</code>的技术进行钻研。重最简单的开始学习吧，之前，这个博客是我建的第一个博客，之前也想换换托管方式，打算在阿里云上托管的，但转念一想。又觉得不是很有必要，之前也试过阿里云oss。不过我感觉git+github pages+hexo这个已经完全够用了。也懒得再折腾。</p><p>其次c++已经鸽了有大半年了，所以有必要重hello world，重新开始学的必要，我感觉，</p><h2 id="算法复杂度以及渐进复杂度"><a class="markdownIt-Anchor" href="#算法复杂度以及渐进复杂度"></a> 算法复杂度以及渐进复杂度</h2><p>一个问题往往可以以效率不同的算法来解决，当然在数据较少的时候，各种算法之间的差异也许微不足道，但当数据量成倍增加时，你就会发现不同算法之间的差异非常非常明显，如果你关注LeetCode你会发现不同的算法在占用和时间上会有非常明显的差别，比如一道题，你用双指针可能只需要4ms，其他的算法可能是他的一百多倍。为了比较算法的效率，两个名字很复杂的老外，引入了一种称为计算复杂度的标准来衡量算法。计算复杂度表示一种算法需要付出多大的成本和努力，当然成本在很多不同的地方有自己的衡量标准，我们常说的衡量效率就是时间和空间，当然远远不止这两种，其他，其他我也不知道啊！！！当然时间因数往往比空间因素重要的多，我们往往关注的是数据处理的时间，而不是空间，毕竟现在在技术层面，数据储存完全不是人们担心的地方，而时间和效率往往决定这一个程序的好坏。印度是全世界最大的代码输出国，微软ceo也是印度人，印度人写代码哪管那么多啊，所以是现在硬件的发展完全可以弥补算法层面的不住，当然这只是在某些领域，在一些非常需要算法效率的领域，你，如果，不会写算法还是删库趁早跑路吧，我觉得你进公司面试可能面试官就直接吧你pass了</p><p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55akpazV0T4KqJQRtmSHhH8GKljwflH.rvVq5CEi1vph4hE7vGd5q4Tr0mWsQJv5Rl8BZx9fEb.xJdyhfTGppUDg!/b&amp;bo=cgErAXIBKwERCT4!&amp;rf=viewer_4" alt="" /></p><h3 id="评估算法效率"><a class="markdownIt-Anchor" href="#评估算法效率"></a> 评估算法效率</h3><p>算法效率的评估并不能以时间来评估，而是采用某种逻辑关系，用文件和数组的尺度n同时间t之间的关系，我们该如何表示不同的t和n之间的关系呢，</p><p>假如t和n之间是线性关系</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mn>2</mn><mo>=</mo><mn>5</mn><mi>n</mi><mn>1</mn><mtext>则必有</mtext><mi>t</mi><mn>2</mn><mo>=</mo><mn>5</mn><mi>t</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">n2=5n1则必有t2=5t1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord mathnormal">n</span><span class="mord">1</span><span class="mord cjk_fallback">则</span><span class="mord cjk_fallback">必</span><span class="mord cjk_fallback">有</span><span class="mord mathnormal">t</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord mathnormal">t</span><span class="mord">1</span></span></span></span></span></p><p>同样</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: Can&#039;t use function &#039;$&#039; in math mode at position 32: …g2(2n)则t1=t2+1$̲$ {log2}当然通常情况…'>t1=log2(n)，t2=log2(2n)则t1=t2+1$$ {log2}当然通常情况下。，这些n与t之间的关系复杂的多的多。当数据量非常巨大的时候，计算这些函数才变得比较重要，不会实质上改变函数数量级的应该从函数中剔除，emmmmm就相当于数学的极限思想。比如说f（n）=n+10000，在n足够大时我们就没有必要考虑常数项。## 大O表示法这大概是最长用来表示渐进复杂度（评估函数的增长率）的表示方法了，是Paul Bachmann引入的具体我就不说了详情请看百科[请点我！！！！](https://baike.baidu.com/item/大O表示法/1851162?fr=aladdin)## 常见的时间复杂度量级我们先从常见的时间复杂度量级进行大O的理解：- 常数阶O(1)- 线性阶O(n)- 平方阶O(n²)- 对数阶O(logn)- 线性对数阶O(nlogn)![](C:\Users\Administrator.USER-20181115IF\Desktop\b&amp;bo=bwNwAm8DcAIRCT4!&amp;rf=viewer_4)### O(1)![](http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55aKetXJx4AS93ajzRKFTHJhI3psuRi3P2h0bUOiDmn2n*47302gYOXxReWb7HbXD0ZHP7hGQ2mWcuMH1UcSxSLw!/b&amp;bo=tgMTArYDEwICCS0!&amp;rf=viewer_4)[^]: 图片转载至掘金无论代码执行了多少行，其他区域不会影响到操作，这个代码的时间复杂度都是O(1)<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapTwoInts</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> temp = a;</span><br><span class="line">  a = b;</span><br><span class="line">  b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>### O(n)![](http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55cUDXjmkugsoYy7opoXUiCvLNRMvYGKmzn6CAQkKpXsRsHKsHMDKh9xhB.2TynbNmTOKZTW.FgHzh7gugVjXLh8!/b&amp;bo=tgMTArYDEwICCS0!&amp;rf=viewer_4)在下面这段代码，for循环里面的代码会执行 n 遍，因此它消耗的时间是随着 n 的变化而变化的，因此可以用O(n)来表示它的时间复杂度。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span> <span class="params">( <span class="type">int</span> n )</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span> ; i &lt;= n ; i ++)&#123;</span><br><span class="line">      ret += i;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>特别一提的是 c * O(n) 中的 c 可能小于 1 ，比如下面这段代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span> <span class="params">( string &amp;s )</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n/<span class="number">2</span> ; i++)&#123;</span><br><span class="line">      <span class="built_in">swap</span> ( s[i] , s[n<span class="number">-1</span>-i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>### O(n²)![](https://user-gold-cdn.xitu.io/2018/12/13/167a509fc3d8fd52?imageslim) 当存在双重循环的时候，即把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²) 了。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectionSort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n ; i++)&#123;</span><br><span class="line">     <span class="type">int</span> minIndex = i;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n ; j++ )</span><br><span class="line">       <span class="keyword">if</span> (arr[j] &lt; arr[minIndex])</span><br><span class="line">           minIndex = j;</span><br><span class="line">       </span><br><span class="line">     <span class="built_in">swap</span> ( arr[i], arr[minIndex]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>这里简单的推导一下- 当 i = 0 时，第二重循环需要运行 (n - 1)  次- 当 i = 1 时，第二重循环需要运行 (n - 2)  次- 。。。。。。不难得到公式：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(n - <span class="number">1</span>) + (n - <span class="number">2</span>) + (n - <span class="number">3</span>) + ... + <span class="number">0</span></span><br><span class="line">= (<span class="number">0</span> + n - <span class="number">1</span>) * n / <span class="number">2</span></span><br><span class="line">= <span class="built_in">O</span> (n ^<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>当然并不是所有的双重循环都是 O(n²)，比如下面这段输出 30n 次 `youmingsama：）`的代码。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void printInformation (int n )&#123;</span><br><span class="line">   for (int i = 1 ; i &lt;= n ; i++)</span><br><span class="line">        for (int j = 1 ; j &lt;= 30 ; j ++)</span><br><span class="line">           cout&lt;&lt; &quot;youmingsama：）&quot;&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>### O(logn)![](http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55SAtAYyoKoFH9LThDmv5KBqEilX7kZS5*YENt9eb53UUj1tsZjOiqyATMn2d7fz6GmBNZqXgsYxamz8WIaLU6og!/b&amp;bo=vQMcAr0DHAICGT0!&amp;rf=viewer_4)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">( <span class="type">int</span> arr[], <span class="type">int</span> n , <span class="type">int</span> target)</span>&#123;</span><br><span class="line">  <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> ( l &lt;= r) &#123;</span><br><span class="line">    <span class="type">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &gt; target ) r = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>在二分查找法的代码中，通过while循环，成 2 倍数的缩减搜索范围，也就是说需要经过 log2^n 次即可跳出循环。同样的还有下面两段代码也是 O(logn) 级别的时间复杂度。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 整形转成字符串</span></span><br><span class="line">  <span class="built_in">string</span> <span class="title function_">intToString</span> <span class="params">( <span class="type">int</span> num )</span>&#123;</span><br><span class="line">   <span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="comment">// n 经过几次“除以10”的操作后，等于0</span></span><br><span class="line">   <span class="keyword">while</span> (num )&#123;</span><br><span class="line">    s += <span class="string">&#x27;0&#x27;</span> + num%<span class="number">10</span>;</span><br><span class="line">    num /= <span class="number">10</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   reverse(s)</span><br><span class="line">   <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello</span> <span class="params">(<span class="type">int</span> n )</span> &#123;</span><br><span class="line">   <span class="comment">// n 除以几次 2 到 1</span></span><br><span class="line">   <span class="keyword">for</span> ( <span class="type">int</span> sz = <span class="number">1</span>; sz &lt; n ; sz += sz) </span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;youmingsama：）&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>### O(nlogn)将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂度就是 n * O(logn)，也就是了O(nlogn)。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">hello</span> <span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>( m = <span class="number">1</span> ; m &lt; n ; m++)&#123;</span><br><span class="line">    i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>( i &lt; n )&#123;</span><br><span class="line">        i = i * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>## 最好，平均和最坏情况### 先举个栗子分析以下这段代码的时间复杂度<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n 表示数组 array 的长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span>[] <span class="built_in">array</span>, <span class="type">int</span> n, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span>[i] == x) pos = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>#### 分析- 功能：在一个无序数组array中，查找变量x出现的位置- 时间复杂度：`O(n)`, n表示数组的长度更为优化的方式<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n 表示数组 array 的长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span>[] <span class="built_in">array</span>, <span class="type">int</span> n, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span>[i] == x) &#123;</span><br><span class="line">        pos = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>&gt; 时间复杂度： 不一定是O(n)了，不同情况下这段代码的时间复杂度是不同的。### 引入概念- 最好情况时间复杂度：在最理想情况下，执行代码的时间复杂度- 最坏情况时间复杂度：在最糟糕情况下，执行代码的时间复杂度- 平均情况时间复杂度：最好情况和最坏情况都是属于极端情况，发生的概率并不大。需要表示平均情况下的复杂度### 如何分析平均情况时间复杂度以上面的例子为例：查找x在数组中的位置，有`n+1`种情况，在数组`0~n-1`的位置上和不在数组中。将每种情况下，查找需要遍历的元素个数相加，再除以n+1种情况，就可得到需要遍历的元素个数的平均值`(1+2+3+...+n+n)/n+1 = n (n+3) /2(n+1)`省略掉系数、低阶、常量后得到平均时间复杂度为`O(n)`#### 存在问题在以上的n+1种情况中，未考虑x在每种情况下出现的概率。现在假设，x在数组中与x不在数组中的概率各为`1/2`；要查找的x出现在`0~n-1`这n个位置的可能性是相同的，即`1/n`；那么，要查找的x出现在`0~n-1`中任意位置的概率为 `1/2*1/n = 1/(2n)`将每种情况发生的概率考虑进去后，平均时间复杂度计算过程变成：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1+2+3+...+n+n)*(1/(2n))</span><br></pre></td></tr></table></figure>作期望值。因而平均时间复杂度的全称为**加权平均时间复杂度**或**期望时间复杂度**。&gt; 注：很多时候，我们只使用一个复杂度就可以满足要求。只有同一块代码在不同情况下，时间复杂度有量级的差距，才会使用以上3种复杂度的表示法来区分。### 均摊时间复杂度、摊还分析（摊销分析）举栗子说明：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// array 表示一个长度为 n 的数组</span></span><br><span class="line"><span class="comment">// 代码中的 array.length 就等于 n</span></span><br><span class="line"><span class="type">int</span>[] array = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count == array.length) &#123;</span><br><span class="line">       <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">          sum = sum + array[i];</span><br><span class="line">       &#125;</span><br><span class="line">       array[<span class="number">0</span>] = sum;</span><br><span class="line">       count = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    array[count] = val;</span><br><span class="line">    ++count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>#### 分析- 功能：实现了往数组中插入数据的功能。- 具体：  1 . 当数组满了`count == array.length`,就用for循环遍历求和，将求得的和放在数组的第一个位置，并清空数组其余元素；然后再插入新的元素。  2 . 当数组一开始就有空闲，则直接将数据插入数组。- 复杂度分析：  1 . 最好情况：数组中有空闲，直接将数据插入到`count`的位置，为`O(1)`  2 . 最坏情况：数组没有空闲空间，需要先做一个遍历求和，再作插入。所以复杂度为`O(n)`  3 . 平均时间复杂度：`O(1)`##### 平均时间复杂度如何得到总共`n+1`种情况，前`n`中情况每种时间复杂度都为`O(1)`，后一种情况时间复杂度为`O(n)`；`n+1`种情况发生的概率一样，为`1/(n+1)`；根据加权平均计算方法：&gt; <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>*<span class="number">1</span>/(n+<span class="number">1</span>) + <span class="number">1</span>*<span class="number">1</span>/(n+<span class="number">1</span>) + ... + n*<span class="number">1</span>/(n+<span class="number">1</span>) = <span class="built_in">O</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>#### 摊销时间复杂度（amortized time complexity）分析发现:1 . `insert()`函数在**大部分情况**下，时间复杂度都为`O(1)`；**极个别情况**下，复杂度才高，为`O(n)`2 . `insert()`函数中，`O(1)`时间复杂度的插入和`O(n)`时间复杂度的插入，**出现频率很有规律**。存在前后时序关系，一般一个`O(n)`插入之后，紧跟着`n-1`个`O(1)`的插入操作，循环往复。##### 针对这种场景，引入均摊分析法大致思路：每一次 `O(n)` 的插入操作，都会跟着 `n-1` 次 `O(1)` 的插入操作，所以把耗时多的那次操作均摊到接下来的 `n-1` 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 `O(1)`。#### 总结对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，**在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度**。&gt; 均摊时间复杂度就是一种特殊的平均时间复杂度，没必要花太多精力去区分它们。## NP完整性决定性算法，，，，，，emmmmmmm这个好难，看不太懂，暂时就鸽了吧。就酱![](http://m.qpic.cn/psc?/V13PUOHK0NDZXM/4pNOqgOvBLvj4yTC9qc55fBIxyAZSXpIVMg.7WexfLdGNmW.mlaAcPX7syv*IA5cDPQiD.SX5XbpJ4wbz98KbX5FY5Kp7p0ZtX0VTT5LE1E!/b&amp;bo=LAHUACwB1AACCS0!&amp;rf=viewer_4)</p>]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/posts/2362a8ea/"/>
      <url>/posts/2362a8ea/</url>
      
        <content type="html"><![CDATA[<h1 id="链表"><a class="markdownIt-Anchor" href="#链表"></a> 链表</h1><p>今天开始学链表了，我觉得学链表前很有必要先看看数组</p><h2 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h2><p>不得不承认数组的确是日常使用中最常用的手段之一，但是啊，<strong>数组</strong>的使用是有局限的<code>(1)</code>在编译期就要做到大小，不然是不行哒。<code>2</code>数组中的数据在内存中是以相同的距离隔开的，这就意味着我们要想在数组中插入数据变的非常困难。如果我们偏要插入数据的话则需要去移动改数组的其他数据。这样感觉非常不妙而且让人感觉非常烦躁。</p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55f1G0fAPaC8nzrPkV9tqVcbUvGW7wGK7AWw4s48zu1olEHAbZPfjlvYw9BV66I8WsWSE.KMiQCj3lCiwvkTO8No!/b&amp;bo=rAJOAqwCTgIRGS4!&amp;rf=viewer_4" alt="img" style="zoom: 67%;" /><h3 id="数组定义"><a class="markdownIt-Anchor" href="#数组定义"></a> 数组定义</h3><p>一组<code>线性表</code>数据结构。它用一组<code>连续的内存空间</code>，来存储一组具有<code>相同类型的数据</code>。</p><h4 id="关键词解释"><a class="markdownIt-Anchor" href="#关键词解释"></a> 关键词解释</h4><ul><li><strong>线性表</strong>：每个线性表上的数据最多只有前和后两个方向。<br />除了<code>数组</code>，<code>链表</code>、<code>队列</code>、<code>栈</code>都是线性表结构，然而线性表有分为顺序表和链表，顺序表可以简单的理解为数组这个概念。</li></ul><p>联想到<strong>非线性表</strong>：数据之间并不是简单的前后关系。<br />如，<code>二叉树</code>、<code>堆</code>、<code>图</code>等</p><ul><li><strong>连续的内存空间和相同类型的数据</strong><br />正因为有了这两个限制，才使得数组有了<code>随机访问</code>的特性；<br />也正是因为这两个限制，使得<code>数组的删除、插入操作效率很低</code>。</li></ul><h3 id="如何实现根据下标随机访问数组元素"><a class="markdownIt-Anchor" href="#如何实现根据下标随机访问数组元素"></a> 如何实现根据下标随机访问数组元素？</h3><p>计算机会给每个内存单元分配一个地址，再通过地址来访问内存中的数据。<br />而计算机通过寻址公式来计算元素存储的内存地址：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a[i]的地址就是从首地址偏移i*data_type_size的位置</span></span><br><span class="line">a[i] = base_address + i * data_type_size</span><br></pre></td></tr></table></figure><blockquote><p>base_address: 内存块的首地址<br />data_type_size：数中每个元素的大小；根据存储的数据类型而定，如int型，该值为4</p></blockquote><h3 id="为什么数组要从0开始编号而不是从1开始呢"><a class="markdownIt-Anchor" href="#为什么数组要从0开始编号而不是从1开始呢"></a> 为什么数组要从0开始编号，而不是从1开始呢？</h3><p>若数组从1开始计数，那么上面的公式就变成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[i] = base_address + (i<span class="number">-1</span>) * data_type_size</span><br></pre></td></tr></table></figure><blockquote><p>修改后，每次随机访问数组元素都多了一次减法运算，对于CPU就多了一次减法指令。</p></blockquote><h3 id="两个操作"><a class="markdownIt-Anchor" href="#两个操作"></a> 两个操作</h3><h4 id="数组的插入操作"><a class="markdownIt-Anchor" href="#数组的插入操作"></a> 数组的插入操作</h4><ul><li>效率低的原因：将某个数据插入到数组中的第<code>i</code>个位置。为了给新来的元素腾出这个位置，需要移动后面的<code>i~n</code>个元素，复杂度为<code>O(n)</code>;</li><li>改进方法：当数组是无序的，简单的方法就是将原来第<code>i</code>个位置上的元素放到数组最后，然后将新来的元素放到第<code>i</code>个位置。复杂度为<code>O(1)</code>;</li></ul><h4 id="数组的删除操作"><a class="markdownIt-Anchor" href="#数组的删除操作"></a> 数组的删除操作</h4><p>与插入操作类似，若删除第<code>i</code>个位置的元素，需要搬移后面的<code>i~n</code>个元素，才能保证内存的连续性。</p><ul><li>复杂度：若删除开头元素，最坏复杂度为<code>O(n)</code>；若删除数组末尾元素，最好复杂度为<code>O(1)</code>；平均复杂度为<code>O(n)</code>。</li><li>改进方法：<strong>不要求数组中数据的连续性</strong>，就可将多次删除操作集中在一起执行。<br />每次删除元素时，并不真正搬移元素，而是记录下数据已被删除。当数组没有更多空间存储数据时，再执行一次真正的删除操作（做数据元素的搬移工作）</li></ul><h3 id="数组的访问越界问题"><a class="markdownIt-Anchor" href="#数组的访问越界问题"></a> 数组的访问越界问题</h3><p>分析以下一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(; i&lt;=<span class="number">3</span>; i++)&#123;</span><br><span class="line">        arr[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h4><p>不是只打印三行“hello world”；而是无限打印</p><h4 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因</h4><p>数组大小为3，<code>a[0]，a[1]，a[2]</code>，而我们的代码 for 循环的结束条件错写为了<code>i&lt;=3</code> 而非 <code>i&lt;3</code>，所以当 <code>i=3</code> 时，数组 <code>a[3]</code> 访问越界。<br />根据我们前面讲的数组寻址公式，<code>a[3]</code> 也会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量 <code>i</code> 的内存地址，那么 <code>a[3]=0</code> 就相当于 <code>i=0</code>，所以就会导致代码无限循环。</p><blockquote><p>注：例子中死循环的问题跟编译器分配内存和字节对齐有关。数组3个元素，加上一个变量i。4个整数刚好能满足8字节对齐，所以i的地址恰好跟在a[2]后面，导致死循环。如果数组本身有4个元素，则这里不会出现死循环。因为编译器64位操作系统下，默认会进行8字节对齐，变量i的地址就不会紧跟在数组后面了。</p></blockquote><h3 id="key"><a class="markdownIt-Anchor" href="#key"></a> Key</h3><p>1 . 常会问的一个面试题：数组和链表的区别？<br />正确表述：链表适合插入、删除操作，时间复杂度为<code>O(1)</code>；数组适合随机访问数组元素(而不应该说查找)，根据下标随机访问的时间复杂度为<code>O(1)</code>。<br />明确的点：数组是适合查找，但查找的时间复杂度不为<code>O(1)</code>。即便是<strong>排好序的数组，用二分查找，时间复杂度也是O(nlogn)</strong>。</p><p>2 . 数组越界在 C 语言中是一种未决行为，并没有规定数组访问越界时编译器应该如何处理。因为，访问数组的本质就是访问一段连续内存，只要数组通过偏移计算得到的内存地址是可用的，那么程序就可能不会报任何错误。<br />在这种情况下，一般都会出现莫名其妙的逻辑错误，就像上面举的那个例子，debug的难度非常的大。而且，很多计算机病毒也正是利用到了代码中的数组越界可以访问非法地址的漏洞，来攻击系统，所以写代码的时候一定要警惕数组越界。</p><p>3 . 二维、多维数组如何寻址？<br />行优先</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[d1][d2][d3];</span><br><span class="line"><span class="type">int</span> *p0 = &amp;a[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> *p = &amp;a[i][j][k];</span><br><span class="line"><span class="type">int</span> idx = i * (d2*d3) + j * d3 + k</span><br><span class="line"><span class="built_in">ASSERT</span>( p0 + idx == p);</span><br></pre></td></tr></table></figure><h2 id="但是我们亲爱的链表就不存在这样的问题"><a class="markdownIt-Anchor" href="#但是我们亲爱的链表就不存在这样的问题"></a> 但是我们亲爱的链表就不存在这样的问题</h2><p>链表是节点的集合，节点中储存着数据并可以链接到其他节点，是不是很方便，也就是是通过这种方式我们可以链接到内存中的任何一个位置，不好意思<code>链表真的可以为所欲为</code>；每个节点都存储着链表其他地方的节点，因此我们非常容易的从一个节点到另一个节点，但是最灵活的还是指针，<code>抱歉指针真的真的可以为所欲为</code></p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55ZHPKsirZkeJWNT6OAl66vYPz.*9P21qYu8.UTbtiqaUzTZLVewn7vnNCZUh7wX6Lafx6bJe*2XQ7BZ.PXshERw!/b&amp;bo=JQJOAiUCTgIRGS4!&amp;rf=viewer_4" style="zoom:50%;" /><h2 id="如何用链表实现lru缓存淘汰算法"><a class="markdownIt-Anchor" href="#如何用链表实现lru缓存淘汰算法"></a> 如何用链表实现LRU缓存淘汰算法？</h2><h3 id="缓存"><a class="markdownIt-Anchor" href="#缓存"></a> 缓存</h3><ul><li>缓存定义：一种高效数据读取性能的技术，比如常见的<strong>CPU缓存</strong>、<strong>数据库缓存</strong>、<strong>浏览器缓存</strong>等。缓存在计算机软件、硬件开发中应用都很广。</li><li>缓存特点：大小有限，被用满时，需要清理一部分数据，而哪些数据应该被清理哪些应该被保留，由<code>缓存淘汰策略</code>决定。</li></ul><h3 id="缓存淘汰策略"><a class="markdownIt-Anchor" href="#缓存淘汰策略"></a> 缓存淘汰策略</h3><p>常见的缓存淘汰策略有：<code>FIFO（First in,First out）先进先出策略</code>、<code>LFU（Least Frequently Used）最少使用策略</code>、<code>LRU（Least Recently Used）最近最少使用策略</code>。</p><h3 id="三种链表"><a class="markdownIt-Anchor" href="#三种链表"></a> 三种链表</h3><p>链表通过指针将一组零散的内存块串联在一起。其中内存块叫做链表的<strong>结点</strong>，记录结点地址的叫做<strong>指针</strong>。链表的第一个结点叫头结点，最后一个结点叫尾结点。</p><h4 id="单项链表"><a class="markdownIt-Anchor" href="#单项链表"></a> 单项链表</h4><p>如果链表中只含有指向后继节点的链接这样的就被叫做单链表大概</p><p>单链表的“尾结点”，它的指针并不指向下一个结点，而是指向一个空地址<code>NULL</code></p><p>懒得废话直接扔动图，动态图来自<code>visualgo</code></p><h5 id="搜索ps谷歌拓展截下来的gif图凑合看吧"><a class="markdownIt-Anchor" href="#搜索ps谷歌拓展截下来的gif图凑合看吧"></a> 搜索（ps谷歌拓展截下来的gif图凑合看吧）</h5><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55f4j0aPQ6fwuu2YBYnY6TtCaj6ZfsUK6.JCOHcBTh3Mb.HWu.tm96Uyw7vtQEFKK4gwuNAN07QhODHdA8o51JzA!/b&amp;bo=9AHRAPQB0QACCS0!&amp;rf=viewer_4"  /><h5 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h5><p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55cxuPHcgX7i8gLoawSImh4LRkqBDpYyw*7M3toD7JqdcAm*0amYZvw5iBZxVn4CGvd3.gumXjz1zgRb6RDhgc4U!/b&amp;bo=9AHMAPQBzAACaU0!&amp;rf=viewer_4" alt="" /></p><h5 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h5><p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55SJngrf9bCY7tZSIXcB0z1c3awilTNLt.yAkIEEXaB9vaec6spGFqPbjXD0EBhoHlxye2blmmjp8F66MOnSHorU!/b&amp;bo=9AHMAPQBzAACaU0!&amp;rf=viewer_4" alt="" /></p><p>（ps）单链表插入和删除操作，复杂度为O(1)</p><h4 id="循环链表"><a class="markdownIt-Anchor" href="#循环链表"></a> 循环链表</h4><p>一种特殊的单链表，与单链表的区别就在于尾结点，其尾结点指向链表的头结点</p><p>相比于单链表，循环链表的优势在于从链尾到链头很方便。著名的<code>约瑟夫问题</code>，就适合这种数据结构。</p><h4 id="双向链表"><a class="markdownIt-Anchor" href="#双向链表"></a> 双向链表</h4><p>单链表只有一个方向，结点只有一个后继指针next指向后面的节点。双向链表有两个方向，一个<code>后继指针next</code>和一个<code>前驱指针pre</code>。</p><p>双向链表在某些情况下的插入、删除操作比单链表更高效。<br />例如删除操作，从链表中删除一个数据，有两种情况：</p><ul><li>删除链表中值等于某个给定值的结点</li><li>删除给定指针指向的结点</li></ul><p>对于第一种情况，无论单链表还是双向链表，为了查找到值等于给定值的结点，都需要从头结点开始一个一个依次遍历对比，直到找到值等于给定值的结点，然后再将其删除。<br />尽管单纯的删除操作时间复杂度是 <code>O(1)</code>，但遍历查找的时间是主要的耗时点，对应的时间复杂度为 <code>O(n)</code>。根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为 <code>O(n)</code>。</p><p>对于第二种情况，已经找到了要删除的结点，但是删除某个结点 <code>q</code> 需要知道其前驱结点，而单链表并不支持直接获取前驱结点。这种情况下<strong>单链表</strong>删除操作需要 <code>O(n)</code> 的时间复杂度，而<strong>双向链表</strong>只需要 <code>O(1)</code> 的时间复杂度。</p><p>以上的情况涉及到一个<code>空间换时间</code>的设计思想：双向链表更费内存，但仍比单链表应用更广泛。</p><blockquote><p>缓存实际上就是利用了空间换时间的设计思想。<br />如果我们把数据存储在硬盘上，会比较节省内存，但每次查找数据都要询问一次硬盘，会比较慢。<br />但如果我们通过缓存技术，事先将数据加载在内存中，虽然会比较耗费内存空间，但是每次数据查询的速度就大大提高了。</p></blockquote><p>若内存空间充足，如果更加追求代码的执行速度，就选择空间复杂度相对较高，时间复杂度相对较低的算法和数据结构，例如，缓存技术。<br />若内存比较紧缺，比如代码跑在手机或者单片机上，这时，就要反过来用时间换空间。</p><h3 id="数组与链表对比"><a class="markdownIt-Anchor" href="#数组与链表对比"></a> 数组与链表对比</h3><h4 id="时间复杂度"><a class="markdownIt-Anchor" href="#时间复杂度"></a> 时间复杂度</h4><p>删除、插入：<code>链表O(1)</code>、<code>数组O(n)</code></p><p>随机访问操作：<code>链表O(n)</code>、<code>数组(1)</code></p><h4 id="缓存支持"><a class="markdownIt-Anchor" href="#缓存支持"></a> 缓存支持</h4><p>数组在实现上使用的是连续的内存空间，可以借助 CPU 的缓存机制，预读数组中的数据，所以访问效率更高。</p><p>链表在内存中并不是连续存储，所以对 CPU 缓存不友好，没办法有效预读。</p><h5 id="原因-2"><a class="markdownIt-Anchor" href="#原因-2"></a> 原因</h5><p>CPU在从内存读取数据的时候，会先把读取到的数据加载到CPU的缓存中。而CPU每次从内存读取数据并不是只读取要访问的地址，而是读取一个数据块，并保存到CPU缓存中，然后下次访问内存数据的时候就会先从CPU缓存开始查找，如果找到就不需要再从内存中取。<br />这样就实现了比内存访问速度更快的机制，也是CPU缓存存在的意义：<strong>为了弥补内存访问速度过慢与CPU执行速度快之间的差异</strong>。<br />对于数组来说，存储空间是连续的，所以在加载某个下标的时候可以把以后的几个下标元素也加载到CPU缓存这样执行速度会快于存储空间不连续的链表存储。</p><h4 id="灵活性"><a class="markdownIt-Anchor" href="#灵活性"></a> 灵活性</h4><p>数组大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，系统可能没有足够的连续内存空间分配给它，导致<code>内存不足（out of memory）</code>。如果声明的数组过小，则可能出现不够用的情况。这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。</p><p>链表本身没有大小的限制，天然地支持动态扩容。</p><h2 id="链表实现lru缓存淘汰策略的思路"><a class="markdownIt-Anchor" href="#链表实现lru缓存淘汰策略的思路"></a> 链表实现LRU缓存淘汰策略的思路</h2><p>维护一个有序单链表，越靠近链表尾部的结点是越早被访问过的。当有新的数据被访问时，从链表头开始顺序遍历链表。----缓存访问的时间复杂度为<code>O(n)</code></p><h3 id="过程"><a class="markdownIt-Anchor" href="#过程"></a> 过程：</h3><p>1 . 当访问的数据存储在缓存的链表中时，遍历得到数据对应的结点，将其从原位置删除，再将其插入到链表表头；<br />2 . 当访问的数据未出现在缓存的链表中时<br />1）若缓存有空闲，将该数据直接插入到链表表头。<br />2）若缓存被占满，则将链表尾部的数据删除，再将新数据插入到链表表头。</p><h3 id="优化使用散列表记录每个数据的位置将缓存访问的时间复杂度降到-o1"><a class="markdownIt-Anchor" href="#优化使用散列表记录每个数据的位置将缓存访问的时间复杂度降到-o1"></a> 优化：使用散列表，记录每个数据的位置，将缓存访问的时间复杂度降到 O(1)。</h3><h2 id="思考"><a class="markdownIt-Anchor" href="#思考"></a> 思考</h2><h3 id="如何用数组实现lru缓存淘汰策略"><a class="markdownIt-Anchor" href="#如何用数组实现lru缓存淘汰策略"></a> 如何用数组实现LRU缓存淘汰策略？</h3><p>方式一：首位置保存最新访问数据，末尾位置优先清理<br />当访问的数据未存在于缓存的数组中时<br />1）缓存有空闲，将数据插入数组第一个元素位置，数组所有元素需要向后移动1个位置，新数据插入数组第一个元素位置，时间复杂度为O(n)；<br />2）缓存无空闲，清理数组末尾位置的元素，数组所有元素需要向后移动1个位置，新数据插入数组第一个元素位置，时间复杂度为O(n)；<br />当访问的数据存在于缓存的数组中时，查找到数据，将其从原位置删除，并将其插入数组的第一个位置，此时亦需移动数组元素，时间复杂度为O(n)。</p><p>方式二：首位置优先清理，末尾位置保存最新访问数据<br />当访问的数据未存在于缓存的数组中时<br />1）缓存有空闲，直接将数据添加进数组作为当前最后一个元素，时间复杂度为O(1)；<br />2）缓存无空闲，清理数组首位置的元素，数组所有元素向前移动1个位置， 将新元素插入数组，时间复杂度为O(n)；<br />当访问的数据存在于缓存的数组中时，查找到数据，将其从原位置删除，并将其插入当前数组最后一个元素的位置，此时亦需移动数组元素，时间复杂度为O(n)。</p><h4 id="优化清理的时候可以考虑一次性清理一定数量从而降低清理次数提高性能"><a class="markdownIt-Anchor" href="#优化清理的时候可以考虑一次性清理一定数量从而降低清理次数提高性能"></a> 优化：清理的时候可以考虑一次性清理一定数量，从而降低清理次数，提高性能。</h4><h3 id="如何通过单链表实现判断某个字符串是否为回文字符串"><a class="markdownIt-Anchor" href="#如何通过单链表实现判断某个字符串是否为回文字符串"></a> 如何通过单链表实现“判断某个字符串是否为回文字符串”？</h3><p>比如 “123454321”<br />1 . 前提：字符串以单个字符的形式存储在单链表中。<br />2 . 遍历链表，判断字符个数是否为奇数，若为偶数，则不是。<br />3 . 将链表中的字符倒序存储一份在另一个链表中。<br />4 . 同步遍历2个链表，比较对应的字符是否相等，若相等，则是回文字符串，否则，不是。</p><p>大概就那么多吧</p><p><img src="http://r.photo.store.qq.com/psc?/V13PUOHK44wDVX/U3..NSiujzLMR7a*2QgXbZw8XfF3J1ylMRNVgRsTpuXpFpZ1aZlVPCzTH91gFx9RfK2HRp*YGv2n*SUl5.DuhA!!/r&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=qgCWAKoAlgARGS4!&amp;tl=3&amp;vuin=2080702939&amp;tm=1582869600&amp;sce=60-0-0&amp;rf=viewer_4" alt="" /></p><h2 id="讲讲完了代码呢"><a class="markdownIt-Anchor" href="#讲讲完了代码呢"></a> 讲…讲完了？？？？代码呢</h2><p>不…不会写啊，是的讲了那么多然而并没有会，代码该不会还是不会</p><p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55TNrZpCSVaPEjLDu2ufCyC6Wodjoy7jTVD4m*GnhbzrOkRuVExEqUj.nfB7vo2*MY1f0vtfgEgShNuzQWDbmzMo!/b&amp;bo=9AH0AfQB9AERGS4!&amp;rf=viewer_4" alt="" /></p><p>是的没错要用指针那就不会了呢，一点都不会了呢，没商量呢，不会就是不会呢</p><h2 id="但是一点点还是可以的"><a class="markdownIt-Anchor" href="#但是一点点还是可以的"></a> 但是一点点还是可以的</h2><p>就我会的稍微说一下，是的这就是我全部是知识储备了</p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55W*yzCSuBCaxd5iynpJtvAWdOcwFnc4S2PrIWl8K0QvU0ZIe6SSDz9o3Q8eDyk*bSwhDxHmK9EuJdNhSpUlaGzs!/b&amp;bo=0ALPAtACzwIRCT4!&amp;rf=viewer_4" style="zoom:80%;" /><h3 id="理解指针或引用的含义"><a class="markdownIt-Anchor" href="#理解指针或引用的含义"></a> 理解指针或引用的含义</h3><p>有些语言有<code>指针</code>概念，比如C语言；有些语言没有指针，取而代之的是<code>引用</code>，比如Java、Python。不管“指针”还是“引用”，都是一个意思，<code>指存储所指对象的内存地址</code>。</p><blockquote><p>指针含义：将某个变量（对象）赋值给指针（引用），实际上就是就是将这个变量（对象）的地址赋值给指针（引用）</p></blockquote><h4 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p—&gt;next = q; </span><br></pre></td></tr></table></figure><p>表示<code>p</code>节点的后继<code>next</code>指针存储了<code>q</code>节点的内存地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p—&gt;next = p—&gt;next—&gt;next;</span><br></pre></td></tr></table></figure><p>表示<code>p</code>节点的后继<code>next</code>指针存储了<code>p</code>节点的下下个节点的内存地址。</p><h3 id="警惕指针丢失和内存泄漏"><a class="markdownIt-Anchor" href="#警惕指针丢失和内存泄漏"></a> 警惕指针丢失和内存泄漏</h3><h4 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例：</h4><p>单链表的插入，希望在节点a和相邻节点b之间插入节点x，假设当前指针p指向节点a，则造成指针丢失和内存泄漏的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;next = x;</span><br><span class="line">x-&gt;next = p-&gt;next</span><br></pre></td></tr></table></figure><p>导致将<code>x</code>自身赋值给了<code>x-&gt;next</code>，自己指向自己。</p><blockquote><p>对于有些语言来说，比如 C 语言，内存管理是由程序员负责的，如果没有手动释放结点对应的内存空间，就会产生内存泄露。</p></blockquote><p>所以，插入结点时，一定要注意操作的顺序。上面代码的正确写法是：<strong>两句代码顺序调换</strong>。<br />同理，删除链表时，也一定要手动释放内存空间，否则，也会出现内存泄漏问题。</p><blockquote><p>Python语言不需手动释放，它的解释器的存储管理系统会自动回收不用的存储。</p></blockquote><h3 id="利用哨兵头结点简化实现难度"><a class="markdownIt-Anchor" href="#利用哨兵头结点简化实现难度"></a> 利用哨兵（头结点）简化实现难度</h3><h4 id="哨兵含义"><a class="markdownIt-Anchor" href="#哨兵含义"></a> <code>哨兵</code>含义：</h4><p>链表中的<code>哨兵</code>节点是解决边界问题的，不参与业务逻辑。如果我们引入<code>哨兵</code>节点，则不管链表是否为空，head指针都会指向这个“哨兵”节点。我们把这种有“哨兵”节点的链表称为<code>带头链表</code>，相反，没有<code>哨兵</code>节点的链表就称为不带头链表。</p><h4 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例：</h4><h5 id="不带头结点时"><a class="markdownIt-Anchor" href="#不带头结点时"></a> 不带头结点时：</h5><ul><li>对于单链表的插入操作</li></ul><p>1 . 如果在p节点后插入一个新节点，只需2行代码即可搞定：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_node—&gt;next = p—&gt;next;</span><br><span class="line">p—&gt;next = new_node;</span><br></pre></td></tr></table></figure><p>2 . 如果向空链表中插入一个新结点，则代码就不同：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(head == null)&#123;</span><br><span class="line">  head = new_node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于单链表的删除操作</li></ul><p>1 . 如果要删除节点p的后继节点，只需1行代码即可搞定：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p—&gt;next = p—&gt;next—&gt;next;</span><br></pre></td></tr></table></figure><p>2 . 如果删除的是链表的最后一个节点（链表中只剩下这个节点），则代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(head—&gt;next == null)&#123;</span><br><span class="line">  head = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上示例可以看出，不带头结点时，单链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点作特殊处理。</p></blockquote><h5 id="带头结点时"><a class="markdownIt-Anchor" href="#带头结点时"></a> 带头结点时：</h5><p><code>哨兵</code>节点不存储数据，无论链表是否为空，<code>head</code>指针都会指向它，作为链表的头结点始终存在。<br />这样，插入第一个节点和插入其他节点，删除最后一个节点和删除其他节点都可以统一为相同的实现逻辑。</p><h3 id="留意边界条件处理"><a class="markdownIt-Anchor" href="#留意边界条件处理"></a> 留意边界条件处理</h3><p>常用的检查链表代码是否正确的边界条件：<br />1 . 如果链表为空时，代码是否能正常工作？<br />2 . 如果链表只包含一个节点时，代码是否能正常工作？<br />3 . 如果链表只包含两个节点时，代码是否能正常工作？<br />4 . 代码逻辑在处理头尾节点时是否能正常工作？</p><h2 id="没了"><a class="markdownIt-Anchor" href="#没了"></a> 没了</h2><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55W*yzCSuBCaxd5iynpJtvAWdOcwFnc4S2PrIWl8K0QvU0ZIe6SSDz9o3Q8eDyk*bSwhDxHmK9EuJdNhSpUlaGzs!/b&amp;bo=0ALPAtACzwIRCT4!&amp;rf=viewer_4" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表写不出来咋整啊</title>
      <link href="/posts/4f36d243/"/>
      <url>/posts/4f36d243/</url>
      
        <content type="html"><![CDATA[<h1 id="链表写不出来咋整啊"><a class="markdownIt-Anchor" href="#链表写不出来咋整啊"></a> 链表写不出来咋整啊</h1><p>链表已经学了三四天，它不是那种学不会，他就是那种很特别的，你懂吧，单链表：这不还是挺简单的吗，双链表：哦吼有点难度了啊，循环链表：，马嘞个…马马虎虎啊。跳跃链表：…。自组织链表：啥玩意啊？？？稀疏表：老子不学了还不行吗，标准模板库中的链表：对不起大爷，俺错了，饶了俺吧.所以知识不牢固；链表分分钟教你做人</p><p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55bocD0bTtWQ.2LV8GB.oKCt9h78WS7QMsvR4N7e4T0.17pDEJ55rFB1TKVKnhzerE4xqV*G.vuecToq6IbjFjjI!/b&amp;bo=JgERASYBEQECCS0!&amp;rf=viewer_4" alt="" /></p><p>嘛毕竟不能一口吞个坦克，不过想想的确链表挺揪心的。俺们组的大佬人家说了，深刻的理解和令人胆寒的代码量必然带来的不仅仅是质的变化。道理谁都懂但但做到很难！！！！今天打算好好梳理一下。</p><h2 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h2><p>这个我之前就已经吧搜索，插入，删除，以及一些常见的概念说的很清楚了大概【？】 ，我看实现单链表的详细清单有3页这就已经很扯淡了，所以这里的只说一些简单的实现。</p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55fZu8oph7fUnKt.TYc0FQpD*7s8DdYnsS2aZhEi4FSpqU4d7e6n7U5Hl4twwJo41i0U9bLRitS6rClf4KrCf2gk!/b&amp;bo=wAMPA8ADDwMRCT4!&amp;rf=viewer_4" style="zoom:50%;" /><h3 id="单链表结构"><a class="markdownIt-Anchor" href="#单链表结构"></a> 单链表结构</h3><p>我们设计一个简单的单链表结构，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"><span class="type">int</span> value; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> *next;</span><br><span class="line">&#125;;<span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ListNode</span>  * list;</span><br></pre></td></tr></table></figure><p>phead为单链表的头指针，它指向表中的第一个节点，头结点的数据可以不存储然后信息，也可以设计成存储线性表长度等附加信息。</p><h3 id="打印单链表"><a class="markdownIt-Anchor" href="#打印单链表"></a> 打印单链表</h3><p>首先，我们可以利用链表打印数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">     <span class="type">int</span> data;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line"> &#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>  * <span class="title">list</span>;</span></span><br><span class="line">ListNode *<span class="title function_">creat</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    ListNode *phead, *p1, *p2;</span><br><span class="line">    <span class="comment">/*phead用来标记链表，p1总是用来指向新分配的内存空间，</span></span><br><span class="line"><span class="comment">    p2总是指向尾结点，并通过p2来链入新分配的结点*/</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    phead = <span class="literal">NULL</span>;</span><br><span class="line">    p2 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1 = (ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">        <span class="comment">/*动态分配内存空间，并数据转换为(struct LNode)类型*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入链表中的第%d个数：&quot;</span>, i);</span><br><span class="line">       <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">        p1-&gt;data = a;</span><br><span class="line">        <span class="keyword">if</span> (phead == <span class="literal">NULL</span>)<span class="comment">/*指定链表的头指针*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            phead = p1;</span><br><span class="line">            p2 = p1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p2-&gt;next = p1;</span><br><span class="line">            p2 = p1;</span><br><span class="line">        &#125;</span><br><span class="line">        p2-&gt;next = <span class="literal">NULL</span>;<span class="comment">/*尾结点的后继指针为NULL(空)*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> phead;<span class="comment">/*返回链表的头指针*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    ListNode *q;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入链表的长度：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    q = creat(n);<span class="comment">/*链表的头指针(head)来标记整个链表*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;链表中的数据：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (q)<span class="comment">/*直到结点q为NULL结束循环*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q-&gt;data);<span class="comment">/*输出结点中的值*/</span></span><br><span class="line">        q = q-&gt;next;<span class="comment">/*指向下一个结点*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释很很很很很清楚了，就不解释了</p><p>我这边还有我第一次写的一个demo，和这个意思也是一样的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Node*<span class="title">creat</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span>* head, *p1,*p2;</span><br><span class="line">    head=(<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    p1=head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        p2=(<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> Node)); </span><br><span class="line">        p2-&gt;data=i+<span class="number">1</span>;</span><br><span class="line">        p1-&gt;next=p2;</span><br><span class="line">        p1=p2;</span><br><span class="line">    &#125;</span><br><span class="line">    p2-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> head-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="type">int</span> n;</span><br><span class="line">    Node *q;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入链表的长度：\n&quot;</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    q = <span class="built_in">creat</span>(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;链表中的数据：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (q)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q-&gt;data);</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表排序"><a class="markdownIt-Anchor" href="#单链表排序"></a> 单链表排序</h3><p>下面实现稍微复杂的一些的链表操作，比如单链表的排序，单独排序功能实现常见的就有插入排序，冒泡排序，简单排序，快速排序，这里我们简单实现一些插入排序好了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(list linklist)</span></span></span><br><span class="line"><span class="function"></span>&#123;      <span class="comment">/*如果链表没有元素，或者只有一个元素就直接返回*/</span></span><br><span class="line">    <span class="keyword">if</span>((linklist -&gt; next == <span class="literal">NULL</span>) || (linklist -&gt; next -&gt; next == <span class="literal">NULL</span>))</span><br><span class="line">    &#123;          </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    ListNode * phead, * p1, * prep1, * p2, * prep2, * temp;</span><br><span class="line">    phead = linklist;</span><br><span class="line">    prep1 = phead -&gt; next;</span><br><span class="line">    p1 = prep1 -&gt; next;</span><br><span class="line">    <span class="comment">//prep1和p1是否需要手动后移    </span></span><br><span class="line">    <span class="type">bool</span> flag;</span><br><span class="line">    <span class="keyword">while</span>(p1 != <span class="literal">NULL</span>) </span><br><span class="line">    &#123;           </span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        temp = p1;   </span><br><span class="line">        <span class="comment">//由于是单向链表，所以只能从头部开始检索 </span></span><br><span class="line">        <span class="keyword">for</span>(prep2 = head, p2 = prep2 -&gt; next; p2 != p1; prep2 = prep2 -&gt; next, p2 = p2 -&gt; next) </span><br><span class="line">        &#123;               </span><br><span class="line">            <span class="comment">//发现第一个较大值</span></span><br><span class="line">            <span class="keyword">if</span>(p2 -&gt; data &gt; p1 -&gt; data) </span><br><span class="line">            &#123;         </span><br><span class="line">                p1 = p1 -&gt; next;   </span><br><span class="line">                prep1 -&gt; next = p1;     </span><br><span class="line">                prep2 -&gt; next = temp;     </span><br><span class="line">                temp -&gt; next = p2;        </span><br><span class="line">                flag = <span class="literal">false</span>;            </span><br><span class="line">                <span class="keyword">break</span>;           </span><br><span class="line">            &#125;          </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="comment">//手动后移prep1和p1  </span></span><br><span class="line">        <span class="keyword">if</span>(flag) </span><br><span class="line">        &#123;        </span><br><span class="line">            prep1 = prep1 -&gt; next;  </span><br><span class="line">            p1 = p1 -&gt; next; </span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的操作都不是很难那我们再试试反转</p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55Zplq0BElpbDCNHtqLZGAIYFxaG2Wqgn2xMxrily8fh*E6rEa2Ja4B8kApjp0cgCJ0I3gUG0U4SPYl*E1anA*Eg!/b&amp;bo=cQJwAnECcAIRGS4!&amp;rf=viewer_4" style="zoom:50%;" /><h3 id="单链表翻转"><a class="markdownIt-Anchor" href="#单链表翻转"></a> 单链表翻转</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ListNode <span class="title function_">reverse</span><span class="params">(<span class="built_in">list</span> linklist)</span><span class="comment">//两两节点之间不断交换</span></span><br><span class="line">&#123;  ListNode *phead；</span><br><span class="line">    phead = linklist;</span><br><span class="line"> <span class="comment">/*如果为空直接返回*/</span> </span><br><span class="line"> <span class="keyword">if</span>(phead == <span class="literal">NULL</span> || phead-&gt;next == <span class="literal">NULL</span>) </span><br><span class="line">     <span class="keyword">return</span> phead;  <span class="comment">//定义俩个辅助指针变量 </span></span><br><span class="line"> ListNode pre = <span class="literal">NULL</span>; </span><br><span class="line"> ListNode next = <span class="literal">NULL</span>; </span><br><span class="line"> <span class="comment">//开始进行翻转  </span></span><br><span class="line"> <span class="keyword">while</span>(phead != <span class="literal">NULL</span>)&#123;  </span><br><span class="line">     <span class="comment">//让辅助指针next指向下一个节点，如果是第一次进入就是指向头指针下一跳  </span></span><br><span class="line">     next = phead-&gt;next;  </span><br><span class="line">     <span class="comment">//让当前节点指向pre   </span></span><br><span class="line">     phead-&gt;next = pre;   </span><br><span class="line">     <span class="comment">//进行调换    </span></span><br><span class="line">     pre = phead;  </span><br><span class="line">     <span class="comment">//并让头节点指向下一跳  </span></span><br><span class="line">     phead = next;</span><br><span class="line"> &#125;  <span class="comment">//返回pre就是新生成的头结点 </span></span><br><span class="line"> <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>emmmmm至于剩下的插入，删除，还有封装等我会了在填坑吧！！！就酱</p><p><img src="http://m.qpic.cn/psc?/V13PUOHK44wDVX/4pNOqgOvBLvj4yTC9qc55cTYZa3tBaHo2zJu3BoyFpwlJ6jHEdtpnq7KEL09umXIR005nuqYSJ4XqilQvvafaHpRpOQU73.*6bCKQ*x5*60!/b&amp;bo=VQOAAlUDgAIRGS4!&amp;rf=viewer_4" alt="" /></p><h2 id="我回来填坑啦"><a class="markdownIt-Anchor" href="#我回来填坑啦"></a> 我回来填坑啦</h2><p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/2988714247500569.jpg" alt="" /></p><p>大概算是首次填坑？？？？？</p><p>大概重新写了一遍又有了新的感悟吧，这算不算填坑啊【苦恼】，有时间废话还不如直接上代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">////////////////////////////////////////////   </span></span><br><span class="line"><span class="comment">//定义结点类型   </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    ElemType data;              <span class="comment">//单链表中的数据域   </span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> *next;          <span class="comment">//单链表的指针域   </span></span><br><span class="line">&#125;Node,*LinkedList;  </span><br><span class="line"><span class="comment">////////////////////////////////////////////   </span></span><br><span class="line"><span class="comment">//单链表的初始化  </span></span><br><span class="line"><span class="function">LinkedList <span class="title">LinkedListInit</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Node *L;  </span><br><span class="line">    L = <span class="keyword">new</span> Node;   <span class="comment">//申请结点空间   </span></span><br><span class="line">    <span class="keyword">if</span>(L == <span class="literal">nullptr</span>)                       <span class="comment">//判断是否有足够的内存空间   </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;申请内存空间失败/n&quot;</span>);  </span><br><span class="line">    L-&gt;next = <span class="literal">nullptr</span>;                  <span class="comment">//将next设置为NULL,初始长度为0的单链表   </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">////////////////////////////////////////////   </span></span><br><span class="line"><span class="comment">//单链表的建立1，头插法建立单链表  </span></span><br><span class="line"><span class="function">LinkedList <span class="title">LinkedListCreatH</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Node *L;  </span><br><span class="line">    L = <span class="keyword">new</span> Node;   <span class="comment">//申请头结点空间  </span></span><br><span class="line">    L-&gt;next = <span class="literal">nullptr</span>;                      <span class="comment">//初始化一个空链表  </span></span><br><span class="line">      </span><br><span class="line">    ElemType x;                         <span class="comment">//x为链表数据域中的数据  </span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x) != EOF)  </span><br><span class="line">    &#123;  </span><br><span class="line">        Node *p;  </span><br><span class="line">        p = <span class="keyword">new</span> Node; <span class="comment">//申请新的结点   </span></span><br><span class="line">        p-&gt;data = x;                     <span class="comment">//结点数据域赋值   </span></span><br><span class="line">        p-&gt;next = L-&gt;next;                    <span class="comment">//将结点插入到表头L--&gt;|2|--&gt;|1|--&gt;NULL   </span></span><br><span class="line">        L-&gt;next = p;   </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">////////////////////////////////////////////   </span></span><br><span class="line"><span class="comment">//单链表的建立2，尾插法建立单链表  </span></span><br><span class="line"><span class="function">LinkedList <span class="title">LinkedListCreatT</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Node *L;  </span><br><span class="line">    L = <span class="keyword">new</span> Node;   <span class="comment">//申请头结点空间  </span></span><br><span class="line">    L-&gt;next = <span class="literal">nullptr</span>;                  <span class="comment">//初始化一个空链表  </span></span><br><span class="line">    Node *r;  </span><br><span class="line">    r = L;                          <span class="comment">//r始终指向终端结点，开始时指向头结点   </span></span><br><span class="line">    ElemType x;                         <span class="comment">//x为链表数据域中的数据  </span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x) != EOF)  </span><br><span class="line">    &#123;  </span><br><span class="line">        Node *p;  </span><br><span class="line">        p = <span class="keyword">new</span> Node;  <span class="comment">//申请新的结点   </span></span><br><span class="line">        p-&gt;data = x;                     <span class="comment">//结点数据域赋值   </span></span><br><span class="line">        r-&gt;next = p;                 <span class="comment">//将结点插入到表头L--&gt;|1|--&gt;|2|--&gt;NULL   </span></span><br><span class="line">        r = p;   </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next = <span class="literal">nullptr</span>;   </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> L;     </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">////////////////////////////////////////////   </span></span><br><span class="line"><span class="comment">//单链表的插入，在链表的第i个位置插入x的元素  </span></span><br><span class="line"><span class="function">LinkedList <span class="title">LinkedListInsert</span><span class="params">(LinkedList L,<span class="type">int</span> i,ElemType x)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Node *pre;                      <span class="comment">//pre为前驱结点   </span></span><br><span class="line">    pre = L;  </span><br><span class="line">    <span class="type">int</span> tempi = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (tempi = <span class="number">1</span>; tempi &lt; i; tempi++)  </span><br><span class="line">        pre = pre-&gt;next;                 <span class="comment">//查找第i个位置的前驱结点   </span></span><br><span class="line">    Node *p;                                <span class="comment">//插入的结点为p  </span></span><br><span class="line">    p = <span class="keyword">new</span> Node;  </span><br><span class="line">    p-&gt;data = x;   </span><br><span class="line">    p-&gt;next = pre-&gt;next;  </span><br><span class="line">    pre-&gt;next = p;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> L;                             </span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">////////////////////////////////////////////   </span></span><br><span class="line"><span class="comment">//单链表的删除，在链表中删除值为x的元素  </span></span><br><span class="line"><span class="function">LinkedList <span class="title">LinkedListDelete</span><span class="params">(LinkedList L,ElemType x)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Node *p,*pre;                   <span class="comment">//pre为前驱结点，p为查找的结点。   </span></span><br><span class="line">    p = L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(p-&gt;data != x)              <span class="comment">//查找值为x的元素   </span></span><br><span class="line">    &#123;     </span><br><span class="line">        pre = p;   </span><br><span class="line">        p = p-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    pre-&gt;next = p-&gt;next;          <span class="comment">//删除操作，将其前驱next指向其后继。   </span></span><br><span class="line">    <span class="built_in">free</span>(p);  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">/////////////////////////////////////////////  </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    LinkedList list,start;  </span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;请输入单链表的数据：&quot;</span>);  </span><br><span class="line">    list = <span class="built_in">LinkedListCreatH</span>(); </span><br><span class="line">    <span class="keyword">for</span>(start = list-&gt;next; start != <span class="literal">nullptr</span>; start = start-&gt;next) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,start-&gt;data); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;/n&quot;</span>); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入单链表的数据：&quot;</span>);   </span><br><span class="line">    list = <span class="built_in">LinkedListCreatT</span>();  </span><br><span class="line">    <span class="keyword">for</span>(start = list-&gt;next; start != <span class="literal">nullptr</span>; start = start-&gt;next)  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,start-&gt;data);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;/n&quot;</span>);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入插入数据的位置：&quot;</span>);  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入插入数据的值：&quot;</span>);  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="built_in">LinkedListInsert</span>(list,i,x);  </span><br><span class="line">    <span class="keyword">for</span>(start = list-&gt;next; start != <span class="literal">nullptr</span>; start = start-&gt;next)  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,start-&gt;data);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;/n&quot;</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要删除的元素的值：&quot;</span>);  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="built_in">LinkedListDelete</span>(list,x);   </span><br><span class="line">    <span class="keyword">for</span>(start = list-&gt;next; start != <span class="literal">nullptr</span>; start = start-&gt;next)  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,start-&gt;data);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;/n&quot;</span>);  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;   </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>话说与时代落后的老爷爷终于用上了nullptr【雾】</p><img src="https://npm.elemecdn.com/youmingsama_pic@1.0.0/PicGo/img/maomaopao.gif" style="zoom:150%;" />]]></content>
      
      
      <categories>
          
          <category> bug的炼金工坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
